<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LML♥WF</title>
    <url>/2024/07/10/LML-WF/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误, 请重试" data-whm="文章不能被校验, 请重试">
  <script id="hbeData" type="hbeData" data-hmacdigest="7b07456fc5ee33c8d5a553208e1297dab6174af21974d62fd7997db79cfcb115">e123bb26adeb20e10b1b9fc099d87b740d1b4058e97f96207bb39a2709c767ef95b2fc9220cf1fd12ba57e4d09af07d25010c4dfbd1a125b61efbbc5fd75f26fd7a170bd2cda2ab21e13b5baffc17890fe6b3edb5b957e31826f33cd1f51959520a10cbf0ae1cf09b1ede1bf225471eb3031cc6974b7b432363c01a42b1abb8239d2e0aa6b3311e290383467b0030ba8d531ff53d952eb6e07dd2d12deeae7d2811f189a73e496967dde3ee74153035eb8427364178ffa3222b3ebad4c69ff13a3c916e313df6d5c9b3551504efa76ae70c98f5728c80055d4879cb8c08dada60a22e1be25489e880cb7121a5f5c938ec977b5197f8fedf046343f5a574980394fa838ee4052e888e1ec3aadfed929bbc6ea17a5f49e9a9b6f6cb5d340a24f34d41616889e9a7e055f1dfbb9f5b48d5fc270c7f32787b744c03c778dda55460673dab698b7ecd7b88f5e21507c1fd59d7768eb3d8490925e881df7ffac5e0c03aeae99751dd079e37e45f506b4f88cf5243a611b9a1f00d923d21c5e83288e6fbbb39ede642b9eb977e204833855c54953c6d080c4e6db257f23f9f75e5358630110c3abd234d6187d23f2ce8259c4c23c8daaaefdcf8dad3fb57e5646c627111b65cd794cf668ee2f11871977263fbe990b6bfe6aa414546c356c5c33db6f86f2467b93eee9462e0a7ef3a3462bab34788d3a949cd3840625bac199529b99f5c648cc20a5f4502b3b8b026880caacc7301cd37c5cfdd52d0e7a708579eff3a5566077965ef2d2aff1e04f644ef6def7592c24fc1c15bc8b9921ad70dada5a6d5613fe93ae663e1bb54ec67a96e212ef4db714a6210aaeac448be4d8573461033ab29d39ac66f90d6dcefc44800f3eaf75f1acc7a78f109220835520d727adf7d39774d30d312093f8ba1a6c9645278100e5dc0706e9d4634921c2953e0a506033d3c03b58240da552c3803624592dfe0bd1c09937055dc103cf4d92c14229f50cc1ad97be55ca2d57758f34c2323ec512c7cc896c714db4176bf22679f074f37dc1c5172fae7f24f9c1605fc975ec278c3d16ebae199a0a9f192781f10da05dbbea2884ce9d2e80245a7aa081676441ef0b35498b9fbfbf0c7b7aebaf9aee60f3577ba4e9986eb72196e48511b3f098a3488b61c090fb76e94d5f3b037170e7dc114d87b101935e9dd07b6601ede1216ed00186505523838c38e4a4c6411477a8525d95c7e29a6dfc81ee3464edb83bdb1ab5b978f2e214bbaa4df701e4d6afad9704e20991c6d2656c84cfa0e7477e34c1ab14a994a9fae6b85b951c6a8a557dcf4569721828724aa006ce0a330d70</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-up">
      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-up">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>LML</category>
      </categories>
      <tags>
        <tag>LML</tag>
      </tags>
  </entry>
  <entry>
    <title>Python笔记</title>
    <url>/2024/06/21/Python%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="python基础语法">Python基础语法</h1>
<h2 id="字面量">字面量</h2>
<p>(被写在代码中的固定的值或文本)</p>
<p>1、数字：<code>int</code>、<code>float</code>、复数等</p>
<p>2、字符串：又称文本，加双引号<code>”123123“</code></p>
<p>3、布尔：<code>Ture</code>、<code>False</code></p>
<p>4、特殊字面量<code>None</code></p>
<p>5、字面量集合：列表、元组等</p>
<h2 id="注释的分类">注释的分类</h2>
<p>（注释不影响程序的运行）</p>
<p>1.单行注释：以#开头，如#+空格+注释，#后一般为了规范要求添加一个空格,若没有空格会产生一个波浪号，但并不影响运行</p>
<p>2.多行注释：以<code>"""</code>开头、<code>"""</code>（英文）结尾的多行注释，
如</p>
<p>”“” ​<br />
多行注释 ​<br />
“”“</p>
<p>​
一般对<code>python</code>的类和文件进行注释，在对<code>python</code>的文件进行注释的时候一般将多行注释写在程序的开头</p>
<h2 id="变量">变量</h2>
<p>（在程序运行时记录数据用的，记录数字，字符串等,变量的值是可以改变的）</p>
<p>​ 定义格式：<code>A = 5</code></p>
<p>​ 上述A为变量名，＝为赋值符号，5为变量值</p>
<p>​ 代码规范：</p>
<p>1.一般等号两边要各加上一个空格，若不加空格，则等号底部会出现波浪号</p>
<p>2.在用<code>print</code>输出两个及以上变量时，要用,+空格将不同的变量隔开，如<code>print（“love”， “money”）</code>，
若不在,后面加空格，则,下会出现波浪线，但不影响代码运行</p>
<p>数值型的变量的数学运算：<code>A=B+（-*/）C</code>,运算符前后都要加空格，若含有不同优先级的运算符，只在最低级的运算符两侧加空格</p>
<blockquote>
<p>注意<code>print</code>语句的执行顺序是从左向右</p>
<p>eg1</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">b=<span class="number">2</span>, a=<span class="number">4</span></span>):</span><br><span class="line">    <span class="keyword">global</span> z</span><br><span class="line">    z += a*b</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(z, demo())</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">10 18</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>这个例子，<code>print</code>首先打印<code>z</code>，再运行<code>demo（）</code>，在运行<code>demo（）</code>之前，全局变量<code>z</code>还没有被改变</p>
<p>eg2</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">b=<span class="number">2</span>, a=<span class="number">4</span></span>):</span><br><span class="line">    <span class="keyword">global</span> z</span><br><span class="line">    z += a*b</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">z = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(demo(), z)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">18 18</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>在这个例子中，<code>demo（）</code>首先运行，将全局变量<code>z</code>改变为18
，最后打印全局变量<code>z</code></p>
</blockquote>
<h2 id="数据类型入门">数据类型(入门)</h2>
<p><code>string："哈哈"</code></p>
<p><code>int：123</code></p>
<p><code>float：1.23</code></p>
<p><code>type</code>（变量或数值）查看变量(变量无类型)所存储的数据类型，在运行type（变量）之后，type（变量）也成为一个存储<code>&lt;class 'string'&gt;</code>、<code>&lt;class 'int'&gt;</code>、<code>&lt;class 'float'&gt;</code>其中之一的变量,即为其返回值，也可用其他变量接收。</p>
<h2 id="数据类型的转换">数据类型的转换</h2>
<p>注意事项：</p>
<p>1、从文件中读取的数字（包括<code>input</code>语句也是输入的字符串）默认是字符串类型，需要将其转化为数字类型</p>
<p>2、将数字数据转换为字符串数据以输出到外部系统</p>
<p>3、只有数字类字符串可以转化为整数或浮点数（小数）类型，整数类型可以转浮点类型,其小数位数为一个0.而浮点数转化为整数会直接取整。</p>
<p>4、所有的数据类型都可<code>str（）</code>，但反之不然</p>
<p>转换方法：<code>str()</code>,<code>float()</code>,<code>int()</code>。将括号中的变量所储存的数据转化为其对应的要转化的类型，他们都有相应数据转化后的返回值，可用变量接收</p>
<blockquote>
<p>注意：<code>str()</code>将其他的数据类型转化为字符串类型时，属于转换前数据容器的表示也会被转换为字符串，如属于列表的<code>[]</code>,属于集合的<code>()</code>等</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">55</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>(list_1)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>(list_1):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">set_1 = &#123;<span class="number">22</span>, <span class="number">33</span>, <span class="number">55</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">str</span>(set_1)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>(set_1):</span><br><span class="line">    <span class="built_in">print</span>(i, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">结果为:</span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">[12, 23, 55] </span></span><br><span class="line"><span class="string">---------------------</span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&#123;33, 22, 55&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="标识符">标识符</h2>
<p>（在编程时所使用的一系列名字，用于给变量、类、方法等命名）</p>
<p>​ 标识符命名规则：（硬限制）</p>
<p>​
1.标识符只能出现英文、中文、数字和下划线_，不推荐使用中文，数字不可用在开头</p>
<p>​ 2.大小写敏感，大小写有区分</p>
<p>​ 3.不可使用关键字,如if等.大小写不同不算占用关键字。 ​
标识符命名规范：变量的命名（软限制）：</p>
<p>​ 1、见名知意</p>
<p>​ 2、下划线命名法，多个单词组合变量名，用下划线做分割</p>
<p>​ 3、英文字母全小写</p>
<h2 id="运算符">运算符</h2>
<h3 id="算术运算符">算术运算符</h3>
<p>以下假设变量:<code>a=10</code>，<code>b=20</code></p>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 45%" />
<col style="width: 48%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">运算符</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">实例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">+</td>
<td style="text-align: left;">加 - 两个对象相加</td>
<td style="text-align: left;">a + b 输出结果 30</td>
</tr>
<tr class="even">
<td style="text-align: left;">-</td>
<td style="text-align: left;">减 - 得到负数或是一个数减去另一个数</td>
<td style="text-align: left;">a - b 输出结果 -10</td>
</tr>
<tr class="odd">
<td style="text-align: left;">*</td>
<td style="text-align: left;">乘 -
两个数相乘或是返回一个被重复若干次的字符串</td>
<td style="text-align: left;">a * b 输出结果 200</td>
</tr>
<tr class="even">
<td style="text-align: left;">/</td>
<td style="text-align: left;">除 - x除以y</td>
<td style="text-align: left;">b / a 输出结果 2</td>
</tr>
<tr class="odd">
<td style="text-align: left;">%</td>
<td style="text-align: left;">取模 - 返回除法的余数</td>
<td style="text-align: left;">b % a 输出结果 0</td>
</tr>
<tr class="even">
<td style="text-align: left;">**</td>
<td style="text-align: left;">幂 - 返回x的y次幂</td>
<td style="text-align: left;">a**b 为10的20次方， 输出结果
100000000000000000000</td>
</tr>
<tr class="odd">
<td style="text-align: left;">//</td>
<td style="text-align: left;">取整除 -
返回商的整数部分（<strong>向下取整</strong>）</td>
<td style="text-align: left;">9//2=4</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：0%任何数都为0</p>
</blockquote>
<h3 id="比较运算符">比较运算符</h3>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 56%" />
<col style="width: 37%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">运算符</th>
<th style="text-align: center;">描述</th>
<th style="text-align: left;">实例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">==</td>
<td style="text-align: center;">等于 - 比较对象是否相等</td>
<td style="text-align: left;">(a == b) 返回 False。</td>
</tr>
<tr class="even">
<td style="text-align: center;">!=</td>
<td style="text-align: center;">不等于 - 比较两个对象是否不相等</td>
<td style="text-align: left;">(a != b) 返回 True。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">&lt;&gt;</td>
<td style="text-align: center;">不等于 -
比较两个对象是否不相等。<strong>python3 已废弃。</strong></td>
<td style="text-align: left;">(a &lt;&gt; b) 返回 True。这个运算符类似
!= 。</td>
</tr>
<tr class="even">
<td style="text-align: center;">&gt;</td>
<td style="text-align: center;">大于 - 返回x是否大于y</td>
<td style="text-align: left;">(a &gt; b) 返回 False。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">&lt;</td>
<td style="text-align: center;">小于 -
返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量
True 和 False 等价。</td>
<td style="text-align: left;">(a &lt; b) 返回 True。</td>
</tr>
<tr class="even">
<td style="text-align: center;">&gt;=</td>
<td style="text-align: center;">大于等于 - 返回x是否大于等于y。</td>
<td style="text-align: left;">(a &gt;= b) 返回 False。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">&lt;=</td>
<td style="text-align: center;">小于等于 - 返回x是否小于等于y。</td>
<td style="text-align: left;">(a &lt;= b) 返回 True。</td>
</tr>
</tbody>
</table>
<h3 id="赋值运算符">赋值运算符</h3>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">运算符</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">实例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">=</td>
<td style="text-align: left;">简单的赋值运算符</td>
<td style="text-align: left;">c = a + b 将 a + b 的运算结果赋值为 c</td>
</tr>
<tr class="even">
<td style="text-align: left;">+=</td>
<td style="text-align: left;">加法赋值运算符</td>
<td style="text-align: left;">c += a 等效于 c = c + a</td>
</tr>
<tr class="odd">
<td style="text-align: left;">-=</td>
<td style="text-align: left;">减法赋值运算符</td>
<td style="text-align: left;">c -= a 等效于 c = c - a</td>
</tr>
<tr class="even">
<td style="text-align: left;">*=</td>
<td style="text-align: left;">乘法赋值运算符</td>
<td style="text-align: left;">c <em>= a 等效于 c = c </em> a</td>
</tr>
<tr class="odd">
<td style="text-align: left;">/=</td>
<td style="text-align: left;">除法赋值运算符</td>
<td style="text-align: left;">c /= a 等效于 c = c / a</td>
</tr>
<tr class="even">
<td style="text-align: left;">%=</td>
<td style="text-align: left;">取模赋值运算符</td>
<td style="text-align: left;">c %= a 等效于 c = c % a</td>
</tr>
<tr class="odd">
<td style="text-align: left;">**=</td>
<td style="text-align: left;">幂赋值运算符</td>
<td style="text-align: left;">c ** = a 等效于 c = c ** a</td>
</tr>
<tr class="even">
<td style="text-align: left;">//=</td>
<td style="text-align: left;">取整除赋值运算符</td>
<td style="text-align: left;">c //= a 等效于 c = c // a</td>
</tr>
</tbody>
</table>
<h3 id="位运算符">位运算符</h3>
<table style="width:100%;">
<colgroup>
<col style="width: 4%" />
<col style="width: 47%" />
<col style="width: 47%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">运算符</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">实例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">&amp;</td>
<td
style="text-align: left;">按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0</td>
<td style="text-align: left;">(a &amp; b) 输出结果 12 ，二进制解释：
0000 1100</td>
</tr>
<tr class="even">
<td style="text-align: left;">|</td>
<td
style="text-align: left;">按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。</td>
<td style="text-align: left;">(a | b) 输出结果 61 ，二进制解释： 0011
1101</td>
</tr>
<tr class="odd">
<td style="text-align: left;">^</td>
<td
style="text-align: left;">按位异或运算符：当两对应的二进位相异时，结果为1</td>
<td style="text-align: left;">(a ^ b) 输出结果 49 ，二进制解释： 0011
0001</td>
</tr>
<tr class="even">
<td style="text-align: left;">~</td>
<td
style="text-align: left;">按位取反运算符：将二进制表示中的每一位取反，0
变为 1，1 变为 0。<strong>~x</strong> 类似于 <strong>-x-1</strong></td>
<td style="text-align: left;">(~a ) 输出结果 -61 ，二进制解释： 1100
0011 (以补码形式表示)，在一个有符号二进制数的补码形式。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">&lt;&lt;</td>
<td
style="text-align: left;">左移动运算符：运算数的各二进位全部左移若干位，由
<strong>&lt;&lt;</strong>
右边的数字指定了移动的位数，高位丢弃，低位补0。</td>
<td style="text-align: left;">a &lt;&lt; 2 输出结果 240 ，二进制解释：
1111 0000</td>
</tr>
<tr class="even">
<td style="text-align: left;">&gt;&gt;</td>
<td
style="text-align: left;">右移动运算符：把"&gt;&gt;"左边的运算数的各二进位全部右移若干位，<strong>&gt;&gt;</strong>
右边的数字指定了移动的位数</td>
<td style="text-align: left;">a &gt;&gt; 2 输出结果 15 ，二进制解释：
0000 1111</td>
</tr>
</tbody>
</table>
<h3 id="逻辑运算符">逻辑运算符</h3>
<table>
<colgroup>
<col style="width: 6%" />
<col style="width: 10%" />
<col style="width: 60%" />
<col style="width: 23%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">运算符</th>
<th style="text-align: left;">逻辑表达式</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">实例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">and</td>
<td style="text-align: left;">x and y</td>
<td style="text-align: left;">布尔"与" - 如果 x 为 False，x and y 返回
False，否则它返回 y 的计算值。</td>
<td style="text-align: left;">(a and b) 返回 20。</td>
</tr>
<tr class="even">
<td style="text-align: left;">or</td>
<td style="text-align: left;">x or y</td>
<td style="text-align: left;">布尔"或" - 如果 x 是非 0，它返回 x
的计算值，否则它返回 y 的计算值。</td>
<td style="text-align: left;">(a or b) 返回 10。</td>
</tr>
<tr class="odd">
<td style="text-align: left;">not</td>
<td style="text-align: left;">not x</td>
<td style="text-align: left;">布尔"非" - 如果 x 为 True，返回 False
。如果 x 为 False，它返回 True。</td>
<td style="text-align: left;">not(a and b) 返回 False</td>
</tr>
</tbody>
</table>
<h3 id="成员运算符">成员运算符</h3>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 50%" />
<col style="width: 44%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">运算符</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">实例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">in</td>
<td style="text-align: left;">如果在指定的序列中找到值返回
True，否则返回 False。</td>
<td style="text-align: left;">x 在 y 序列中 , 如果 x 在 y 序列中返回
True。</td>
</tr>
<tr class="even">
<td style="text-align: left;">not in</td>
<td style="text-align: left;">如果在指定的序列中没有找到值返回
True，否则返回 False。</td>
<td style="text-align: left;">x 不在 y 序列中 , 如果 x 不在 y 序列中返回
True。</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> <span class="built_in">list</span> ):</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;1 - 变量 a 在给定的列表中 list 中&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;1 - 变量 a 不在给定的列表中 list 中&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( b <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span> ):</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;2 - 变量 b 不在给定的列表中 list 中&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;2 - 变量 b 在给定的列表中 list 中&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改变量 a 的值</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> <span class="built_in">list</span> ):</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;3 - 变量 a 在给定的列表中 list 中&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;3 - 变量 a 不在给定的列表中 list 中&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1 - 变量 a 不在给定的列表中 list 中</span></span><br><span class="line"><span class="string">2 - 变量 b 不在给定的列表中 list 中</span></span><br><span class="line"><span class="string">3 - 变量 a 在给定的列表中 list 中</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="身份运算符">身份运算符</h3>
<p>身份运算符用于比较两个对象的存储单元</p>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 39%" />
<col style="width: 55%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">运算符</th>
<th style="text-align: center;">描述</th>
<th style="text-align: center;">实例</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">is</td>
<td style="text-align: center;">is
是判断两个标识符是不是引用自一个对象</td>
<td style="text-align: center;"><strong>x is y</strong>, 类似
<strong>id(x) == id(y)</strong> , 如果引用的是同一个对象则返回
True，否则返回 False</td>
</tr>
<tr class="even">
<td style="text-align: center;">is not</td>
<td style="text-align: center;">is not
是判断两个标识符是不是引用自不同对象</td>
<td style="text-align: center;"><strong>x is not y</strong> ， 类似
<strong>id(a) != id(b)</strong>。如果引用的不是同一个对象则返回结果
True，否则返回 False。</td>
</tr>
</tbody>
</table>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">20</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">is</span> b ):</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;1 - a 和 b 有相同的标识&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;1 - a 和 b 没有相同的标识&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">is</span> <span class="keyword">not</span> b ):</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;2 - a 和 b 没有相同的标识&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;2 - a 和 b 有相同的标识&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改变量 b 的值</span></span><br><span class="line">b = <span class="number">30</span></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">is</span> b ):</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;3 - a 和 b 有相同的标识&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;3 - a 和 b 没有相同的标识&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">is</span> <span class="keyword">not</span> b ):</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;4 - a 和 b 没有相同的标识&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;4 - a 和 b 有相同的标识&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1 - a 和 b 有相同的标识</span></span><br><span class="line"><span class="string">2 - a 和 b 有相同的标识</span></span><br><span class="line"><span class="string">3 - a 和 b 没有相同的标识</span></span><br><span class="line"><span class="string">4 - a 和 b 没有相同的标识</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="python运算符优先级">Python运算符优先级</h3>
<p>以下表格列出了从最高到最低优先级的所有运算符：</p>
<table>
<colgroup>
<col style="width: 28%" />
<col style="width: 71%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">运算符</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">**</td>
<td style="text-align: center;">指数 (最高优先级)</td>
</tr>
<tr class="even">
<td style="text-align: center;">~ + -</td>
<td style="text-align: center;">按位翻转, 一元加号(正)和减号（负）
(最后两个的方法名为 +@ 和 -@)</td>
</tr>
<tr class="odd">
<td style="text-align: center;">* / % //</td>
<td style="text-align: center;">乘，除，取模和取整除</td>
</tr>
<tr class="even">
<td style="text-align: center;">+ -</td>
<td style="text-align: center;">加法减法（二元运算符）</td>
</tr>
<tr class="odd">
<td style="text-align: center;">&gt;&gt; &lt;&lt;</td>
<td style="text-align: center;">右移，左移运算符</td>
</tr>
<tr class="even">
<td style="text-align: center;">&amp;</td>
<td style="text-align: center;">位 'AND'</td>
</tr>
<tr class="odd">
<td style="text-align: center;">^ |</td>
<td style="text-align: center;">位运算符</td>
</tr>
<tr class="even">
<td style="text-align: center;">&lt;= &lt; &gt; &gt;=</td>
<td style="text-align: center;">比较运算符</td>
</tr>
<tr class="odd">
<td style="text-align: center;">&lt;&gt; == !=</td>
<td style="text-align: center;">等于运算符</td>
</tr>
<tr class="even">
<td style="text-align: center;">= %= /= //= -= += *= **=</td>
<td style="text-align: center;">赋值运算符</td>
</tr>
<tr class="odd">
<td style="text-align: center;">is is not</td>
<td style="text-align: center;">身份运算符</td>
</tr>
<tr class="even">
<td style="text-align: center;">in not in</td>
<td style="text-align: center;">成员运算符</td>
</tr>
<tr class="odd">
<td style="text-align: center;">not and or</td>
<td style="text-align: center;">逻辑运算符</td>
</tr>
</tbody>
</table>
<p>表格<a
href="https://www.runoob.com/python/python-operators.html">来源</a></p>
<h2 id="字符串的三种定义方式">字符串的三种定义方式</h2>
<p>​ 1、单引号定义法：<code>name = '李明‘</code></p>
<p>​ 2、双引号定义法：<code>name = “李明”</code></p>
<p>​ 3、三引号定义法：<code>name = “”“李明”“”</code>（支持换行）</p>
<p>​ 字符串引号的嵌套</p>
<p>​ 1、单引号定义法，内可包含双引号</p>
<p>​ 2、双引号定义法，内可包含单引号</p>
<p>​
3、可使用转义字符<code>\</code>来将引号解除效用（写在要解除效用的引号的前方），变成普通字符串</p>
<h2 id="字符串拼接">字符串拼接</h2>
<p>1、用+号连接两个字符串(只能字面量和字面量、字面量和储存str类型的变量才能用加号完成拼接，数字型的变量不能和文本型的变量或字面量进行拼接，即无法和非字符串类型进行拼接，下面为字符串拼接的各种方法：</p>
<ul>
<li><h2 id="加号拼接">加号拼接</h2></li>
</ul>
<p>这种拼接方法简单直接，但是在拼接后的两个字符串之间会之间连在一起，没有空格</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;nihao&quot;</span> + <span class="string">&quot;wufan&quot;</span>)</span><br><span class="line"><span class="comment">## 输出&quot;nihaowufan&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><h2 id="逗号拼接">逗号拼接</h2></li>
</ul>
<p>这种拼接方法会在拼接的字符串之间加上一个空格</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;nihao&quot;</span>, <span class="string">&quot;wufan&quot;</span>)</span><br><span class="line"><span class="comment">## 输出&quot;nihao wufan&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><h2 id="直接连接">直接连接</h2></li>
</ul>
<p>拼接后的两个字符串之间会之间连在一起，没有空格</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;nihao&quot;</span> <span class="string">&quot;wufan&quot;</span>)</span><br><span class="line"><span class="comment">## 输出&quot;nihaowufan&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><h2 id="格式化">格式化</h2></li>
</ul>
<p>通过占位符进行字符串的连接，可以客制连接方式</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s %s&quot;</span> % (<span class="string">&quot;nihao&quot;</span>, <span class="string">&quot;wufan&quot;</span>))</span><br><span class="line"><span class="comment">## 输出&quot;nihao wufan&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><h2 id="join方法">join方法</h2></li>
</ul>
<p>利用字符串的方法<code>join</code>。这个函数接受一个列表，然后用字符串依次连接列表中每一个元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;nihao&quot;</span>, <span class="string">&quot;wufan&quot;</span>]</span><br><span class="line">a = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.join(<span class="built_in">list</span>))</span><br><span class="line"><span class="comment">## 输出&quot;nihao1wufan&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><h2 id="多行字符串拼接">多行字符串拼接</h2></li>
</ul>
<p><code>python</code>遇到未闭合的小括号，自动将多行拼接为一行,相比三个引号和换行符，这种方式不会把换行符、前导空格当作字符。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    <span class="string">&quot;nihao&quot;</span></span><br><span class="line">    </span><br><span class="line">         <span class="string">&quot;wufan&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">## 输出&quot;nihao1wufan&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串格式化">字符串格式化</h2>
<p>​ 1、占位符的应用，占位符用
<code>%s</code>表示，在字符串中添加<code>%s</code>，在字符串外用 % +变量
将要替换<code>%s</code>的变量写出，表示%的位置将由给出的字符串替换，如（“你好，我的名字是
%s” %
name（变量，已设定好）），若在字符串中有多个变量需要替换，则在最后写要替换的变量是用<code>（）</code>将需要替换的变量按顺序写出，并在每个变量间用逗号（+空格）隔开。</p>
<p>​
注：<code>s</code>的意思是将变量贮存的数据转化为字符串的方式替换占位符</p>
<p>​
2、其他占位符，如<code>%d</code>，<code>%f</code>，意思是将变量储存额度数据转化为整数或浮点数</p>
<ul>
<li><h2 id="百分号格式化字符串">百分号%格式化字符串</h2></li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;吴凡&quot;</span></span><br><span class="line">word = <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%s,%s&quot;</span> % (word, name))</span><br><span class="line"><span class="comment">##输出&quot;你好，吴凡&quot;</span></span><br><span class="line"><span class="comment">##%后可加s，d，f，分别表示字符串、整数和浮点数</span></span><br></pre></td></tr></table></figure>
<ul>
<li><h2
id="str.format方法格式化字符串">str.format()方法格式化字符串</h2></li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;吴凡&quot;</span></span><br><span class="line">word = <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>.<span class="built_in">format</span>(word, name))</span><br><span class="line"><span class="comment">##使用&#123;&#125;占位，再用.format()方法填入变量</span></span><br><span class="line"><span class="comment">##输出&quot;你好，吴凡&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><h2 id="f-string-格式化字符串">f-string 格式化字符串</h2></li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;吴凡&quot;</span></span><br><span class="line">word = <span class="string">&quot;你好&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;word&#125;</span>,<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">##str前加f，直接用&#123;变量&#125;占位，方便快捷，最常用</span></span><br><span class="line"><span class="comment">##输出&quot;你好，吴凡&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><h2 id="string.template-格式化字符串">string.Template
格式化字符串</h2></li>
</ul>
<p>可用于创建频繁重复出现的动态字符串，例如生成 HTML
页面或电子邮件。为了使用
<code>string.Template</code>，首先需要创建一个模板字符串。同时，必须使用美元符号<code>（$）</code>指定占位符。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> Template</span><br><span class="line">name1 = <span class="string">&quot;吴凡&quot;</span></span><br><span class="line">word1 = <span class="string">&quot;你好&quot;</span></span><br><span class="line">template = Template(<span class="string">&quot;$name先生，$word&quot;</span>) <span class="comment"># 实例化Template类</span></span><br><span class="line">formatted_string = template.substitute(name=name1, word=word1)<span class="comment"># 使用Template类的成员方法进行替换</span></span><br><span class="line"><span class="built_in">print</span>(formatted_string)</span><br><span class="line"><span class="comment">##输出&quot;吴凡先生，你好&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><h2 id="center-格式化字符串">center() 格式化字符串</h2></li>
</ul>
<p>该方法用于在给定宽度内对字符串进行居中对齐。虽然它不是传统的字符串格式设置方法，但当需要以特定方式对齐文本时，它会很有用。在字符串上调用该方法，将所需的宽度作为参数传递。该方法将在字符串上填充空格，使其在指定的宽度内居中。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">word = <span class="string">&quot;fuck you&quot;</span></span><br><span class="line"><span class="built_in">print</span>(word.center(<span class="number">50</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">                     fuck you                     #将50个空格均匀分布在fuck you两边（50个空格中包括打印的单词）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="format格式化函数的用法">format()格式化函数的用法</h2>
<h3 id="按默认顺序格式化">按默认顺序格式化</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="设置指定位置">设置指定位置</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))  <span class="comment"># 按照顺序索引</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))  <span class="comment"># 按照顺序索引</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">world hello world</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：不可以索引和默认格式化混合使用</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">报错：ValueError: cannot switch from automatic field numbering to manual field specification</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="设置关键字格式化">设置关键字格式化</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;博客&quot;</span>, url=<span class="string">&quot;https://wilfredzoz.github.io/&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">网站名：博客, 地址 https://wilfredzoz.github.io/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：可以通过索引对参数的部分进行取值</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;name[1]&#125;, 地址 &#123;url[2]&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;博客&quot;</span>, url=<span class="string">&quot;https://wilfredzoz.github.io&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">网站名：客, 地址 t</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>这里如果进行切片就会出错，不知道为啥：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;name[1]&#125;, 地址 &#123;url[:10]&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="string">&quot;博客&quot;</span>, url=<span class="string">&quot;https://wilfredzoz.github.io&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">TypeError: string indices must be integers</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="设置列表索引格式化">设置列表索引格式化</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_list = [<span class="string">&#x27;博客&#x27;</span>, <span class="string">&#x27;https://wilfredzoz.github.io/&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;</span>.<span class="built_in">format</span>(my_list))  <span class="comment"># &quot;0&quot; 是必须的</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">网站名：博客, 地址 https://wilfredzoz.github.io/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="设置字典格式化">设置字典格式化</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">site = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;博客&quot;</span>, <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://wilfredzoz.github.io/&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;0[name]&#125;, 地址 &#123;0[url]&#125;&quot;</span>.<span class="built_in">format</span>(site))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">网站名：博客, 地址 https://wilfredzoz.github.io/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">info1 = &#123;<span class="string">&#x27;名字&#x27;</span>: <span class="string">&#x27;kaka&#x27;</span>, <span class="string">&#x27;性别&#x27;</span>:<span class="string">&#x27;女&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">info2 = &#123;<span class="string">&#x27;名字&#x27;</span>: <span class="string">&#x27;蒲公英&#x27;</span>, <span class="string">&#x27;性别&#x27;</span>:<span class="string">&#x27;女&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;名字:&#123;0[名字]&#125;, 性别:&#123;0[性别]&#125;; 名字：&#123;1[名字]&#125;, 性别:&#123;1[性别]&#125;&#x27;</span>.<span class="built_in">format</span>(info1, info2))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">名字:kaka, 性别:女; 名字：蒲公英, 性别:女</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="解包格式化"><strong>解包格式化</strong></h3>
<p>解包详见：<a href="#数据容器的解包操作">数据容器的解包</a></p>
<h4 id="字典解包格式化">字典解包格式化</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">site = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;博客&quot;</span>, <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://wilfredzoz.github.io/&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;</span>.<span class="built_in">format</span>(**site)) </span><br><span class="line"><span class="comment">## **site：解包字典，相当于输入：name= &quot;博客&quot;， url: &quot;https://wilfredzoz.github.io/&quot;</span></span><br><span class="line"><span class="comment">## 注意字典解包，当作参数输入进函数的时候，key一定要是字符串类型</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">网站名：博客, 地址 https://wilfredzoz.github.io/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="列表元组解包格式化">列表/元组解包格式化</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">name1 = [<span class="string">&quot;f&quot;</span>, <span class="string">&quot;u&quot;</span>]</span><br><span class="line">name2 = (<span class="string">&quot;c&quot;</span>, <span class="string">&quot;k&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125;&quot;</span>.<span class="built_in">format</span>(*name1, *name2))</span><br><span class="line"><span class="comment">## 相当于print(&quot;&#123;0&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125;&quot;.format(&quot;f&quot;, &quot;u&quot;, &quot;c&quot;, &quot;k&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">f u c k</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="列表和字典混合解包格式化">列表和字典混合解包格式化</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">name1 = [<span class="string">&quot;f&quot;</span>, <span class="string">&quot;u&quot;</span>]</span><br><span class="line">name2 = &#123;<span class="string">&quot;hello&quot;</span>: <span class="string">&quot;c&quot;</span>, <span class="string">&quot;world&quot;</span>: <span class="string">&quot;k&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125; &#123;1&#125; &#123;hello&#125; &#123;world&#125;&quot;</span>.<span class="built_in">format</span>(*name1, **name2))</span><br><span class="line"></span><br><span class="line"><span class="comment">## 效果和print(&quot;&#123;0&#125; &#123;1&#125; &#123;hello&#125; &#123;world&#125;&quot;.format(&quot;f&quot;, &quot;u&quot;,  hello=&#x27;c&#x27;, world=&#x27;k&#x27;))一样</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">f u c k</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fh = [<span class="string">&#x27;  @  &#x27;</span>,<span class="string">&#x27;。&#x27;</span>,<span class="string">&#x27;!&#x27;</span>]</span><br><span class="line">keycs = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;kiki&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ID:&#123;id&#125; &#123;&#125;Name:&#123;name&#125;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(*fh, **keycs))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">ID:123   @  Name:kiki。!</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意关键字传参一定要写在<code>format</code>参数的最后，否则会报错</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fh = [<span class="string">&#x27;  @  &#x27;</span>,<span class="string">&#x27;。&#x27;</span>,<span class="string">&#x27;!&#x27;</span>]</span><br><span class="line">keycs = &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;123&#x27;</span>,<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;kiki&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;ID:&#123;id&#125; &#123;&#125;Name:&#123;name&#125;&#123;&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(**keycs, *fh))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">报错：SyntaxError: iterable argument unpacking follows keyword argument unpacking</span></span><br><span class="line"><span class="string">这里相当于：</span></span><br><span class="line"><span class="string">print(&#x27;ID:&#123;id&#125; &#123;&#125;Name:&#123;name&#125;&#123;&#125;&#123;&#125;&#x27;.format(id=&#x27;123&#x27;, name=&#x27;kiki&#x27; @, 。, !))</span></span><br><span class="line"><span class="string">关键字传参，写在位置传参的前面</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="通过类设置格式化">通过类设置格式化</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Gay</span>:</span><br><span class="line">    name = <span class="string">&quot;kiki&quot;</span></span><br><span class="line">    gender = <span class="string">&quot;Unknown&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gay = Gay()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(gay.name, gay.gender))</span><br></pre></td></tr></table></figure>
<h3 id="左对齐及填充的方式格式化">左对齐及填充的方式格式化</h3>
<ul>
<li><code>:&lt;</code>左对齐填充,<code>&lt;</code>是左对齐，后面带宽度，<code>:</code>号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:&lt;10s&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;wufan&#x27;</span>), end=<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line"><span class="comment">## 左对齐，默认空格填充，共占10个宽度</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">wufan     @</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:☆&lt;10&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Lml&#x27;</span>))</span><br><span class="line"><span class="comment">## 左对齐，☆填充，共占10个宽度</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Lml☆☆☆☆☆☆☆</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#123;:10&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Lml&#x27;</span>), end=<span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="comment">## 不设置&lt;，默认左对齐，共占10个宽度，不能填充</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Lml       !     </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在占位符中<code>-</code>表示左对齐，如<code>%-30s</code>:
左对齐，占位符30位</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%-15s&#x27;</span> % <span class="string">&#x27;LML&#x27;</span>,end=<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line"><span class="comment">## 使用占位符左对齐，共占15个宽度，不能填充</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">LML            @</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="右对齐及填充的方式格式化">右对齐及填充的方式格式化</h3>
<ul>
<li><code>:&gt;</code>右对齐。<code>&gt;</code>是右对齐，后面带宽度，<code>:</code>号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;@&#x27;</span><span class="string">&#x27;&#123;:&gt;10&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Lml&#x27;</span>))</span><br><span class="line"><span class="comment">## 右对齐，共占10个宽度,默认空格填充</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@       Lml</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;@&#x27;</span><span class="string">&#x27;&#123;:♥&gt;10&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Lml&#x27;</span>))</span><br><span class="line"><span class="comment">## 右对齐，共占10个宽度，用♥填充</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@♥♥♥♥♥♥♥Lml</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>占位符右对齐，如：<code>%30s</code>: 右对齐，占位符30位</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;@&#x27;</span><span class="string">&#x27;%15s&#x27;</span> % <span class="string">&#x27;LML&#x27;</span>)</span><br><span class="line"><span class="comment">## 占位符右对齐，共占15宽度</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@            LML</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="居中对齐及填充的方式格式化">居中对齐及填充的方式格式化</h3>
<p><code>:^</code>
居中对齐。<code>^</code>是居中对齐，后面带宽度，<code>:</code>号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;@&#x27;</span><span class="string">&#x27;&#123;:^20&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;LML&#x27;</span>), end=<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line"><span class="comment">## 居中对其，默认空格填充，共占20个宽度</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@        LML         @</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;@&#x27;</span><span class="string">&#x27;&#123;:❤^20&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;LML&#x27;</span>), end=<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line"><span class="comment">## 居中对其，使用爱心填充，共占20个宽度</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@❤❤❤❤❤❤❤❤LML❤❤❤❤❤❤❤❤❤@</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:❤^20s&#125; &amp; &#123;:❤^20s&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;LML&quot;</span>, <span class="string">&quot;WF&quot;</span>))</span><br><span class="line"><span class="comment">## 两端居中对齐，分别占20个宽度，以❤填充</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">❤❤❤❤❤❤❤❤LML❤❤❤❤❤❤❤❤❤ &amp; ❤❤❤❤❤❤❤❤❤WF❤❤❤❤❤❤❤❤❤</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:❤^20s&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;LML&quot;</span>))</span><br><span class="line"><span class="comment">## 居中对齐，占20个宽度，以❤填充</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">❤❤❤❤❤❤❤❤LML❤❤❤❤❤❤❤❤❤</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="设置千分位分隔符">设置千分位分隔符</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:🚚&gt;30,&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">1234567892323312321312</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">🚚1,234,567,892,323,312,321,312</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>在<code>:</code>的后面
可添加如左对齐<code>&lt;</code>，右对齐<code>&gt;</code>，居中<code>^</code>，控制字符长度等操作，在最后添加一个<code>,</code>，可将需要输入的<strong>整数类型</strong>的内容加上千位分隔符。</p>
<h2 id="输出精度的控制">输出精度的控制</h2>
<ul>
<li><p>用<code>m.n</code>来控制数字的宽度和小数点后的精度，如在字符串的格式化中<code>years=11</code>,那么用<code>“%5d” % years</code>，就会表示为(默认右对齐)<code>“   11”</code>。前面空了三个格子。</p></li>
<li><p>又如money =
11.235，那么用<code>“%7.2d” % money</code>，就会表示为<code>“  11.24”</code>，其中空两格是因为要求整体宽度为7（包括小数点）<code>.2</code>要求的是将小数保留最后两位。<code>%.2d</code>表示不限制宽度，只保留两位小数。</p></li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">k = <span class="number">1.224564536</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:🌼^20.4f&#125;&quot;</span>.<span class="built_in">format</span>(k))</span><br><span class="line"><span class="comment">## 居中打印，将k保留4位小数，控制总输出位数为20，以🌼填充</span></span><br><span class="line"><span class="comment">## 注意：保留位数之后要指明数据的类型，如f：浮点，s字符串等</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">🌼🌼🌼🌼🌼🌼🌼1.2246🌼🌼🌼🌼🌼🌼🌼</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>在字符串的输入中，也可以用最大输出长度来限制字符的多少，如：<code>%10.4s</code>：表示总位数为10，取字符串的前4位输出</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%10.4s&quot;</span> % a)</span><br><span class="line"><span class="comment">## 控制总位数为10，去字符串前4位输出，默认右对齐</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">      1234</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>又如:<code>🎃^10.4s</code>，控制总输出宽度为10，输出字符串的前四位</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:🎃^10.4s&#125;&quot;</span>.<span class="built_in">format</span>(a))</span><br><span class="line"><span class="comment">## 控制总输出宽度为10，居中输出字符串的前四位， 以🎃填充</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">🎃🎃🎃1234🎃🎃🎃</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>ps：如果设置的宽度比数值的真实宽度要窄，那么会直接截掉小数点最后的数字，不会对其做四舍五入。如果对于整数来说，设置的宽度比数值的真实宽度要窄，和没有设置宽度是一样的（五舍六入？？？？疑问点？？？？？？？，“%5.2f”
% 11.346与“%5.2f” % 11.646的结果不同）</p>
<p>可看此<a
href="https://www.runoob.com/w3cnote/python-round-func-note.html">网站</a></p>
</blockquote>
<h2 id="表达式的快速格式化">表达式的快速格式化</h2>
<p>有定义的表达式直接输出：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1234</span></span><br><span class="line">b = <span class="string">&quot;元&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a =&quot;</span>, a, b)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">a = 1234 元</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="表达式的格式化">表达式的格式化</h2>
<p>​
1.表达式：拥有明确的执行结果的代码语句，如<code>2+5</code>，<code>“张三”</code></p>
<p>​ 2.直接格式化表达式，如</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;5+3的结果是%d&quot;</span> % (<span class="number">5</span>+<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;5+3的结果是<span class="subst">&#123;<span class="number">5</span>+<span class="number">3</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;5+3的结果在字符串中的类型是%s&quot;</span> % <span class="built_in">type</span>((<span class="number">5</span>+<span class="number">3</span>)))</span><br></pre></td></tr></table></figure>
<p>练习</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;kk公司&quot;</span></span><br><span class="line">stock_price = <span class="number">19.879</span></span><br><span class="line">stock_code = <span class="string">&quot;0012456&quot;</span></span><br><span class="line">stock_price_daily_growth_factor = <span class="number">1.2</span></span><br><span class="line">growth_days = <span class="number">7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;公司:<span class="subst">&#123;name&#125;</span>,股票代码：<span class="subst">&#123;stock_price&#125;</span>，当前股价：<span class="subst">&#123;stock_price&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;每日增长系数是：%.1f,经过7天的增长，股价达到了：%.2f&quot;</span>% (stock_price_daily_growth_factor, stock_price*(stock_price_daily_growth_factor ** <span class="number">7</span>)))</span><br></pre></td></tr></table></figure>
<h2 id="input语句">input语句</h2>
<ol type="1">
<li><p><code>input</code>可以从键盘上输入，将输入的数据选择一个变量进行接受</p></li>
<li><p><code>input("提示输入的语句")</code>可以直接提示输入，不用另加<code>print</code>提示</p></li>
<li><p><code>input（）</code>接收的语句只是字符串类型，要求变成其他类型的数据只能进行转换</p></li>
</ol>
<p>练习</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">user_name = <span class="built_in">input</span>(<span class="string">&quot;请输入您的名字:&quot;</span>)</span><br><span class="line">user_type = <span class="built_in">input</span>(<span class="string">&quot;请输入您的等级:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;您好：<span class="subst">&#123;user_name&#125;</span>，您是尊贵的<span class="subst">&#123;user_type&#125;</span>用户，欢迎您的光临&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;您好：%s，您是尊贵的%s用户，欢迎您的光临&quot;</span> % (user_name, user_type))</span><br></pre></td></tr></table></figure>
<h2 id="eval函数">eval()函数</h2>
<p>eval()函数的作用就是去掉双引号，将字符串表达式变为python内符合规范的的语法</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;[1, 2, 3, 4]&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(a)))</span><br><span class="line"></span><br><span class="line">b = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">eval</span>(b)))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意： eval()
函数执行的代码具有潜在的安全风险。如果使用不受信任的字符串作为表达式，则可能导致代码注入漏洞，因此，应谨慎使用
eval() 函数，并确保仅执行可信任的字符串表达式</p>
</blockquote>
<h2 id="ascii编码表格">ASCII编码表格</h2>
<h3 id="ascii编码1-127">ASCII编码1-127</h3>
<p>ASCII中的0-31为控制字符；32-126为打印字符；127为Delete(删除)命令。</p>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 11%" />
<col style="width: 10%" />
<col style="width: 5%" />
<col style="width: 11%" />
<col style="width: 6%" />
<col style="width: 5%" />
<col style="width: 11%" />
<col style="width: 7%" />
<col style="width: 5%" />
<col style="width: 11%" />
<col style="width: 7%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">ASCII值</th>
<th style="text-align: center;">控制字符/名称</th>
<th style="text-align: center;">描述</th>
<th style="text-align: center;">ASCII值</th>
<th style="text-align: center;">控制字符/名称</th>
<th style="text-align: center;">描述</th>
<th style="text-align: center;">ASCII值</th>
<th style="text-align: center;">控制字符/名称</th>
<th style="text-align: center;">描述</th>
<th style="text-align: center;">ASCII值</th>
<th style="text-align: center;">控制字符/名称</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">NUL</td>
<td style="text-align: center;">空字符</td>
<td style="text-align: center;">32</td>
<td style="text-align: center;">(space)</td>
<td style="text-align: center;">空格</td>
<td style="text-align: center;">64</td>
<td style="text-align: center;">@</td>
<td style="text-align: center;">商标符号</td>
<td style="text-align: center;">96</td>
<td style="text-align: center;">`</td>
<td style="text-align: center;">重音符号</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">SOH</td>
<td style="text-align: center;">标题开始</td>
<td style="text-align: center;">33</td>
<td style="text-align: center;">!</td>
<td style="text-align: center;">感叹号</td>
<td style="text-align: center;">65</td>
<td style="text-align: center;">A</td>
<td style="text-align: center;">大写字母A</td>
<td style="text-align: center;">97</td>
<td style="text-align: center;">a</td>
<td style="text-align: center;">小写字母a</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2</td>
<td style="text-align: center;">STX</td>
<td style="text-align: center;">正文开始</td>
<td style="text-align: center;">34</td>
<td style="text-align: center;">"</td>
<td style="text-align: center;">双引号</td>
<td style="text-align: center;">66</td>
<td style="text-align: center;">B</td>
<td style="text-align: center;">大写字母B</td>
<td style="text-align: center;">98</td>
<td style="text-align: center;">b</td>
<td style="text-align: center;">小写字母b</td>
</tr>
<tr class="even">
<td style="text-align: center;">3</td>
<td style="text-align: center;">ETX</td>
<td style="text-align: center;">正文结束</td>
<td style="text-align: center;">35</td>
<td style="text-align: center;">#</td>
<td style="text-align: center;">井号</td>
<td style="text-align: center;">67</td>
<td style="text-align: center;">C</td>
<td style="text-align: center;">大写字母C</td>
<td style="text-align: center;">99</td>
<td style="text-align: center;">c</td>
<td style="text-align: center;">小写字母c</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">EOT</td>
<td style="text-align: center;">传输结束</td>
<td style="text-align: center;">36</td>
<td style="text-align: center;">$</td>
<td style="text-align: center;">美元符号</td>
<td style="text-align: center;">68</td>
<td style="text-align: center;">D</td>
<td style="text-align: center;">大写字母D</td>
<td style="text-align: center;">100</td>
<td style="text-align: center;">d</td>
<td style="text-align: center;">小写字母d</td>
</tr>
<tr class="even">
<td style="text-align: center;">5</td>
<td style="text-align: center;">ENQ</td>
<td style="text-align: center;">请求</td>
<td style="text-align: center;">37</td>
<td style="text-align: center;">%</td>
<td style="text-align: center;">百分号</td>
<td style="text-align: center;">69</td>
<td style="text-align: center;">E</td>
<td style="text-align: center;">大写字母E</td>
<td style="text-align: center;">101</td>
<td style="text-align: center;">e</td>
<td style="text-align: center;">小写字母e</td>
</tr>
<tr class="odd">
<td style="text-align: center;">6</td>
<td style="text-align: center;">ACK</td>
<td style="text-align: center;">确认</td>
<td style="text-align: center;">38</td>
<td style="text-align: center;">&amp;</td>
<td style="text-align: center;">和号</td>
<td style="text-align: center;">70</td>
<td style="text-align: center;">F</td>
<td style="text-align: center;">大写字母F</td>
<td style="text-align: center;">102</td>
<td style="text-align: center;">f</td>
<td style="text-align: center;">小写字母f</td>
</tr>
<tr class="even">
<td style="text-align: center;">7</td>
<td style="text-align: center;">BEL</td>
<td style="text-align: center;">铃声</td>
<td style="text-align: center;">39</td>
<td style="text-align: center;">'</td>
<td style="text-align: center;">单引号</td>
<td style="text-align: center;">71</td>
<td style="text-align: center;">G</td>
<td style="text-align: center;">大写字母G</td>
<td style="text-align: center;">103</td>
<td style="text-align: center;">g</td>
<td style="text-align: center;">小写字母g</td>
</tr>
<tr class="odd">
<td style="text-align: center;">8</td>
<td style="text-align: center;">BS</td>
<td style="text-align: center;">退格</td>
<td style="text-align: center;">40</td>
<td style="text-align: center;">(</td>
<td style="text-align: center;">左括号</td>
<td style="text-align: center;">72</td>
<td style="text-align: center;">H</td>
<td style="text-align: center;">大写字母H</td>
<td style="text-align: center;">104</td>
<td style="text-align: center;">h</td>
<td style="text-align: center;">小写字母h</td>
</tr>
<tr class="even">
<td style="text-align: center;">9</td>
<td style="text-align: center;">HT</td>
<td style="text-align: center;">水平制表符</td>
<td style="text-align: center;">41</td>
<td style="text-align: center;">)</td>
<td style="text-align: center;">右括号</td>
<td style="text-align: center;">73</td>
<td style="text-align: center;">I</td>
<td style="text-align: center;">大写字母I</td>
<td style="text-align: center;">105</td>
<td style="text-align: center;">i</td>
<td style="text-align: center;">小写字母i</td>
</tr>
<tr class="odd">
<td style="text-align: center;">10</td>
<td style="text-align: center;">LF</td>
<td style="text-align: center;">换行</td>
<td style="text-align: center;">42</td>
<td style="text-align: center;">*</td>
<td style="text-align: center;">星号</td>
<td style="text-align: center;">74</td>
<td style="text-align: center;">J</td>
<td style="text-align: center;">大写字母J</td>
<td style="text-align: center;">106</td>
<td style="text-align: center;">j</td>
<td style="text-align: center;">小写字母j</td>
</tr>
<tr class="even">
<td style="text-align: center;">11</td>
<td style="text-align: center;">VT</td>
<td style="text-align: center;">垂直制表符</td>
<td style="text-align: center;">43</td>
<td style="text-align: center;">+</td>
<td style="text-align: center;">加号</td>
<td style="text-align: center;">75</td>
<td style="text-align: center;">K</td>
<td style="text-align: center;">大写字母K</td>
<td style="text-align: center;">107</td>
<td style="text-align: center;">k</td>
<td style="text-align: center;">小写字母k</td>
</tr>
<tr class="odd">
<td style="text-align: center;">12</td>
<td style="text-align: center;">FF</td>
<td style="text-align: center;">表页开始</td>
<td style="text-align: center;">44</td>
<td style="text-align: center;">,</td>
<td style="text-align: center;">逗号</td>
<td style="text-align: center;">76</td>
<td style="text-align: center;">L</td>
<td style="text-align: center;">大写字母L</td>
<td style="text-align: center;">108</td>
<td style="text-align: center;">l</td>
<td style="text-align: center;">小写字母l</td>
</tr>
<tr class="even">
<td style="text-align: center;">13</td>
<td style="text-align: center;">CR</td>
<td style="text-align: center;">回车</td>
<td style="text-align: center;">45</td>
<td style="text-align: center;">-</td>
<td style="text-align: center;">减号</td>
<td style="text-align: center;">77</td>
<td style="text-align: center;">M</td>
<td style="text-align: center;">大写字母M</td>
<td style="text-align: center;">109</td>
<td style="text-align: center;">m</td>
<td style="text-align: center;">小写字母m</td>
</tr>
<tr class="odd">
<td style="text-align: center;">14</td>
<td style="text-align: center;">SO</td>
<td style="text-align: center;">移位输出</td>
<td style="text-align: center;">46</td>
<td style="text-align: center;">.</td>
<td style="text-align: center;">点</td>
<td style="text-align: center;">78</td>
<td style="text-align: center;">N</td>
<td style="text-align: center;">大写字母N</td>
<td style="text-align: center;">110</td>
<td style="text-align: center;">n</td>
<td style="text-align: center;">小写字母n</td>
</tr>
<tr class="even">
<td style="text-align: center;">15</td>
<td style="text-align: center;">SI</td>
<td style="text-align: center;">移位输入</td>
<td style="text-align: center;">47</td>
<td style="text-align: center;">/</td>
<td style="text-align: center;">斜杠</td>
<td style="text-align: center;">79</td>
<td style="text-align: center;">O</td>
<td style="text-align: center;">大写字母O</td>
<td style="text-align: center;">111</td>
<td style="text-align: center;">o</td>
<td style="text-align: center;">小写字母o</td>
</tr>
<tr class="odd">
<td style="text-align: center;">16</td>
<td style="text-align: center;">DLE</td>
<td style="text-align: center;">数据链接转义</td>
<td style="text-align: center;">48</td>
<td style="text-align: center;">0</td>
<td style="text-align: center;">数字0</td>
<td style="text-align: center;">80</td>
<td style="text-align: center;">P</td>
<td style="text-align: center;">大写字母P</td>
<td style="text-align: center;">112</td>
<td style="text-align: center;">p</td>
<td style="text-align: center;">小写字母p</td>
</tr>
<tr class="even">
<td style="text-align: center;">17</td>
<td style="text-align: center;">DC1</td>
<td style="text-align: center;">设备控制1</td>
<td style="text-align: center;">49</td>
<td style="text-align: center;">1</td>
<td style="text-align: center;">数字1</td>
<td style="text-align: center;">81</td>
<td style="text-align: center;">Q</td>
<td style="text-align: center;">大写字母Q</td>
<td style="text-align: center;">113</td>
<td style="text-align: center;">q</td>
<td style="text-align: center;">小写字母q</td>
</tr>
<tr class="odd">
<td style="text-align: center;">18</td>
<td style="text-align: center;">DC2</td>
<td style="text-align: center;">设备控制2</td>
<td style="text-align: center;">50</td>
<td style="text-align: center;">2</td>
<td style="text-align: center;">数字2</td>
<td style="text-align: center;">82</td>
<td style="text-align: center;">R</td>
<td style="text-align: center;">大写字母R</td>
<td style="text-align: center;">114</td>
<td style="text-align: center;">r</td>
<td style="text-align: center;">小写字母r</td>
</tr>
<tr class="even">
<td style="text-align: center;">19</td>
<td style="text-align: center;">DC3</td>
<td style="text-align: center;">设备控制3</td>
<td style="text-align: center;">51</td>
<td style="text-align: center;">3</td>
<td style="text-align: center;">数字3</td>
<td style="text-align: center;">83</td>
<td style="text-align: center;">S</td>
<td style="text-align: center;">大写字母S</td>
<td style="text-align: center;">115</td>
<td style="text-align: center;">s</td>
<td style="text-align: center;">小写字母s</td>
</tr>
<tr class="odd">
<td style="text-align: center;">20</td>
<td style="text-align: center;">DC4</td>
<td style="text-align: center;">设备控制4</td>
<td style="text-align: center;">52</td>
<td style="text-align: center;">4</td>
<td style="text-align: center;">数字4</td>
<td style="text-align: center;">84</td>
<td style="text-align: center;">T</td>
<td style="text-align: center;">大写字母T</td>
<td style="text-align: center;">116</td>
<td style="text-align: center;">t</td>
<td style="text-align: center;">小写字母t</td>
</tr>
<tr class="even">
<td style="text-align: center;">21</td>
<td style="text-align: center;">NAK</td>
<td style="text-align: center;">否定确认</td>
<td style="text-align: center;">53</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">数字5</td>
<td style="text-align: center;">85</td>
<td style="text-align: center;">U</td>
<td style="text-align: center;">大写字母U</td>
<td style="text-align: center;">117</td>
<td style="text-align: center;">u</td>
<td style="text-align: center;">小写字母u</td>
</tr>
<tr class="odd">
<td style="text-align: center;">22</td>
<td style="text-align: center;">SYN</td>
<td style="text-align: center;">同步</td>
<td style="text-align: center;">54</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">数字6</td>
<td style="text-align: center;">86</td>
<td style="text-align: center;">V</td>
<td style="text-align: center;">大写字母V</td>
<td style="text-align: center;">118</td>
<td style="text-align: center;">v</td>
<td style="text-align: center;">小写字母v</td>
</tr>
<tr class="even">
<td style="text-align: center;">23</td>
<td style="text-align: center;">ETB</td>
<td style="text-align: center;">传输块结束</td>
<td style="text-align: center;">55</td>
<td style="text-align: center;">7</td>
<td style="text-align: center;">数字7</td>
<td style="text-align: center;">87</td>
<td style="text-align: center;">W</td>
<td style="text-align: center;">大写字母W</td>
<td style="text-align: center;">119</td>
<td style="text-align: center;">w</td>
<td style="text-align: center;">小写字母w</td>
</tr>
<tr class="odd">
<td style="text-align: center;">24</td>
<td style="text-align: center;">CAN</td>
<td style="text-align: center;">取消</td>
<td style="text-align: center;">56</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">数字8</td>
<td style="text-align: center;">88</td>
<td style="text-align: center;">X</td>
<td style="text-align: center;">大写字母X</td>
<td style="text-align: center;">120</td>
<td style="text-align: center;">x</td>
<td style="text-align: center;">小写字母x</td>
</tr>
<tr class="even">
<td style="text-align: center;">25</td>
<td style="text-align: center;">EM</td>
<td style="text-align: center;">中间媒体</td>
<td style="text-align: center;">57</td>
<td style="text-align: center;">9</td>
<td style="text-align: center;">数字9</td>
<td style="text-align: center;">89</td>
<td style="text-align: center;">Y</td>
<td style="text-align: center;">大写字母Y</td>
<td style="text-align: center;">121</td>
<td style="text-align: center;">y</td>
<td style="text-align: center;">小写字母y</td>
</tr>
<tr class="odd">
<td style="text-align: center;">26</td>
<td style="text-align: center;">SUB</td>
<td style="text-align: center;">替代</td>
<td style="text-align: center;">58</td>
<td style="text-align: center;">:</td>
<td style="text-align: center;">冒号</td>
<td style="text-align: center;">90</td>
<td style="text-align: center;">Z</td>
<td style="text-align: center;">大写字母Z</td>
<td style="text-align: center;">122</td>
<td style="text-align: center;">z</td>
<td style="text-align: center;">小写字母z</td>
</tr>
<tr class="even">
<td style="text-align: center;">27</td>
<td style="text-align: center;">ESC</td>
<td style="text-align: center;">转义</td>
<td style="text-align: center;">59</td>
<td style="text-align: center;">;</td>
<td style="text-align: center;">分号</td>
<td style="text-align: center;">91</td>
<td style="text-align: center;">[</td>
<td style="text-align: center;">左方括号</td>
<td style="text-align: center;">123</td>
<td style="text-align: center;">{</td>
<td style="text-align: center;">左花括号</td>
</tr>
<tr class="odd">
<td style="text-align: center;">28</td>
<td style="text-align: center;">FS</td>
<td style="text-align: center;">文件分隔符</td>
<td style="text-align: center;">60</td>
<td style="text-align: center;">&lt;</td>
<td style="text-align: center;">小于号</td>
<td style="text-align: center;">92</td>
<td style="text-align: center;">\</td>
<td style="text-align: center;">反斜杠</td>
<td style="text-align: center;">124</td>
<td style="text-align: center;"></td>
<td style="text-align: center;"></td>
</tr>
<tr class="even">
<td style="text-align: center;">29</td>
<td style="text-align: center;">GS</td>
<td style="text-align: center;">组分隔符</td>
<td style="text-align: center;">61</td>
<td style="text-align: center;">=</td>
<td style="text-align: center;">等号</td>
<td style="text-align: center;">93</td>
<td style="text-align: center;">]</td>
<td style="text-align: center;">右方括号</td>
<td style="text-align: center;">125</td>
<td style="text-align: center;">}</td>
<td style="text-align: center;">右花括号</td>
</tr>
<tr class="odd">
<td style="text-align: center;">30</td>
<td style="text-align: center;">RS</td>
<td style="text-align: center;">记录分隔符</td>
<td style="text-align: center;">62</td>
<td style="text-align: center;">&gt;</td>
<td style="text-align: center;">大于号</td>
<td style="text-align: center;">94</td>
<td style="text-align: center;">^</td>
<td style="text-align: center;">脱字符号</td>
<td style="text-align: center;">126</td>
<td style="text-align: center;">~</td>
<td style="text-align: center;">波浪号</td>
</tr>
<tr class="even">
<td style="text-align: center;">31</td>
<td style="text-align: center;">US</td>
<td style="text-align: center;">单元分隔符</td>
<td style="text-align: center;">63</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">问号</td>
<td style="text-align: center;">95</td>
<td style="text-align: center;">—</td>
<td style="text-align: center;">破折号</td>
<td style="text-align: center;">127</td>
<td style="text-align: center;">DEL</td>
<td style="text-align: center;">删除</td>
</tr>
</tbody>
</table>
<h4 id="控制字符释义">控制字符释义</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">十进制</th>
<th style="text-align: center;">十六进制</th>
<th style="text-align: center;">描述</th>
<th style="text-align: center;">十进制</th>
<th style="text-align: center;">十六进制</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">0</td>
<td style="text-align: center;">00</td>
<td style="text-align: center;">空</td>
<td style="text-align: center;">16</td>
<td style="text-align: center;">10</td>
<td style="text-align: center;">数据链路转义</td>
</tr>
<tr class="even">
<td style="text-align: center;">1</td>
<td style="text-align: center;">01</td>
<td style="text-align: center;">头标开始</td>
<td style="text-align: center;">17</td>
<td style="text-align: center;">11</td>
<td style="text-align: center;">设备控制 1</td>
</tr>
<tr class="odd">
<td style="text-align: center;">2</td>
<td style="text-align: center;">02</td>
<td style="text-align: center;">正文开始</td>
<td style="text-align: center;">18</td>
<td style="text-align: center;">12</td>
<td style="text-align: center;">设备控制 2</td>
</tr>
<tr class="even">
<td style="text-align: center;">3</td>
<td style="text-align: center;">03</td>
<td style="text-align: center;">正文结束</td>
<td style="text-align: center;">19</td>
<td style="text-align: center;">13</td>
<td style="text-align: center;">设备控制 3</td>
</tr>
<tr class="odd">
<td style="text-align: center;">4</td>
<td style="text-align: center;">04</td>
<td style="text-align: center;">传输结束</td>
<td style="text-align: center;">20</td>
<td style="text-align: center;">14</td>
<td style="text-align: center;">设备控制 4</td>
</tr>
<tr class="even">
<td style="text-align: center;">5</td>
<td style="text-align: center;">05</td>
<td style="text-align: center;">查询</td>
<td style="text-align: center;">21</td>
<td style="text-align: center;">15</td>
<td style="text-align: center;">反确认</td>
</tr>
<tr class="odd">
<td style="text-align: center;">6</td>
<td style="text-align: center;">06</td>
<td style="text-align: center;">确认</td>
<td style="text-align: center;">22</td>
<td style="text-align: center;">16</td>
<td style="text-align: center;">同步空闲</td>
</tr>
<tr class="even">
<td style="text-align: center;">7</td>
<td style="text-align: center;">07</td>
<td style="text-align: center;">震铃</td>
<td style="text-align: center;">23</td>
<td style="text-align: center;">17</td>
<td style="text-align: center;">传输块结束</td>
</tr>
<tr class="odd">
<td style="text-align: center;">8</td>
<td style="text-align: center;">08</td>
<td style="text-align: center;">backspace</td>
<td style="text-align: center;">24</td>
<td style="text-align: center;">18</td>
<td style="text-align: center;">取消</td>
</tr>
<tr class="even">
<td style="text-align: center;">9</td>
<td style="text-align: center;">09</td>
<td style="text-align: center;">水平制表符</td>
<td style="text-align: center;">25</td>
<td style="text-align: center;">19</td>
<td style="text-align: center;">媒体结束</td>
</tr>
<tr class="odd">
<td style="text-align: center;">10</td>
<td style="text-align: center;">0A</td>
<td style="text-align: center;">换行/新行</td>
<td style="text-align: center;">26</td>
<td style="text-align: center;">1A</td>
<td style="text-align: center;">替换</td>
</tr>
<tr class="even">
<td style="text-align: center;">11</td>
<td style="text-align: center;">0B</td>
<td style="text-align: center;">竖直制表符</td>
<td style="text-align: center;">27</td>
<td style="text-align: center;">1B</td>
<td style="text-align: center;">转义</td>
</tr>
<tr class="odd">
<td style="text-align: center;">12</td>
<td style="text-align: center;">0C</td>
<td style="text-align: center;">换页/新页</td>
<td style="text-align: center;">28</td>
<td style="text-align: center;">1C</td>
<td style="text-align: center;">文件分隔符</td>
</tr>
<tr class="even">
<td style="text-align: center;">13</td>
<td style="text-align: center;">0D</td>
<td style="text-align: center;">回车</td>
<td style="text-align: center;">29</td>
<td style="text-align: center;">1D</td>
<td style="text-align: center;">组分隔符</td>
</tr>
<tr class="odd">
<td style="text-align: center;">14</td>
<td style="text-align: center;">0E</td>
<td style="text-align: center;">移出</td>
<td style="text-align: center;">30</td>
<td style="text-align: center;">1E</td>
<td style="text-align: center;">记录分隔符</td>
</tr>
<tr class="even">
<td style="text-align: center;">15</td>
<td style="text-align: center;">0F</td>
<td style="text-align: center;">移入</td>
<td style="text-align: center;">31</td>
<td style="text-align: center;">1F</td>
<td style="text-align: center;">单元分隔符</td>
</tr>
</tbody>
</table>
<h3 id="ascii编码128-225">ASCII编码128-225</h3>
<p>扩展字符</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">十进制</th>
<th style="text-align: center;">十六进制</th>
<th style="text-align: center;">字符</th>
<th style="text-align: center;">十进制</th>
<th style="text-align: center;">十六进制</th>
<th style="text-align: center;">字符</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">128</td>
<td style="text-align: center;">80</td>
<td style="text-align: center;">Ç</td>
<td style="text-align: center;">192</td>
<td style="text-align: center;">C0</td>
<td style="text-align: center;">└</td>
</tr>
<tr class="even">
<td style="text-align: center;">129</td>
<td style="text-align: center;">81</td>
<td style="text-align: center;">ü</td>
<td style="text-align: center;">193</td>
<td style="text-align: center;">C1</td>
<td style="text-align: center;">┴</td>
</tr>
<tr class="odd">
<td style="text-align: center;">130</td>
<td style="text-align: center;">82</td>
<td style="text-align: center;">é</td>
<td style="text-align: center;">194</td>
<td style="text-align: center;">C2</td>
<td style="text-align: center;">┬</td>
</tr>
<tr class="even">
<td style="text-align: center;">131</td>
<td style="text-align: center;">83</td>
<td style="text-align: center;">â</td>
<td style="text-align: center;">195</td>
<td style="text-align: center;">C3</td>
<td style="text-align: center;">├</td>
</tr>
<tr class="odd">
<td style="text-align: center;">132</td>
<td style="text-align: center;">84</td>
<td style="text-align: center;">ä</td>
<td style="text-align: center;">196</td>
<td style="text-align: center;">C4</td>
<td style="text-align: center;">─</td>
</tr>
<tr class="even">
<td style="text-align: center;">133</td>
<td style="text-align: center;">85</td>
<td style="text-align: center;">à</td>
<td style="text-align: center;">197</td>
<td style="text-align: center;">C5</td>
<td style="text-align: center;">┼</td>
</tr>
<tr class="odd">
<td style="text-align: center;">134</td>
<td style="text-align: center;">86</td>
<td style="text-align: center;">å</td>
<td style="text-align: center;">198</td>
<td style="text-align: center;">C6</td>
<td style="text-align: center;">╞</td>
</tr>
<tr class="even">
<td style="text-align: center;">135</td>
<td style="text-align: center;">87</td>
<td style="text-align: center;">ç</td>
<td style="text-align: center;">199</td>
<td style="text-align: center;">C7</td>
<td style="text-align: center;">╟</td>
</tr>
<tr class="odd">
<td style="text-align: center;">136</td>
<td style="text-align: center;">88</td>
<td style="text-align: center;">ê</td>
<td style="text-align: center;">200</td>
<td style="text-align: center;">C8</td>
<td style="text-align: center;">╚</td>
</tr>
<tr class="even">
<td style="text-align: center;">137</td>
<td style="text-align: center;">89</td>
<td style="text-align: center;">ë</td>
<td style="text-align: center;">201</td>
<td style="text-align: center;">C9</td>
<td style="text-align: center;">╔</td>
</tr>
<tr class="odd">
<td style="text-align: center;">138</td>
<td style="text-align: center;">8A</td>
<td style="text-align: center;">è</td>
<td style="text-align: center;">202</td>
<td style="text-align: center;">CA</td>
<td style="text-align: center;">╩</td>
</tr>
<tr class="even">
<td style="text-align: center;">139</td>
<td style="text-align: center;">8B</td>
<td style="text-align: center;">ï</td>
<td style="text-align: center;">203</td>
<td style="text-align: center;">CB</td>
<td style="text-align: center;">╦</td>
</tr>
<tr class="odd">
<td style="text-align: center;">140</td>
<td style="text-align: center;">8C</td>
<td style="text-align: center;">î</td>
<td style="text-align: center;">204</td>
<td style="text-align: center;">CC</td>
<td style="text-align: center;">╠</td>
</tr>
<tr class="even">
<td style="text-align: center;">141</td>
<td style="text-align: center;">8D</td>
<td style="text-align: center;">ì</td>
<td style="text-align: center;">205</td>
<td style="text-align: center;">CD</td>
<td style="text-align: center;">═</td>
</tr>
<tr class="odd">
<td style="text-align: center;">142</td>
<td style="text-align: center;">8E</td>
<td style="text-align: center;">Ä</td>
<td style="text-align: center;">206</td>
<td style="text-align: center;">CE</td>
<td style="text-align: center;">╬</td>
</tr>
<tr class="even">
<td style="text-align: center;">143</td>
<td style="text-align: center;">8F</td>
<td style="text-align: center;">Å</td>
<td style="text-align: center;">207</td>
<td style="text-align: center;">CF</td>
<td style="text-align: center;">╧</td>
</tr>
<tr class="odd">
<td style="text-align: center;">144</td>
<td style="text-align: center;">90</td>
<td style="text-align: center;">É</td>
<td style="text-align: center;">208</td>
<td style="text-align: center;">D0</td>
<td style="text-align: center;">╨</td>
</tr>
<tr class="even">
<td style="text-align: center;">145</td>
<td style="text-align: center;">91</td>
<td style="text-align: center;">æ</td>
<td style="text-align: center;">209</td>
<td style="text-align: center;">D1</td>
<td style="text-align: center;">╤</td>
</tr>
<tr class="odd">
<td style="text-align: center;">146</td>
<td style="text-align: center;">92</td>
<td style="text-align: center;">Æ</td>
<td style="text-align: center;">210</td>
<td style="text-align: center;">D2</td>
<td style="text-align: center;">╥</td>
</tr>
<tr class="even">
<td style="text-align: center;">147</td>
<td style="text-align: center;">93</td>
<td style="text-align: center;">ô</td>
<td style="text-align: center;">211</td>
<td style="text-align: center;">D3</td>
<td style="text-align: center;">╙</td>
</tr>
<tr class="odd">
<td style="text-align: center;">148</td>
<td style="text-align: center;">94</td>
<td style="text-align: center;">ö</td>
<td style="text-align: center;">212</td>
<td style="text-align: center;">D4</td>
<td style="text-align: center;">Ô</td>
</tr>
<tr class="even">
<td style="text-align: center;">149</td>
<td style="text-align: center;">95</td>
<td style="text-align: center;">ò</td>
<td style="text-align: center;">213</td>
<td style="text-align: center;">D5</td>
<td style="text-align: center;">╒</td>
</tr>
<tr class="odd">
<td style="text-align: center;">150</td>
<td style="text-align: center;">96</td>
<td style="text-align: center;">û</td>
<td style="text-align: center;">214</td>
<td style="text-align: center;">D6</td>
<td style="text-align: center;">╓</td>
</tr>
<tr class="even">
<td style="text-align: center;">151</td>
<td style="text-align: center;">97</td>
<td style="text-align: center;">ù</td>
<td style="text-align: center;">215</td>
<td style="text-align: center;">D7</td>
<td style="text-align: center;">╫</td>
</tr>
<tr class="odd">
<td style="text-align: center;">152</td>
<td style="text-align: center;">98</td>
<td style="text-align: center;">ÿ</td>
<td style="text-align: center;">216</td>
<td style="text-align: center;">D8</td>
<td style="text-align: center;">╪</td>
</tr>
<tr class="even">
<td style="text-align: center;">153</td>
<td style="text-align: center;">99</td>
<td style="text-align: center;">Ö</td>
<td style="text-align: center;">217</td>
<td style="text-align: center;">D9</td>
<td style="text-align: center;">┘</td>
</tr>
<tr class="odd">
<td style="text-align: center;">154</td>
<td style="text-align: center;">9A</td>
<td style="text-align: center;">Ü</td>
<td style="text-align: center;">218</td>
<td style="text-align: center;">DA</td>
<td style="text-align: center;">┌</td>
</tr>
<tr class="even">
<td style="text-align: center;">155</td>
<td style="text-align: center;">9B</td>
<td style="text-align: center;">¢</td>
<td style="text-align: center;">219</td>
<td style="text-align: center;">DB</td>
<td style="text-align: center;">█</td>
</tr>
<tr class="odd">
<td style="text-align: center;">156</td>
<td style="text-align: center;">9C</td>
<td style="text-align: center;">£</td>
<td style="text-align: center;">220</td>
<td style="text-align: center;">DC</td>
<td style="text-align: center;">▄</td>
</tr>
<tr class="even">
<td style="text-align: center;">157</td>
<td style="text-align: center;">9D</td>
<td style="text-align: center;">¥</td>
<td style="text-align: center;">221</td>
<td style="text-align: center;">DD</td>
<td style="text-align: center;">▌</td>
</tr>
<tr class="odd">
<td style="text-align: center;">158</td>
<td style="text-align: center;">9E</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">222</td>
<td style="text-align: center;">DE</td>
<td style="text-align: center;">?</td>
</tr>
<tr class="even">
<td style="text-align: center;">159</td>
<td style="text-align: center;">9F</td>
<td style="text-align: center;">ƒ</td>
<td style="text-align: center;">223</td>
<td style="text-align: center;">DF</td>
<td style="text-align: center;">?</td>
</tr>
<tr class="odd">
<td style="text-align: center;">160</td>
<td style="text-align: center;">A0</td>
<td style="text-align: center;">á</td>
<td style="text-align: center;">224</td>
<td style="text-align: center;">E0</td>
<td style="text-align: center;">α</td>
</tr>
<tr class="even">
<td style="text-align: center;">161</td>
<td style="text-align: center;">A1</td>
<td style="text-align: center;">í</td>
<td style="text-align: center;">225</td>
<td style="text-align: center;">E1</td>
<td style="text-align: center;">ß</td>
</tr>
<tr class="odd">
<td style="text-align: center;">162</td>
<td style="text-align: center;">A2</td>
<td style="text-align: center;">ó</td>
<td style="text-align: center;">226</td>
<td style="text-align: center;">E2</td>
<td style="text-align: center;">Γ</td>
</tr>
<tr class="even">
<td style="text-align: center;">163</td>
<td style="text-align: center;">A3</td>
<td style="text-align: center;">ú</td>
<td style="text-align: center;">227</td>
<td style="text-align: center;">E3</td>
<td style="text-align: center;">π</td>
</tr>
<tr class="odd">
<td style="text-align: center;">164</td>
<td style="text-align: center;">A4</td>
<td style="text-align: center;">ñ</td>
<td style="text-align: center;">228</td>
<td style="text-align: center;">E4</td>
<td style="text-align: center;">Σ</td>
</tr>
<tr class="even">
<td style="text-align: center;">165</td>
<td style="text-align: center;">A5</td>
<td style="text-align: center;">Ñ</td>
<td style="text-align: center;">229</td>
<td style="text-align: center;">E5</td>
<td style="text-align: center;">σ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">166</td>
<td style="text-align: center;">A6</td>
<td style="text-align: center;">ª</td>
<td style="text-align: center;">230</td>
<td style="text-align: center;">E6</td>
<td style="text-align: center;">µ</td>
</tr>
<tr class="even">
<td style="text-align: center;">167</td>
<td style="text-align: center;">A7</td>
<td style="text-align: center;">º</td>
<td style="text-align: center;">231</td>
<td style="text-align: center;">E7</td>
<td style="text-align: center;">τ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">168</td>
<td style="text-align: center;">A8</td>
<td style="text-align: center;">¿</td>
<td style="text-align: center;">232</td>
<td style="text-align: center;">E8</td>
<td style="text-align: center;">Φ</td>
</tr>
<tr class="even">
<td style="text-align: center;">169</td>
<td style="text-align: center;">A9</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">233</td>
<td style="text-align: center;">E9</td>
<td style="text-align: center;">Θ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">170</td>
<td style="text-align: center;">AA</td>
<td style="text-align: center;">¬</td>
<td style="text-align: center;">234</td>
<td style="text-align: center;">EA</td>
<td style="text-align: center;">Ω</td>
</tr>
<tr class="even">
<td style="text-align: center;">171</td>
<td style="text-align: center;">AB</td>
<td style="text-align: center;">½</td>
<td style="text-align: center;">235</td>
<td style="text-align: center;">EB</td>
<td style="text-align: center;">δ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">172</td>
<td style="text-align: center;">AC</td>
<td style="text-align: center;">¼</td>
<td style="text-align: center;">236</td>
<td style="text-align: center;">EC</td>
<td style="text-align: center;">∞</td>
</tr>
<tr class="even">
<td style="text-align: center;">173</td>
<td style="text-align: center;">AD</td>
<td style="text-align: center;">¡</td>
<td style="text-align: center;">237</td>
<td style="text-align: center;">ED</td>
<td style="text-align: center;">φ</td>
</tr>
<tr class="odd">
<td style="text-align: center;">174</td>
<td style="text-align: center;">AE</td>
<td style="text-align: center;">«</td>
<td style="text-align: center;">238</td>
<td style="text-align: center;">EE</td>
<td style="text-align: center;">ε</td>
</tr>
<tr class="even">
<td style="text-align: center;">175</td>
<td style="text-align: center;">AF</td>
<td style="text-align: center;">»</td>
<td style="text-align: center;">239</td>
<td style="text-align: center;">EF</td>
<td style="text-align: center;">∩</td>
</tr>
<tr class="odd">
<td style="text-align: center;">176</td>
<td style="text-align: center;">B0</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">240</td>
<td style="text-align: center;">F0</td>
<td style="text-align: center;">≡</td>
</tr>
<tr class="even">
<td style="text-align: center;">177</td>
<td style="text-align: center;">B1</td>
<td style="text-align: center;">?</td>
<td style="text-align: center;">241</td>
<td style="text-align: center;">F1</td>
<td style="text-align: center;">±</td>
</tr>
<tr class="odd">
<td style="text-align: center;">178</td>
<td style="text-align: center;">B2</td>
<td style="text-align: center;">▓</td>
<td style="text-align: center;">242</td>
<td style="text-align: center;">F2</td>
<td style="text-align: center;">≥</td>
</tr>
<tr class="even">
<td style="text-align: center;">179</td>
<td style="text-align: center;">B3</td>
<td style="text-align: center;">│</td>
<td style="text-align: center;">243</td>
<td style="text-align: center;">F3</td>
<td style="text-align: center;">≤</td>
</tr>
<tr class="odd">
<td style="text-align: center;">180</td>
<td style="text-align: center;">B4</td>
<td style="text-align: center;">┤</td>
<td style="text-align: center;">244</td>
<td style="text-align: center;">F4</td>
<td style="text-align: center;">∆</td>
</tr>
<tr class="even">
<td style="text-align: center;">181</td>
<td style="text-align: center;">B5</td>
<td style="text-align: center;">╡</td>
<td style="text-align: center;">245</td>
<td style="text-align: center;">F5</td>
<td style="text-align: center;">÷</td>
</tr>
<tr class="odd">
<td style="text-align: center;">182</td>
<td style="text-align: center;">B6</td>
<td style="text-align: center;">╢</td>
<td style="text-align: center;">246</td>
<td style="text-align: center;">F6</td>
<td style="text-align: center;">≈</td>
</tr>
<tr class="even">
<td style="text-align: center;">183</td>
<td style="text-align: center;">B7</td>
<td style="text-align: center;">╖</td>
<td style="text-align: center;">247</td>
<td style="text-align: center;">F7</td>
<td style="text-align: center;">≈</td>
</tr>
<tr class="odd">
<td style="text-align: center;">184</td>
<td style="text-align: center;">B8</td>
<td style="text-align: center;">╕</td>
<td style="text-align: center;">248</td>
<td style="text-align: center;">F8</td>
<td style="text-align: center;">≈</td>
</tr>
<tr class="even">
<td style="text-align: center;">185</td>
<td style="text-align: center;">B9</td>
<td style="text-align: center;">╣</td>
<td style="text-align: center;">249</td>
<td style="text-align: center;">F9</td>
<td style="text-align: center;">?</td>
</tr>
<tr class="odd">
<td style="text-align: center;">186</td>
<td style="text-align: center;">BA</td>
<td style="text-align: center;">║</td>
<td style="text-align: center;">250</td>
<td style="text-align: center;">FA</td>
<td style="text-align: center;">·</td>
</tr>
<tr class="even">
<td style="text-align: center;">187</td>
<td style="text-align: center;">BB</td>
<td style="text-align: center;">╗</td>
<td style="text-align: center;">251</td>
<td style="text-align: center;">FB</td>
<td style="text-align: center;">√</td>
</tr>
<tr class="odd">
<td style="text-align: center;">188</td>
<td style="text-align: center;">BC</td>
<td style="text-align: center;">╝</td>
<td style="text-align: center;">252</td>
<td style="text-align: center;">FC</td>
<td style="text-align: center;">?</td>
</tr>
<tr class="even">
<td style="text-align: center;">189</td>
<td style="text-align: center;">BD</td>
<td style="text-align: center;">╜</td>
<td style="text-align: center;">253</td>
<td style="text-align: center;">FD</td>
<td style="text-align: center;">²</td>
</tr>
<tr class="odd">
<td style="text-align: center;">190</td>
<td style="text-align: center;">BE</td>
<td style="text-align: center;">╛</td>
<td style="text-align: center;">254</td>
<td style="text-align: center;">FE</td>
<td style="text-align: center;">■</td>
</tr>
<tr class="even">
<td style="text-align: center;">191</td>
<td style="text-align: center;">BF</td>
<td style="text-align: center;">┐</td>
<td style="text-align: center;">255</td>
<td style="text-align: center;">FF</td>
<td style="text-align: center;">ÿ</td>
</tr>
</tbody>
</table>
<h2 id="布尔类型和比较运算符">布尔类型和比较运算符</h2>
<p>​
1、布尔类型：布尔类型的本质是数字类型，<code>True（1）</code>表示真，<code>False（0）</code>表示假</p>
<p>​ 2、用比较运算符得到的是布尔类型的数据</p>
<p>​
3、比较运算符：<code>==  ！=  &gt;  &lt;  &gt;=  &lt;=</code>,正确返回<code>true</code>，错误返回<code>false</code></p>
<p>​
4、<code>Ture</code>与<code>False</code>是字面量，可以赋值给变量，如<code>bool=True</code></p>
<p>​ 5、字符串也可以用比较运算符比较,具体规则<a
href="https://baike.baidu.com/item/%E5%AD%97%E7%AC%A6%E6%AF%94%E8%BE%83/22036054?fr=aladdin">看此</a></p>
<blockquote>
<p>注意python的小数加减的比较，如下例：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">0.1</span> + <span class="number">0.2</span> == <span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>在Python语言中，0.1+0.2=0.300000000000000000004。原因是：对于十进制数，它只能表示以进制数的质因子为分母的分数。10的质因子有2和5，因此1/2、1/4.
1/5、1/8和1/10都可以精确表示；相反，1/3、1/6和1/7都是循环小数，因为它们的分母使用了质因子3或者7。二进制下(进制数为2),只有一个质因子，即2，因此只能精确表示分母质因子是2的分数。二进制中，1/2、1/4和1/8都可以被精确表示，但1/5或者1/10就变成了循环小数。所以，在十进制中能够精确表示的0.1与0.2(1/10与1/5),到了计算机所使用的二进制中就变成了循环小数。当对这些循环小数进行数学运算并将二进制数据转换成人类可读的十进制数据时，会对小数尾部进行截断处理。在不同的语言中，运行0.1+0.2会输出不同的结果。</p>
</blockquote>
<p>练习</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">bool_1 = <span class="literal">True</span></span><br><span class="line">bool_2 = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(bool_1, <span class="built_in">type</span>(bool_2))</span><br><span class="line">num_1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">num_2 = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;num_1 &lt; num_2的结果是：<span class="subst">&#123;num_1 &lt; num_2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num_1 &gt; num_2的结果是：%s&quot;</span> % (num_1 &gt; num_2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;num_1 == num_2的结果是：<span class="subst">&#123;num_1 == num_2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;num_1 == num_2的结果是：%s&quot;</span> % (num_1 == num_2))</span><br></pre></td></tr></table></figure>
<h2 id="if语句的基本格式">if语句的基本格式</h2>
<p>​ 1、if的写法包括范，如</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">age = <span class="number">30</span></span><br><span class="line"><span class="keyword">if</span> age &gt; <span class="number">30</span>：</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;已成年&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><code>if</code>后面的条件不要加括号，写完条件后要直接加一个冒号，下面一行要空四格（一个<code>tab</code>键）表示是if后的条件如果成立，返回<code>True</code>，执行下面的操作</p>
<p>练习</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入您的年龄：&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;您已经<span class="subst">&#123;age&#125;</span>岁了&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您已成年&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;时间过得真快&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>练习</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;欢迎来到游乐场,儿童免费，成人收费&quot;</span>)</span><br><span class="line">fee = <span class="number">10</span></span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入您的年龄：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;您已成年，游玩需要补票<span class="subst">&#123;fee&#125;</span>元&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;祝您游玩愉快&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="if-else语句">if else语句</h2>
<p>​
1、<code>if</code>语句的加强版，在<code>False</code>情况下执行的语句</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件：</span><br><span class="line">​  满足条件要做的事情</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>：(<span class="keyword">else</span>和<span class="keyword">if</span>同级)</span><br><span class="line">​  不满足条件要做的事情</span><br></pre></td></tr></table></figure>
<p>​ 2、<code>else</code>不需要判断条件</p>
<p>​ 3、<code>else</code>代码块也要四格缩进</p>
<p>​ 4、<code>else</code>也要加冒号</p>
<h3 id="a-if-condition-else-b表达式">a if condition else b表达式</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">b = <span class="literal">True</span></span><br><span class="line">a = <span class="string">&quot;hello&quot;</span> <span class="keyword">if</span> b <span class="keyword">else</span> <span class="string">&quot;good&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">hello</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>练习</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;欢迎来到动物园&quot;</span>)</span><br><span class="line">fee = <span class="number">10</span></span><br><span class="line">height = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入您的身高（cm）：&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> height &gt; <span class="number">120</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;您的身高超出120cm，游玩需要补票<span class="subst">&#123;fee&#125;</span>元&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您的身高未超出120cm，可以免费游玩&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;祝您游玩愉快&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="if-elif-else语句">if elif else语句</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件一:</span><br><span class="line">​   满足条件一所执行的命令</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> 条件二：</span><br><span class="line">​   满足条件二所执行的命令</span><br><span class="line">​      ...</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">​   所有条件都不满足所执行的命令</span><br></pre></td></tr></table></figure>
<p>​ 1、<code>elif</code>可以写多个</p>
<p>​ 2、<code>elif</code>之间是互斥的</p>
<p>​ 3、<code>elif</code>是从上到下判断</p>
<p>​
4、<code>else</code>可以省略不写，即满足<code>elif</code>，执行相应<code>elif</code>的命名，所有<code>elif</code>不满足，不执行命令</p>
<p>​ 5、<code>if</code>和<code>elif</code>的命令加四个空格</p>
<p>​
6、<code>elif</code>条件判断中，直接写<code>input</code>语句收集数据，节省代码量</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;欢迎来到动物园，请输入今天几号（1-31）：&quot;</span>)) == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;今天是一号，可以免费游玩！&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;欢迎来到动物园，请输入您的身高（cm）：&quot;</span>)) &lt;= <span class="number">120</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您的身高不超过120cm，可以免费游玩&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入您的vip等级（1-5）：&quot;</span>)) &gt;= <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您的vip等级大于等于3，可以免费游玩&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;您的身高超过120cm且vip等级小于3，请补票10元&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;祝您游玩愉快&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="判断语句的嵌套">判断语句的嵌套</h2>
<p>​ 1、嵌套判断语句是用来进行多条件，多层次的逻辑判断的</p>
<p>​ 2、注意缩进的层次关系</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件：</span><br><span class="line">​   满足条件所做的事情</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">​    <span class="keyword">if</span> 另一条件</span><br><span class="line">​        满足另一条件所做的事情</span><br></pre></td></tr></table></figure>
<p>​
3、注意在多层的逻辑判断中，若要更新变量，最好是先判断再更新，不要边判断边更新，这样会使程序更加简便。比如三次机会猜数字的程序，若边判断边更新，</p>
<p>​
用<code>if</code>写出所有的情况，这样就比较复杂，若判断一次更新一次，这样程序就更简单。</p>
<h2 id="while循环基本语句">while循环基本语句</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件：</span><br><span class="line">​     满足条件执行的命令</span><br></pre></td></tr></table></figure>
<p>​
1、当满足条件时，执行命令，在检查是否满足条件，如又满足条件继续执行命令，直到不能满足条件为止</p>
<p>​ 2、<code>while</code>的条件要是布尔类型</p>
<p>​ 3、和<code>if</code>一样，<code>while</code>也要缩进</p>
<p>​ 4、<code>while</code>要设置终止条件</p>
<p>练习</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">100</span>:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    s = s + i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;s&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="while循环的嵌套">while循环的嵌套</h2>
<p>​
1、内外层循环（双层循环），写好内外层的关系，外层进行一次，内层要进行全部的循环。三层循环同理</p>
<p>​ 2、要注意缩进的格式，他决定了层次关系</p>
<p>​
3、注意累加时候的小细节，比如在<code>while</code>条件的大于或小于号加不加等于（可以用此控制循环的次数），累加到最后一些变量会不会进行一次多余的累加，这个时候就要消除这种错误</p>
<p>​ 4、分清外层和内层分别控制什么</p>
<p>练习</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">i = <span class="number">1</span></span><br><span class="line">j = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;今天是送玫瑰花的第<span class="subst">&#123;i&#125;</span>天&quot;</span>)</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> j &lt;= <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;这是第<span class="subst">&#123;i-<span class="number">1</span>&#125;</span>天送出的第<span class="subst">&#123;j&#125;</span>朵玫瑰花&quot;</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;在第<span class="subst">&#123;i-<span class="number">1</span>&#125;</span>天，我终于成功了&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="九九乘法表">九九乘法表</h2>
<p>​
1、<code>print</code>语句输出之后是默认换行的，<code>print</code>语句的不换行，在字符串后用逗号隔开，加上<code>end = ''</code>即可</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">12</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>​ 而</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">12</span>，end=‘’)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">12</span>）</span><br><span class="line"><span class="comment">##输出 1212</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">12</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">12</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出为：</span></span><br><span class="line"><span class="string">12</span></span><br><span class="line"><span class="string">12</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>end=''只消除了后面一个print的换行，而保留了前面一个的换行</p>
<p>2、<code>print</code>的对齐，用<code>print（“单词1\t单词2”）</code></p>
<p><code>print（“单词3\t单词4”）</code></p>
<p>可以使单词2和单词4上下对其，但是若单词1与单词3的字符数差距过大（一般多出或少两个），就无法用制表符）来对齐单词</p>
<p>3、print（空内容）可以用来换行或者print（”“）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##控制行的循环</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">9</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    j = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##控制列的循环</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &gt;= j:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\t<span class="subst">&#123;j&#125;</span>*<span class="subst">&#123;i&#125;</span>=<span class="subst">&#123;i*j&#125;</span>&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="for循环的基础语法">for循环的基础语法</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 临时变量 <span class="keyword">in</span> 待处理数据集（序列类型：字符串、列表、元组等）</span><br><span class="line">​    循环满足条件时执行的代码</span><br></pre></td></tr></table></figure>
<p>​
2、<code>while</code>与<code>for</code>的区别，<code>while</code>是要满足条件才执行命令，而<code>for</code>无需条件，他让待处理数据集中的每个数据赋值给临时变量，再将临时变量进行名命令的执行,
直至所有数据都处理过一遍。</p>
<p>​ 3、无法进行无限循环，被处理的数据不能无限大。</p>
<p>​ 4、记得缩进</p>
<p>练习</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;apple&quot;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> name:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<h2 id="range获得数字序列的基本语法">range(获得数字序列)的基本语法</h2>
<p>​
1、<code>range（num</code>）生成一个从<code>0-（num-1）</code>的数字列表，即<code>[0，1，2，....，（num-1）]</code></p>
<p>​
2、<code>range（num1, num2）</code>生成一个从<code>num1-（num2-1）</code>的数字列表，即<code>[num1，1，2，....，（num2-1）]</code></p>
<p>​
3、<code>range（num1, num2,step）</code>生成一个从<code>num1-（num2-1</code>,跨度为<code>step</code>的数字列表，如<code>range（5，10，2</code>）为<code>[5，7，9]</code></p>
<ul>
<li>range(A,
B)如果A≥B,那么不会有任何结果输出，这个特性可以用户在数据容器的循环遍历上，若用考虑超出容器范围</li>
</ul>
<h2 id="for循环临时变量的作用范围">for循环临时变量的作用范围</h2>
<p>​ 1、临时变量在规范上只能在<code>for</code>循环的内部使用</p>
<p>​
2、实际上在<code>for</code>循环的外部，临时变量也是可以进行访问的</p>
<p>​
3、若先在<code>for</code>外部定义了临时变量，<code>for</code>循环做的只是将临时变量进行内容的覆盖，外部可以正常访问，也符合规范</p>
<p>​
4、如果需要在<code>for</code>循环的外部使用临时变量，就先在外部定义这个变量</p>
<h2 id="for循环的嵌套">for循环的嵌套</h2>
<p>​ 1、和<code>while</code>循环类似，注意缩进</p>
<p>​ 2、<code>for</code>循环和<code>while</code>循环可以相互嵌套</p>
<p>练习</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;今天是送玫瑰花的第<span class="subst">&#123;x&#125;</span>天&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;x&#125;</span>天，我送出第<span class="subst">&#123;p&#125;</span>朵玫瑰&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>练习（九九乘法表）</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\t<span class="subst">&#123;j&#125;</span>*<span class="subst">&#123;i&#125;</span>=<span class="subst">&#123;j*i&#125;</span>&quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>
<h2 id="循环中断continue与break">循环中断：continue与break</h2>
<p>​
1、<code>continue</code>用于中断本次循环（内、外层循环都可以），直接进入下一次的循环，可用于<code>while</code>和<code>for</code>循环，效果一样</p>
<p>​ 2、其基本语句为</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>（<span class="keyword">for</span>） ....：</span><br><span class="line"></span><br><span class="line">​     语句<span class="number">1</span></span><br><span class="line"></span><br><span class="line">​     <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">​     语句<span class="number">2</span>             <span class="comment"># 语句2是不会执行的</span></span><br></pre></td></tr></table></figure>
<p>​ 3、<code>continue</code>在哪层,中断哪层的循环</p>
<p>​ 4、<code>break</code>直接结束本层循环（嵌套同理）</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>（<span class="keyword">for</span>） ....：</span><br><span class="line"></span><br><span class="line">​     语句<span class="number">1</span></span><br><span class="line"></span><br><span class="line">​     <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">​     语句<span class="number">2</span></span><br><span class="line"></span><br><span class="line">语句<span class="number">3</span>                 <span class="comment"># 最终结果：运行一次语句1后break直接结束循环，再运行一次语句3</span></span><br></pre></td></tr></table></figure>
<p>​
5、<code>continue</code>和<code>break</code>也可以与<code>if</code>同时使用，中断或终止<code>if</code>所在层的循环</p>
<h2 id="函数">函数</h2>
<p>​
1、函数是指组织好的，可重复使用，用来实现特点功能的代码段，如<code>len（字符串）</code></p>
<p>​
2、函数可以避免重复性的写代码、提高了开发效率、将功能封装在函数内，可重复使用，可以使用<code>python</code>内置的函数和自己定义的函数</p>
<h2 id="函数的基础定义">函数的基础定义</h2>
<p>​ 1、</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>（传入参数&#123;可省略&#125;）：</span><br><span class="line"></span><br><span class="line">​    函数体</span><br><span class="line"></span><br><span class="line">​    &#123;可省略&#125;<span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure>
<p>​ 2、基本形式</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>（）</span><br><span class="line"></span><br><span class="line">​   函数体</span><br></pre></td></tr></table></figure>
<p>​
3、注意：函数的作用顺序是先调用函数，再让函数体工作，所以工作顺序是从下到上，但是必须先定义后使用</p>
<p>​ 4、函数名包括括号</p>
<p>例子</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">say_hi</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">say_hi()</span><br></pre></td></tr></table></figure>
<h2 id="函数传入参数">函数传入参数</h2>
<p>​
1、传入参数的功能是在函数进行计算的时候，接受（调用）外部提供的数据</p>
<p>​ 2、传入参数中若有多个参数（可以任意个），用逗号将其隔开</p>
<p>​ 3、形式参数要和传入的实际参数一一对应</p>
<p>例子</p>
<p>​ 形式参数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;x&#125;</span>+<span class="subst">&#123;y&#125;</span>=<span class="subst">&#123;x+y&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">add(<span class="number">1</span>, <span class="number">9995</span>)</span><br></pre></td></tr></table></figure>
<p>其中<code>x</code>与<code>y</code>为形式参数，表示函数声明要使用2个参数</p>
<p><code>1</code>与<code>9995</code>为实际参数，表示函数执行时真正使用的参数</p>
<h2 id="函数的返回值的语法">函数的返回值的语法</h2>
<p>​ 1、返回值就是程序中的函数完成事情后，最后给调用者的结果</p>
<p>​ 2、语法</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>（传入参数（可省略））</span><br><span class="line"></span><br><span class="line">​   函数体</span><br><span class="line"></span><br><span class="line">    （可省略）<span class="keyword">return</span> 返回值</span><br></pre></td></tr></table></figure>
<p>​
3、函数的返回值可以用<code>变量 = 函数（参数zi</code>）去接收，变量只能接受函数的返回值（<code>print</code>等不会被执行），若只执行函数，那么函数中的<code>print</code>等就会被执行出来</p>
<p>​
4、若函数的<code>return</code>后还有其他语句，当函数执行到<code>return</code>之后，后面的语句都不会执行了</p>
<p>​
5、只要函数运行了，函数体中的语句就会被执行，若函数体中有<code>print</code>，就会打印东西出来</p>
<h2 id="函数的none返回值">函数的None返回值</h2>
<p>​
1、<code>None</code>为特殊的字面量<code>&lt;class 'NoneType'&gt;</code></p>
<p>​
2、如果在函数中不写<code>return</code>的值，那么返回值就是<code>None</code>，与主动返回<code>None</code>是一样的</p>
<p>​
3、<code>None</code>的应用价值：在<code>if</code>判断中<code>None = False</code>，可使用函数的返回值配合<code>if</code>做选择或用于定义变量的值，若变量暂不需要有具体的值，那么可以将<code>None</code>赋予变量</p>
<p>​ 4、<code>None</code>值表示无意义，空的</p>
<p>练习</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_age</span>(<span class="params">age1</span>):</span><br><span class="line">    <span class="keyword">if</span> age1 &gt;= <span class="number">18</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入您的年龄：&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> check_age(age):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;未成年，请离开&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成年了，进来吧&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="函数的说明文档">函数的说明文档</h2>
<p>​ 1、添加多行注释，辅助理解函数的作用</p>
<p>​ 2、内容应卸载函数体之前</p>
<p>​
3、输入三个双引号再按一下回车，就会出现函数注释的格式，直接编写即可</p>
<p>​ 函数说明....</p>
<p>​ 参数1的作用....</p>
<p>​ 参数2的作用....</p>
<p>​ 返回值是什么....</p>
<p>​
4、再调用编写好注释的函数的时候，将鼠标放在调用的函数上，会显示函数的注释</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    :param a: 姓名</span></span><br><span class="line"><span class="string">    :param b: 年龄</span></span><br><span class="line"><span class="string">    :param c: 问候语</span></span><br><span class="line"><span class="string">    :return: 整体问候语句</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;a&#125;</span>您好，您今年<span class="subst">&#123;b&#125;</span>岁，<span class="subst">&#123;c&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="函数的嵌套调用">函数的嵌套调用</h2>
<p>​
1、再调用的函数1中有嵌套的函数2时，当运行到函数1中的嵌套的函数2时，程序会跳转到函数2，先运行完函数2，再转到函数1中函数2之后的位置继续运行</p>
<p>​
2、调用函数与嵌套的函数摆放顺序是无要求的，但是为了规范好看，最好是将被嵌套的函数定义放在前，调用函数定义放在后</p>
<p>​ 3、函数可以自己嵌套自己</p>
<h2 id="变量的作用域">变量的作用域</h2>
<p>​
1、局部变量再函数中只在函数体中起作用，在函数外部会显示变量没有被定义</p>
<p>​
2、全局变量在函数体内，体外都能生效的变量，通常定义在函数外部局部变量例子</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">fun2()</span><br><span class="line"><span class="built_in">print</span>(num)  <span class="comment">#此num为函数内部变量，在函数外部无法访问</span></span><br><span class="line">全局变量例子</span><br><span class="line">num = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line">fun2()</span><br><span class="line"><span class="built_in">print</span>(num)  <span class="comment">#此num为外部变量，函数内外部都可以访问</span></span><br></pre></td></tr></table></figure>
<p>​
3、在函数中修改外部已经定义的全局变量的值，不会影响全局变量的值（<code>python</code>会发现异常，但是可以运行）</p>
<p>​
4、如果要在函数中修改全局变量的值，可以用<code>global+变量</code>的形式声明，这时候在函数内就可以修改全局变量了，函数内部变量和全局变量就是同一个变量了</p>
<p>​
5、如果在函数中没有对外部变量的赋值语句，那么在函数中，这个变量将会被看作全局变量，若在函数中有对外部变量进行赋值，那么这个变量会被看成函数中的局部变量</p>
<h2 id="什么是数据容器">什么是数据容器</h2>
<p>​
1、数据容器：一种可以容纳多份数据的数据类型，容纳的每一份数据称为一个元素，每一个元素可以是任意类型的数据，如字符串，布尔等</p>
<p>​ 2、根据数据容器的特点的不同，如是否支持重复元素</p>
<p>​ 是否可以修改</p>
<p>​ 是否有序等</p>
<p>​
将数据容器分为列表<code>list</code>，元组<code>tuple</code>，字符串<code>str</code>，集合<code>set</code>和字典<code>dict</code></p>
<h2 id="列表的定义格式">列表的定义格式</h2>
<p>​ 1、字面量：<code>[元素1，元素2，元素3，....]</code></p>
<p>​ 2、定义变量：<code>变量名 = [元素1，元素2，元素3，....]</code></p>
<p>​ 3、定义空列表：<code>变量名 = []</code></p>
<p>​ <code>变量名 = list()</code></p>
<p>​
4、各个元素可以是不同类型的，且元素可以是变量，支持列表中嵌套列表类型的变量</p>
<p>​ 5、列表的类型为<code>&lt;class 'list'&gt;</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, a]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">结果为</span></span><br><span class="line"><span class="string">[1, 2, 3]</span></span><br><span class="line"><span class="string">[4, 5, [1, 2, 3]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="列表的下标索引">列表的下标索引</h2>
<p>​ 1、列表的每一个元素都有下标，从左到右依次为，0，1....n-1</p>
<p>​
2、要取出一个列表中对应下标的元素，只需将list[下标]赋值给一个变量</p>
<p>​
3、列表中的下表也可以进行反向索引，即从右向左下标分别为-1，-2....-n</p>
<p>​
4、嵌套列表的元素取出可以用<code>list[a][b]..[]</code>表示，从前向后为从外向里嵌套的列表，[]中填写元素
的下标（正向反向的下表都可以） ​</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">c = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br><span class="line"><span class="built_in">print</span>(c[-<span class="number">1</span>][-<span class="number">1</span>]) </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>​ 5、下标不要超出范围，超出范围会报错</p>
<p>​
6、下标索引只能支持查找第一层列表元素的下标，如果有嵌套的列表，搜寻嵌套列表中有的元素，而表层列表中没有的元素，会报错</p>
<h2 id="列表的常用操作和特点">列表的常用操作和特点</h2>
<p>​ 1、列表常用的方法（列表的方法）</p>
<p>​ 插入元素、删除元素、清空列表、修改元素和统计元素个数</p>
<p>​ 注意函数与方法的区别：方法是定义在<code>class+类</code> 里面
，与函数一样都要返回值。函数的使用方法直接写函数名，而方法的使用需要先声明类，在用<code>类+.+方法</code>引出来（后面会学）</p>
<p>​ 其余方法和函数很相似</p>
<p>​ 列表的内置方法或函数</p>
<p>​ （1）查询某元素的下标索引</p>
<p>​ 1）语法：<code>列表.index（元素</code>）</p>
<p>其中<code>index</code>是方法，元素是<code>index</code>方法的参数 ​</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;fuck&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&quot;world&quot;</span>))  <span class="comment">#输出为1</span></span><br></pre></td></tr></table></figure>
<p>​ 2）查找不在列表中的元素会报错 ​</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;fuck&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(a.index(<span class="string">&quot;me&quot;</span>)) <span class="comment">#报错</span></span><br></pre></td></tr></table></figure>
<p>​ （2）修改特定位置的函数值</p>
<p>​ 语法：<code>列表[下标] = 需要修改的值</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;fuck&quot;</span>]</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 输出：[&#x27;hello&#x27;, 2, &#x27;fuck&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>​ (3)插入元素</p>
<p>​ 语法：<code>列表.insert（下标， 元素）</code></p>
<p>表示在指定的下标中插入元素(也就是在未插入元素的列表对应下标的前面插入)</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;fuck&quot;</span>]</span><br><span class="line">a.insert(<span class="number">2</span>, <span class="string">&quot;good&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  输出：[<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;good&#x27;</span>, <span class="string">&#x27;fuck&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>​ （4）追加元素到列表末尾</p>
<p>​
1）追加单个元素（这里的元素可以是列表。追加完之后会以嵌套的形式出现</p>
<p>​ 语法：<code>列表.append（元素）</code>，将指定元素添加至列表末尾</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;fuck&quot;</span>]</span><br><span class="line">a.append(<span class="string">&quot;me&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment">#输出：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;fuck&#x27;, &#x27;me&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>​ 2）追加一批元素</p>
<p>​ 语法：<code>列表.extend(其他数据容器)</code></p>
<p>将其他数据容器的内容取出，添加至列表尾部，当没有嵌套列表时，不会以列表的形式添加！</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;fuck&quot;</span>]</span><br><span class="line">c = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">a.extend(c)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment"># 输出：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;fuck&#x27;, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>
<p>​ 当<code>c = [4, 5, 6, [7, 8, 9]]</code>
时，输出：<code>['hello', 'world', 'fuck', 4, 5, 6, [7, 8, 9]]</code>，还是会有嵌套列表,所以这种方法只能剥离一层列表的中的元素</p>
<p>​ （5）删除列表中的指定下标的元素</p>
<p>​ 1）语法：<code>del 列表[下标]</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;fuck&quot;</span>]</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment">#输出：[&#x27;world&#x27;, &#x27;fuck&#x27;] 注意这种方法的下标是用[]</span></span><br></pre></td></tr></table></figure>
<p>​
2）语法：<code>列表.pop（下标）</code>，这种方法的是指是一种列表的方法，这种方法将列表中的指定元素取出并返回出来,若（）中不写下标，那么默认删除和返回列表最后一个元素）</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;fuck&quot;</span>]</span><br><span class="line">w = a.pop(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment">#输出：[&#x27;world&#x27;, &#x27;fuck&#x27;] 注意这种方法的下标是用()</span></span><br><span class="line"><span class="built_in">print</span>(w)  <span class="comment">#输出：hello (hello为.pop方法的返回值)</span></span><br></pre></td></tr></table></figure>
<p>​ （6）删除列表中的指定元素</p>
<p>​
语法：<code>列表.remove（元素）</code>，从前到后搜索列表中的相应元素，删除找到的第一个元素</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;fuck&quot;</span>]</span><br><span class="line">a.remove(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment">#输出：[&#x27;hello&#x27;, &#x27;hello&#x27;, &#x27;world&#x27;, &#x27;fuck&#x27;] 只是把第一个world给删除了</span></span><br></pre></td></tr></table></figure>
<p>​ （7）清空列表</p>
<p>​ 语法：<code>列表.clear（）</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;fuck&quot;</span>]</span><br><span class="line">a.clear()</span><br><span class="line"><span class="built_in">print</span>(a)  <span class="comment">#输出：[]</span></span><br></pre></td></tr></table></figure>
<p>​ （8）统计某一个元素在表层（第一层）列表内的数量</p>
<p>​ 语法：<code>列表.count（元素）</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;fuck&quot;</span>]</span><br><span class="line">num = a.count(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(num) <span class="comment">#输出 2</span></span><br></pre></td></tr></table></figure>
<p>​ （9）统计表层列表内有多少个元素</p>
<p>​ 语法：<code>len（列表）</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;fuck&quot;</span>]</span><br><span class="line">num = <span class="built_in">len</span>(a)</span><br><span class="line"><span class="built_in">print</span>(num) <span class="comment">#输出：5</span></span><br></pre></td></tr></table></figure>
<pre><code>（10）列表的翻转</code></pre>
<p>​ 语法：<code>列表.reverse()</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">12</span>, <span class="number">23</span>, <span class="number">55</span>]</span><br><span class="line">list_1.reverse()</span><br><span class="line"><span class="built_in">print</span>(list_1)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">[55, 23, 12]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>2、列表的特点</p>
<p>​ （1）可以容纳多个元素<code>（2**63-1个）</code></p>
<p>​ （2）可以容纳不同类型的元素</p>
<p>​ （3）数据是有序数据，有下标符号</p>
<p>​ （4）允许重复数据的存在</p>
<p>​ （5）可以修改，增加或删除元素</p>
<h2 id="列表的循环遍历迭代">列表的循环遍历（迭代）</h2>
<p>​
通过循环，用下标索引的方式进行列表的遍历，再用查询列表元素的方式读取列表元素，再用列表元素的个数进行循环条件的控制。</p>
<p><code>for</code>循环更加适用于列表的遍历，<code>while</code>循环也可以，但是他要添加条件。</p>
<p><code>for</code>循环不适合无限的循环（因为数据容器一般都不是无限的），<code>while</code>循环可以很容易做到无限循环。</p>
<p><code>for</code>循环更简单，<code>while</code>循环更灵活</p>
<p>​ 1、列表的<code>while</code>循环遍历</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">while_list</span>(<span class="params">列表</span>)</span><br><span class="line"></span><br><span class="line">​    index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">while</span> index &lt; <span class="built_in">len</span>(列表)</span><br><span class="line"></span><br><span class="line">​          x = 列表.index(index)</span><br><span class="line"></span><br><span class="line">​          对元素进行的操作</span><br><span class="line"></span><br><span class="line">​          index += <span class="number">1</span>   </span><br><span class="line"><span class="comment">##注意len（列表）的数值为下标索引最大值+1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">##在列表中挑选出奇数组成新列表</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">odd_list</span>(<span class="params">list_</span>):</span><br><span class="line">    odd = []</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> index &lt; <span class="built_in">len</span>(list_):</span><br><span class="line">        x = list_[index]</span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">            odd.append(x)</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> odd</span><br><span class="line"></span><br><span class="line">odd_ = odd_list(my_list)</span><br><span class="line"><span class="built_in">print</span>(odd_)</span><br></pre></td></tr></table></figure>
<p>​ 2、列表的for循环遍历</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">for_list</span>(<span class="params">列表</span>)</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> x <span class="keyword">in</span> 列表</span><br><span class="line"></span><br><span class="line">​       对元素x进行的操作</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">##在列表中挑选出偶数组成新列表</span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">even_list</span>(<span class="params">list_</span>):</span><br><span class="line">    even = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> list_:</span><br><span class="line">        <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            even.append(x)</span><br><span class="line">    <span class="keyword">return</span> even</span><br><span class="line"></span><br><span class="line">even_ = even_list(my_list)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(even_)</span><br></pre></td></tr></table></figure>
<h2 id="元组tuple的定义和操作">元组tuple的定义和操作</h2>
<p>​ 元组的定义</p>
<p>​
1、元组：元组也可以封装多个不同或相同类型的元素，但它和列表不同的是元组一旦定义就不能被修改，它支持重复元素</p>
<p>​ 2、元组的定义语法：变量名称 = （元素1， 元素2，... ， 元素n）</p>
<p>​ 空元组命名：<code>（）或tuple（）</code></p>
<p>注：<code>tuple</code>好像不能直接非空元组进行定义，这是类的知识，在后面会学习到</p>
<p>​
3、但定义的元组只有一个元素的时候，要在元素后加一个逗号，即<code>变量名称 = （元素1，）</code>，
否则不是元组类型</p>
<p>​
4、元组也可以像列表一样进行嵌套，也有和<code>list</code>一样的下标索引，取出嵌套元组中的元素方法也和<code>list</code>中一样</p>
<p>​
5、元组和列表很相似，但是元组不能修改，单个元素的元组后面需要加逗号</p>
<p>​ 元组的操作</p>
<p>​
1、<code>元组.index（元素）</code>：查找元组第一层中对应元素的下标索引</p>
<p>​ 2、<code>元组.count（元素）</code>：查找表层元组中某一元素的个数</p>
<p>​ 3、<code>len（元组）</code>：查找表层元组中的元素个数</p>
<p>​ 4、元组的遍历，同<code>list</code></p>
<p>​
注：元组在一种情况下可以修改，就是元组的表层元素中有列表元素，可以通过嵌套下标索引的方式对嵌套的列表中的元素进行修改</p>
<h2 id="字符串容器">字符串容器</h2>
<p>​
1、字符串是只能存储字符的容器，如果一定要修改，只能定义一个新的字符串</p>
<p>​ 2、字符串的常用操作：</p>
<p>​ 1)字符串的下标索引</p>
<p>​ <code>字符串.index（“字母或字符或空格”）</code></p>
<p>​
若括号中填字母或空格，那么会显示字符串存放任意数量的字符，其中的每一个字符是一个元素，也可以通过下标索引进行访问，每个字母的下标命名规则与列表和元组相同</p>
<p>字符串容器也是不可修改的，若一从左到右找到的第一个相对应的字母或空格的下标索引，若填的是字符，那么会从左到右找到该字符，显示该字符第一个字母位置的下标索引</p>
<p>​ 2）字符串的替换功能</p>
<p>​ <code>字符串.replace（字符串1， 字符串2）</code></p>
<p>​
将旧字符串中所有字符串1替换成字符串2，实质上是替换之后生成了一个新的字符串的返回值，要用变量去接收他。因为字符串是不可修改的</p>
<p>​ 3）字符串的分割</p>
<p>​
<code>字符串.split（分隔符字符串）/字符串字符串.split（分隔符字符串，步长）</code></p>
<p>​
分隔符字符串是指需要按照什么字符进行切割，这种方法可以将字符串按不同的切割方法划分为不同的字符串，返回一个新的字列表（老字符串本身不变）</p>
<p>​ 注：将字符串按照分隔符字符串断开，且分隔符字符串在分割后会消失</p>
<p>括号中什么也不填，默认的是按空格分割</p>
<p>​ 4）字符串的规整</p>
<p>​ <code>字符串.strip（）/（需要头尾删除字符串）</code></p>
<p>​
字符串的规整是取出字符串前后的空格和回车，或者取出字符串前后指定的字符串(空格也算)</p>
<p>​
注：这里传入的参数字符串，<code>strip</code>会将其按每个字母划分为不同的子串，用这些单个的字串来和被“修改”的字符串的头尾的首字符进行对比，若头尾字串有和传入的字符串的单个字串相同，就删除，如此循环重复以上操作，直至最后被“修改”的字符串的头尾的首字符没有与和传入的字符串的单个字串相同，这时才返回修改过的新字符串</p>
<p>​ 5）统计字符串中某字符串出现的次数</p>
<p>​ <code>字符串.count(需要统计的字符串)</code></p>
<p>​ 6）统计字符串的长度</p>
<p>​ <code>len（字符串）</code> ​ 7）字符串的遍历</p>
<p>​ 同<code>tuple</code>和<code>list</code></p>
<p>注：直接打印字符串是没有双引号的，有时候可能看不出。但是在列表或元组等中有嵌套字符串时，打印列表或元组可以发现字符串有双引号</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = [<span class="string">&quot;sadas&quot;</span>]</span><br><span class="line">b = (<span class="string">&quot;asdsad&quot;</span>,) <span class="comment"># 单个元素的元组要这样设置</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">0</span>])</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;sadas&#x27;]</span></span><br><span class="line"><span class="string">sadas # 看不出为字符串</span></span><br><span class="line"><span class="string">(&#x27;asdsad&#x27;,)</span></span><br><span class="line"><span class="string">asdsad # 看不出为字符串</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="序列以及其切片">序列以及其切片</h2>
<ul>
<li>序列的定义</li>
</ul>
<p>​
序列是指内容连续、有序，可使用下标索引的一类数据容器。列表，元组，字符串都可以视为序列</p>
<ul>
<li>序列切片</li>
</ul>
<p>​ 在一个序列中，取出一个子序列</p>
<p>​ 语法：<code>序列[起始下标:结束下标:步长]</code></p>
<p>​
表示从序列的指定下表开始，以一定的规则取出序列中的元素，到指定位置结束，将这些取出的元素返回一个新的序列</p>
<p>​ 起始下标可以留空，表示从头开始取</p>
<p>​
结束下标表示何时结束，且不会选取结束下标所对应的元素，可以留空，视为一直取到序列的末尾</p>
<p>​ 步长表示取元素的间隔</p>
<p>​
默认步长为1：<code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>由<code>[0:10]</code>或<code>[0:10:1]</code>取为<code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code></p>
<p>​
若步长为2：<code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>由<code>[0:10:2]</code>取为<code>[1, 3, 5, 7, 9]</code>(跳过一个取一个)</p>
<p>​ 若步长为N：表示跳过<code>N-1</code>个元素取一个元素</p>
<p>​
步长为负数，表示反向取：<code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>由<code>[-1:-10:-1]</code>取为<code>[9, 8, 7, 6, 5, 4, 3, 2, 1]</code>,<code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code>由<code>[-1:-10:-2]</code>取为<code>[9, 7, 5, 3, 1]</code></p>
<p>eg</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list_1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="built_in">print</span>(list_1[-<span class="number">1</span>::])  <span class="comment"># 从-1位，也就是9开始取到正向结尾，也就是只取最后一位</span></span><br><span class="line"><span class="built_in">print</span>(list_1[-<span class="number">1</span>::-<span class="number">1</span>])  <span class="comment"># 从-1位，也就是9开始，一直向左反向取到结尾</span></span><br><span class="line"><span class="built_in">print</span>(list_1[-<span class="number">1</span>::-<span class="number">2</span>])  <span class="comment"># 从-1位，也就是9开始，一直向左反向取到结尾，隔一个数字取一个</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[9]</span></span><br><span class="line"><span class="string">[9, 8, 7, 6, 5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="string">[9, 7, 5, 3, 1]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意这里下标为-10的元素不存在，但是由于不会选取结束下标所对应的元素，若要执行将序列的元素反转，结束下标就要相应变化</p>
<blockquote>
<p>注意：1、切片并不会改变原序列（元组和字符串），而是返回一个新的序列★★★★★</p>
<p>​
2、由于结束下表对应的元素并不会被选中，且正向标记和反向标记的方式并不相同，对于
这两种方法的结束下标要注意区分，通常反向的结束下标要多-1</p>
<p>​
3、若有从头或到到尾的序列切片需求，那么起始下标或者结束下标就可以留空</p>
<p>​ 4、下标为正，步长也可以为负数，反过来也可以</p>
<p>​ 5、此方法也可以用在字符串和元组上</p>
</blockquote>
</blockquote>
<h2 id="集合">集合</h2>
<p>​ 1、集合的定义</p>
<p>​ 语法：<code>&#123;元素1， 元素2， ...， 元素n&#125;</code></p>
<p>​ 定于空集合：<code>变量名 = set()</code>
注：<code>变量名 = &#123;&#125;</code>不行</p>
<p>​ 2、集合的特点</p>
<ul>
<li><p>​ 不支持元素的重复且内部是无序的，不支持下标索引</p></li>
<li><p>​ 集合是支持修改的</p></li>
<li><p>​ 集合支持不同类型的元素混装，列表型元素除外</p></li>
<li><p>​
如果在定义元素的时候有重复的元素，在使用集合(print等操作)的时候，集合会自动去重，且不能保证各个元素的顺序</p></li>
</ul>
<p>​ 3、集合的常用操作（方法）</p>
<p>​ 1）添加新元素的方法</p>
<p>​ 语法：<code>集合.add（元素）</code></p>
<p>​ 添加新元素到集合，集合本身被修改</p>
<p>​ 2）移除元素的方法</p>
<p>​ 语法：<code>集合.remove（元素）</code></p>
<p>​ 移除集合的指定元素，集合本身被修改</p>
<p>​ 3)从集合中随机抽出一个元素，并将这个元素从集合中删除的方法</p>
<p>​ 语法：<code>集合.pop（）</code></p>
<p>​
<code>.pop</code>方法也可以和下标所以结合用在列表中，但是集合时无序的，所以不能指定下标，只能随机取一个元素当成返回值，再从集合本身中删除这个元素</p>
<p>​ 4）清空元素的方法</p>
<p>​ 语法：<code>集合.clear（）</code></p>
<p>​ 清空集合本身中的所有元素</p>
<p>​ 5）取出两个集合的差集的方法</p>
<p>​ 语法：<code>集合1.difference（集合2）</code></p>
<p>​ 返回一个新的集合，这个集合中的元素是集合1中有的，但集合2中是没有，
集合1和集合2都保持不变</p>
<p>​ 6)消除两个集合的交集的方法</p>
<p>​ 语法：<code>集合1.difference_update（集合2）</code></p>
<p>​ 对比集合1和集合2，消除集合1中，集合1和集合2的交集所包含的元素,
集合2不变，集合1被修改</p>
<p>​ 7）合并两个集合</p>
<p>​ 语法：<code>集合1.union（集合2）</code></p>
<p>​ 将集合1和集合2组合成一个新集合，并返回这个集合,
集合1和集合2保持不变</p>
<p>​ 注意：集合的去重，不会有重复的元素</p>
<p>​ 8）求两个集合的交集</p>
<p>​
语法：<code>集合1 &amp;（集合2）</code>或<code>intersection_set = 集合1.intersection(集合2)</code></p>
<p>​ 9)统计集合中元素数量的函数</p>
<p>​ 语法：<code>len（集合）</code></p>
<p>​ 集合中的元素个数是按降重后的元素个数计算的</p>
<p>​ 10）集合的遍历</p>
<p>​ 集合不能用<code>while</code>循环，因为集合没有下标索引</p>
<p>​ 集合可以用<code>for</code>循环遍历，但是不能确定集合的顺序</p>
<h2 id="字典的定义">字典的定义</h2>
<p>​
1、字典是通过定义<code>key</code>以及其相对应的<code>value</code>而形成的，可以通过查找相应的<code>key</code>来找到对应的<code>value</code>(和生活中的字典比较相似)</p>
<p>​
语法：<code>字面量：&#123;key：value， key：value， ...key：value&#125;</code></p>
<p>​ <code>变量 = &#123;key：value， key：value， ...key：value&#125;</code></p>
<p>​ 空字典：<code>变量名 = &#123;&#125;</code> 或 <code>变量名 = dict()</code></p>
<p>​
2、字典的注意点：一个<code>key</code>和<code>value</code>组合在一起才成为一个元素（键值对）</p>
<ul>
<li><p>字典在使用过程中，元素是不允许重复的，若有重复的元素，虽然不会报错，但会出现黄标，且定义在后面的重复元素会将定义在前的元素覆盖</p></li>
<li><p>字典和集合相同，没有下标索引，只能用<code>key</code>取查找<code>value</code></p></li>
<li><p>键可以是任何不可变类型，如整数、浮点数、字符串或元组（只要元组中的元素也是不可变的）。但列表、集合和其他可变类型不能用作字典的键。字典的值可以是任何Python对象，包括可变类型如列表或字典</p></li>
<li><p>和集合一样，不同的元素之间都是用逗号隔开的</p></li>
<li><p>字典是可以被修改的</p></li>
</ul>
<p>​ 3、字典的查找</p>
<p>​ 语法：<code>字典[key]</code></p>
<p>​ 通过<code>key</code>查找到字典中相对应的<code>value</code></p>
<p>​ 4、字典的嵌套</p>
<p>​
由于字典的<code>key</code>可以为除了字典的任意类型，<code>value</code>可以为任意类型，且比如在要查找某一个学生的某一门考试成绩的时候，若将学生名称作为<code>key</code>，单个字典是无法通过<code>key</code>来查找某一个学生的某科成绩的，这时就要用到字典的嵌套，将<code>value</code>换成字典类型</p>
<p>嵌套字典例子</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ringo_score = &#123;<span class="string">&quot;chinese&quot;</span>: <span class="number">77</span>, <span class="string">&quot;math&quot;</span>: <span class="number">66</span>, <span class="string">&quot;english&quot;</span>: <span class="number">33</span>&#125;</span><br><span class="line">jack_score = &#123;<span class="string">&quot;chinese&quot;</span>: <span class="number">88</span>, <span class="string">&quot;math&quot;</span>: <span class="number">86</span>, <span class="string">&quot;english&quot;</span>: <span class="number">35</span>&#125;</span><br><span class="line">luka_score = &#123;<span class="string">&quot;chinese&quot;</span>: <span class="number">99</span>, <span class="string">&quot;math&quot;</span>: <span class="number">96</span>, <span class="string">&quot;english&quot;</span>: <span class="number">66</span>&#125;</span><br><span class="line"></span><br><span class="line">name = &#123;<span class="string">&quot;ringo&quot;</span>: ringo_score, <span class="string">&quot;jack&quot;</span>: jack_score, <span class="string">&quot;luka&quot;</span>: luka_score&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name[<span class="string">&quot;ringo&quot;</span>][<span class="string">&quot;chinese&quot;</span>])</span><br></pre></td></tr></table></figure>
<h2 id="字典的常用操作">字典的常用操作</h2>
<h3 id="新增元素">新增元素</h3>
<p>​
语法：<code>字典[key] = value</code>，这里的<code>key</code>是原来的字典中没有的，结果是字典被修改，添加了新的键值对</p>
<h3 id="更新元素">更新元素</h3>
<p>​
语法：<code>字典[key] = value</code>，这里的<code>key</code>是原来就存在的，结果是字典被修改，更新了这个<code>key</code>所对应的<code>value</code></p>
<h3 id="删除元素">删除元素</h3>
<p>​
语法：<code>字典.pop（key）</code>，这个方法返回<code>key</code>所对应的<code>value</code>，并删除对应的键值对</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">jack_score = &#123;<span class="string">&quot;chinese&quot;</span>: <span class="number">88</span>, <span class="string">&quot;math&quot;</span>: <span class="number">86</span>, <span class="string">&quot;english&quot;</span>: <span class="number">35</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(jack_score.pop(<span class="string">&quot;chinese&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(jack_score)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">88</span></span><br><span class="line"><span class="string">&#123;&#x27;math&#x27;: 86, &#x27;english&#x27;: 35&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>​
语法：<code>del 字典[key]</code>，删除字典中<code>key</code>对应的<code>key</code>和<code>value</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">jack_score = &#123;<span class="string">&quot;chinese&quot;</span>: <span class="number">88</span>, <span class="string">&quot;math&quot;</span>: <span class="number">86</span>, <span class="string">&quot;english&quot;</span>: <span class="number">35</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> jack_score[<span class="string">&quot;chinese&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(jack_score)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&#123;&#x27;math&#x27;: 86, &#x27;english&#x27;: 35&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="清空元素">清空元素</h3>
<p>​ 语法：<code>字典.clear（）</code>，这个方法清空字典中的所有元素</p>
<h3 id="获取全部元素的key">获取全部元素的key</h3>
<p>​
语法：<code>字典.keys（</code>），这个方法返回一个<code>&lt;class 'dict_keys'&gt;</code>类型的数据，这个数据中包含了表层字典的所有<code>key</code>（这种类型可以通过<code>list（）</code>转化为列表类型）</p>
<h3 id="遍历字典">遍历字典</h3>
<p>​
方法一、通过字典<code>.keys（）</code>的方法取出字典中的所有<code>key</code>，再通过<code>for</code>循环，遍历所有<code>key</code>对应的<code>value</code></p>
<p>​
方法二、直接通过<code>for</code>循环来遍历字典，临时变量依次读取的就是字典中<code>key</code>，可以通过这些<code>key</code>找到相应的<code>value</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ringo_score = &#123;<span class="string">&quot;chinese&quot;</span>: <span class="number">77</span>, <span class="string">&quot;math&quot;</span>: <span class="number">66</span>, <span class="string">&quot;english&quot;</span>: <span class="number">33</span>&#125;</span><br><span class="line">keys = ringo_score.keys()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> keys:</span><br><span class="line"><span class="built_in">print</span>(ringo_score[x])</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ringo_score: <span class="comment">#for循环遍历字典只取key</span></span><br><span class="line"><span class="built_in">print</span>(ringo_score[x]) <span class="comment">#输出：两个for循环输出的内容相同</span></span><br></pre></td></tr></table></figure>
<p>​ 字典一般不用<code>while</code>循环，因为它不支持下标索引</p>
<h3 id="统计字典内元素的数量">统计字典内元素的数量</h3>
<p>​ 语法：<code>len（字典）</code></p>
<h3 id="将字典的键值对转换为数据容器">将字典的键值对转换为数据容器</h3>
<p>首先将字典的<code>.items()</code>方法，将字典转换为<code>dict_items</code>类型</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&quot;2&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">dict_items = d.items()</span><br><span class="line"><span class="built_in">print</span>(dict_items)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(dict_items))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">dict_items([(&#x27;1&#x27;, 1), (&#x27;2&#x27;, 2)])</span></span><br><span class="line"><span class="string">&lt;class &#x27;dict_items&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>接着可以将<code>dict_items</code>类型转化为元素为元组的数据容器类型</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&#x27;1&#x27;</span>: <span class="number">1</span>, <span class="string">&quot;2&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line">dict_items = d.items()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(dict_items))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(dict_items))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">set</span>(dict_items))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">((&#x27;1&#x27;, 1), (&#x27;2&#x27;, 2))</span></span><br><span class="line"><span class="string">[(&#x27;1&#x27;, 1), (&#x27;2&#x27;, 2)]</span></span><br><span class="line"><span class="string">&#123;(&#x27;2&#x27;, 2), (&#x27;1&#x27;, 1)&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="查找字典并返回特定值">查找字典并返回特定值</h3>
<p>查找字典中有无对应的<code>key</code>，若有，则返回<code>key</code>对应的<code>value</code>，若无则返回默认值<code>None</code>或特定值</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>.get(key, default=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">person = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;暂无信息&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&#x27;name&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;暂无信息&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(person.get(<span class="string">&#x27;gender&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">张三</span></span><br><span class="line"><span class="string">张三</span></span><br><span class="line"><span class="string">暂无信息</span></span><br><span class="line"><span class="string">None</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2
id="五类数据容器的总结对比liststrtuplesetdict">五类数据容器的总结对比（list、str，tuple，set，dict）</h2>
<p>​ 1、是否支持下标索引：</p>
<p>​ 支持：<code>list</code>，<code>str</code>，<code>tuple</code>
——序列类型</p>
<p>​ 不支持：<code>set</code>，<code>dict</code> ——非序列类型</p>
<p>​ 2、是否支持重复元素</p>
<p>​ 支持：<code>list</code>，<code>str</code>，<code>tuple</code>
——序列类型</p>
<p>​ 不支持：<code>set</code>，<code>dict</code> ——非序列类型</p>
<p>​ 3、是否可以修改</p>
<p>​ 支持：<code>list</code>、<code>set</code>、<code>dict</code></p>
<p>​ 不支持：<code>str</code>、<code>tuple</code></p>
<p>4、</p>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 20%" />
<col style="width: 23%" />
<col style="width: 10%" />
<col style="width: 5%" />
<col style="width: 34%" />
</colgroup>
<thead>
<tr class="header">
<th></th>
<th><code>list</code></th>
<th><code>tuple</code></th>
<th><code>str</code></th>
<th><code>set</code></th>
<th><code>dict</code></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>元素数量</td>
<td>支持多个</td>
<td>支持多个</td>
<td>支持多个</td>
<td>支持多个</td>
<td>支持多个</td>
</tr>
<tr class="even">
<td>元素类型</td>
<td>任意</td>
<td>任意</td>
<td>仅字符</td>
<td>任意</td>
<td><code>value</code>可以为任意类型，<code>key</code>为除<code>dict</code>外任意类型</td>
</tr>
<tr class="odd">
<td>下表索引</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr class="even">
<td>重复元素</td>
<td>支持</td>
<td>支持</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
</tr>
<tr class="odd">
<td>可修改性</td>
<td>支持</td>
<td>不支持</td>
<td>不支持</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr class="even">
<td>数据有序</td>
<td>是</td>
<td>是</td>
<td>是</td>
<td>否</td>
<td>否</td>
</tr>
<tr class="odd">
<td>使用场景</td>
<td>可修改、可重复的数据记录场景</td>
<td>不可修改、不可重复的数据记录场景</td>
<td>字符串记录场景</td>
<td>不可重复</td>
<td>以key检索value场景</td>
</tr>
</tbody>
</table>
<h2 id="数据容器的通用操作">数据容器的通用操作</h2>
<p>​ 1、数据容器的遍历</p>
<p>​ 1）5种数据容器都支持<code>for</code>循环遍历</p>
<p>​
2）<code>list</code>、<code>tuple</code>、<code>str</code>支持<code>while</code>循环遍历，而<code>set</code>和<code>dict</code>不支持<code>while</code>循环遍历，因为他们没法进行下标索引</p>
<p>​ 2、数据容器的通用函数</p>
<p>​ 1）统计元素个数：<code>len（）</code></p>
<p>​ 2）统计容器中的最大元素：<code>max（）</code></p>
<p>​ 若括号内为字典，则比较的是字典的<code>key</code></p>
<p>​ 3）统计容器中的最小元素：<code>min（）</code></p>
<p>​ 若括号内为字典，则比较的是字典的<code>key</code></p>
<p>​ #快捷键多光标修改：shift+alt+鼠标左键拖动，可用于多行的修改</p>
<p>​ 4)将给定容器转化为列表：l<code>ist（）</code></p>
<p>字符串转列表是将字符串的每个元素取出，作为列表的元素。字典转列表则是将字典的key取出作为列表的元素</p>
<p>​ 5）将给定容器转化为字符串：<code>str（）</code></p>
<p>​
数据容器转换成字符串形式，输出的形式和没有转换之前一样，但是实际上他们已经转换成字符串类型了，比如说
​
<code>a = str([1,2])</code>,如果打印出来<code>a</code>仍任然是<code>[1,2]</code>，但实际上<code>a</code>的字面量是<code>“[1,2]”</code>,变成了字符串的类型。</p>
<p>​
将字典转化为str,字典中的key和value都可以保存下来，但是也变成了字符串的形式</p>
<p>​ 6）将给定容器转化为元组：<code>tuple（）</code></p>
<p>​
字符串转列表是将字符串的每个元素取出，作为列表的元素。字典转列表则是将字典的<code>key</code>取出作为列表的元素</p>
<p>​ 7）将给定容器转化为集合：<code>set（）</code></p>
<p>​
数据容器转集合有去重的功能，且顺序可能被打乱。字典转字符串只是将字典的<code>key</code>取出作为集合的元素</p>
<p><code>注：不能将其他数据容器转字典。因为字典需要键值对。而字典可以转其他数据容器，除</code>str<code>转化外，其他转化都会使字典丢失value</code></p>
<p>​
8）通用排序功能：<code>sorted（容器， reverse=Ture或False）</code></p>
<p>​ 将数据容器按从小到大或从大到小的顺序进行排列，并返回列表。</p>
<p>​
<code>reverse</code>默认为<code>False</code>，表示数据从小到大排列返回列表。
​若<code>reverse=True</code>，表示数据从大到小排列返回列表。</p>
<h2 id="字符串的大小比较">字符串的大小比较</h2>
<p>​
字符串大小比较是从左到右按位，用<code>ASCII</code>码进行的，只要有相应位置的单个字符<code>ASCII</code>码的值更大，那么这个字符串就更大，若相应位置的单个字符<code>ASCII</code>码的值
相等，那么就比较下一位，且有字符的比没字符的<code>ASCII</code>码的值要大</p>
<p>​
比如：比较字符串<code>“abc”</code>和<code>“abd”</code>，先比较<code>a</code>，<code>a</code>相等，再比较<code>b</code>，<code>b</code>相等，再比较<code>c</code>与<code>d</code>，<code>d</code>的<code>ascii</code>码的值更大，所以<code>“abd“</code>大于<code>”abc“</code></p>
<p>比较字符串<code>”ab“</code>和<code>”a“</code>，先比较<code>a</code>，<code>a</code>相等。在比较下一位，而后者无下一位，前者下一位为<code>b</code>，所以<code>”ab“</code>大于<code>”a“</code></p>
<p>​ 常见的<code>ASCII</code>的值：0-9的<code>ASCII码</code>的值为：48-57
​A-Z的<code>ASCII</code>码的值为：65-90 ​
a-z的的<code>ASCII</code>码的值为：97-122</p>
<h2 id="列表的大小比较">列表的大小比较</h2>
<ul>
<li>列表的大小比较是按照顺序来的，若有两个列表：</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">list2 = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1 &gt; list2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>首先比较两个列表的下表索引为0的，比较两个元素的<code>ASCII</code>码，有规律：0～9　&lt;　A～Z　&lt;　a～z。空（null）的ASCII码为0，若第一个元素比较出结果，那么直接就会输出布尔值，若相同，那么就进行下一位的比较。</p>
<ul>
<li><p>比较元素的类型应相同：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">list2 = [<span class="string">&quot;a&quot;</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1 &gt; list2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">TypeError: &#x27;&gt;&#x27; not supported between instances of &#x27;int&#x27; and &#x27;str&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>同理：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, [<span class="number">8</span>, <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1 &gt; list2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">TypeError: &#x27;&gt;&#x27; not supported between instances of &#x27;int&#x27; and &#x27;str&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="chr和ord函数">chr()和ord()函数</h2>
<h3 id="chr函数">chr()函数</h3>
<p>chr()接受一个整数作为参数，并返回与该整数对应的ASCII字符或Unicode字符。这个整数通常被称为ASCII码值或Unicode码值。</p>
<p>ASCII码值详细请跳转<a href="#ascii编码表格">ASCII编码表格</a></p>
<blockquote>
<p>Unicode编码包括ASCII编码</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(<span class="built_in">chr</span>(<span class="number">65</span>)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">66</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">9142</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;str&#x27;&gt;</span></span><br><span class="line"><span class="string">B</span></span><br><span class="line"><span class="string">⎶</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="ord函数">ord()函数</h3>
<p>ord() 函数是 chr() 函数（对于8位的ASCII字符串）或 unichr()
函数（对于Unicode对象）的配对函数，它以一个字符（<strong>长度为1</strong>的字符串）作为参数，返回对应的
ASCII 数值，或者 Unicode 数值，如果所给的 Unicode 字符超出了你的
Python定义范围，则会引发一个 <code>TypeError</code>的异常</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ord</span>(c)</span><br><span class="line"><span class="comment"># c为长度为1的字符</span></span><br></pre></td></tr></table></figure>
<hr />
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&quot;1&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&quot;6&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&quot;⎶&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">49</span></span><br><span class="line"><span class="string">54</span></span><br><span class="line"><span class="string">9142</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="complex函数">complex函数</h2>
<p>complex函数用于创建一个复数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">complex</span>(r, i)</span><br><span class="line"><span class="comment"># a = r + i*1j其中i可省略</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">complex</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">b = <span class="built_in">complex</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a, b)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(1+2j) (2+0j)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="数据容器的解包操作">数据容器的解包操作</h2>
<p>解包就是一次性拆开数据容器，将其中的内容一次赋值给多个变量</p>
<p>例如有一个元组，我们的目标是将元组中的元组赋值给其他变量，我们可能会进行以下操作：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">a = tup[<span class="number">0</span>]</span><br><span class="line">b = tup[<span class="number">1</span>]</span><br><span class="line">c = tup[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1 2 3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>若元素个数过多，这种方法就不合适了</p>
<h3 id="列表元组的解包">列表/元组的解包</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = (元素<span class="number">1</span>, 元素<span class="number">2</span>, ..., 元素n)</span><br><span class="line"><span class="comment">## list = [元素1, 元素2, ..., 元素n]</span></span><br><span class="line">变量<span class="number">1</span>, 变量<span class="number">2</span>, ..., 变量n = <span class="built_in">tuple</span></span><br><span class="line"><span class="comment">## 变量1, 变量2, ..., 变量n = list</span></span><br><span class="line"><span class="comment">## 将tuple中的元素一一对应赋值给变量i</span></span><br><span class="line"><span class="comment">## 将list中的元素一一对应赋值给变量i</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">a, b, c = tup</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">lis = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">a, b, c = lis</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1 2 3</span></span><br><span class="line"><span class="string">----------------</span></span><br><span class="line"><span class="string">4 5 6</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="列表元组解包为函数的位置参数">列表/元组解包为函数的位置参数</h4>
<p>若需要将列表/元组中的元素提取出，通过函数进行批量处理，这时可以用到列表/元组的解包，让各个元素按照顺序变为函数的位置参数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">形式参数<span class="number">1</span>, 形式参数<span class="number">2</span>, ..., 形式参数n</span>)</span><br><span class="line">	函数体</span><br><span class="line">    [<span class="keyword">return</span> 返回值]</span><br><span class="line"></span><br><span class="line"><span class="comment">## 以列表为例，元组同理</span></span><br><span class="line"><span class="built_in">list</span> = [元素<span class="number">1</span>, 元素<span class="number">2</span>, ..., 元素n]</span><br><span class="line">函数名(*<span class="built_in">list</span>) <span class="comment"># 一个*将元组或列表解包，让list中的按顺序作为位置参数</span></span><br><span class="line"><span class="comment">## 相当于函数名(形式参数1=元素1,形式参数2=元素2, ..., 形式参数n=元素n)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lis = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>):</span><br><span class="line">    <span class="keyword">return</span> a+b+c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(*lis))  <span class="comment"># 将列表解包，按照顺序传参传入函数：a=4,b=5,c=6</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">15</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="字典的解包">字典的解包</h3>
<p>字典的解包含义和列表/元组类似，但是字典解包只能解它的Keys</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;key1: value1,key2: value2, ..., keyn: valuen &#125;</span><br><span class="line">变量<span class="number">1</span>, 变量<span class="number">2</span>, ..., 变量n = <span class="built_in">dict</span></span><br><span class="line"><span class="comment">## 将dict中对应键值对的keyi赋值给变量i</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&quot;chinese&quot;</span>: <span class="number">77</span>, <span class="string">&quot;math&quot;</span>: <span class="number">66</span>, <span class="string">&quot;english&quot;</span>: <span class="number">33</span>&#125;</span><br><span class="line"></span><br><span class="line">a, b, c = dic</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">chinese math english</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="字典解包为函数的关键字参数">字典解包为函数的关键字参数</h4>
<p>有时需要字典中的键值对作为函数的参数输入，简单一点可以先将字典中的元素取出后输入进行函数，若利用字典的解包，输入更为方便</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">形式参数<span class="number">1</span>, 形式参数<span class="number">2</span>, ..., 形式参数n</span>)</span><br><span class="line">	函数体</span><br><span class="line">    [<span class="keyword">return</span> 返回值]</span><br><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = &#123;key1: value1,key2: value2, ..., keyn: valuen&#125;</span><br><span class="line">函数名(**<span class="built_in">dict</span>) </span><br><span class="line"><span class="comment">## 两个*将字典解包，让dict中的键值对当作关键字参数传给函数，要求字典中的key都是字符串类型，且与fun中的形式参数名字相同</span></span><br><span class="line"><span class="comment">## 相当于函数名(key1=value1,key2=value2, ..., keyn=valuen)</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&quot;LML&quot;</span>, <span class="string">&quot;Greeting&quot;</span>: <span class="string">&#x27;Hello&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">name, Greeting</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>,<span class="subst">&#123;Greeting&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">fun(**dic)</span><br><span class="line"><span class="comment">## 相当于：fun(name=&quot;LML&quot;, Greeting=&quot;Hello&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">LML,Hello</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="函数的多个返回值">函数的多个返回值</h2>
<p>​ 1、有时候函数需要不止一个返回值，这个时候就需要用到多个返回值</p>
<p>​ 语法：<code>def 函数名（形式参数</code>）：</p>
<p>​ <code>函数体</code></p>
<p>​ <code>return 返回值1， 返回值2， ... ， 返回值n</code></p>
<blockquote>
<p>​
注：返回值的类型是不受限制的。若有多个返回值那么会被打包为一个元组</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    c = <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> a, b, c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(test()))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>添加中括号之后返回为一个列表</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    c = <span class="number">3</span></span><br><span class="line">    <span class="keyword">return</span> [a, b, c]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(test()))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>返回一个字典</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    dic = &#123;<span class="string">&quot;chinese&quot;</span>: <span class="number">77</span>, <span class="string">&quot;math&quot;</span>: <span class="number">66</span>, <span class="string">&quot;english&quot;</span>: <span class="number">33</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> dic</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(fun()))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;dict&#x27;&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>​ 2、返回值的接收</p>
<p>​ 返回值需要用变量接收</p>
<p>​
语法：<code>变量1， 变量2， ... ， 变量n = 函数名（形式参数）</code></p>
<p>​ 将返回值i赋予变量<code>i（i = 1，2...n）</code></p>
<h2 id="函数的多种传参方式">函数的多种传参方式</h2>
<p>​ 1、位置参数</p>
<p>​ 调用函数时依据函数定义的参数位置来传递参数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>， <span class="number">2</span>， <span class="number">3</span>)  <span class="comment">#依据实际参数的摆放位置，将实际参数传给相对应的位置参数</span></span><br></pre></td></tr></table></figure>
<p>​ 2、关键字参数</p>
<p>​ 调用函数时通过”形式参数 = 实际参数“的形式将实际参数传如函数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line">test(x=<span class="number">1</span>, y=<span class="number">2</span>, z=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>​ 1）摆放的顺序可以与函数中的传入参数的顺序不同</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line">test(y=<span class="number">2</span>, x=<span class="number">1</span>, z=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>​
2)可以与位置参数一起使用，但是要注意位置参数不能用在关键字参数之后</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>, y=<span class="number">2</span>, z=<span class="number">3</span>)</span><br><span class="line"><span class="comment">## 错误示范：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">x, y, z</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line">test(x=<span class="number">1</span>, <span class="number">2</span>, z=<span class="number">3</span>)   <span class="comment">#位置参数不能用在关键字参数之后，报错positional argument follows keyword argument</span></span><br></pre></td></tr></table></figure>
<p>​ 3、缺省参数（默认参数）</p>
<p>​
在确定函数的形式参数的时候，可以给形式参数一个默认的值，若在传入参数的时候没有更新该参数的值，那么就会用指定的默认值</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">x, y, z=<span class="number">0</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(z)</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">#输出120</span></span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>, z=<span class="number">2</span>)<span class="comment">#输出122</span></span><br></pre></td></tr></table></figure>
<p>​ 形式参数定义的默认值要放在传入参数的最后一个，否则会报错</p>
<p>错误示范：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">x, y=<span class="number">0</span>, z</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="built_in">print</span>(z) <span class="comment">#报错non-default argument follows default argument</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：默认参数如果被赋值给可变对象（<code>mutable object</code>）时，默认参数只会被定义一次</p>
<p>eg1</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>(<span class="params">x, result=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span>):</span><br><span class="line">    result.append(x)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f1(<span class="string">&quot;e&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(f1(<span class="string">&quot;f&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(f1(<span class="string">&quot;g&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>从上面的例子中可以看出，不断地调用<code>f1</code>函数并没有一直让参数<code>result=['a', 'b', 'c', 'd']</code>,在后续的调用中，<code>result</code>的参数值已经随着第一次调用后改变了。</p>
<p>eg2</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, result=[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span>):  <span class="comment"># 这里会有报异常：Default argument value is mutable</span></span><br><span class="line">    <span class="keyword">if</span> x:</span><br><span class="line">        result.remove(x[-<span class="number">1</span>])</span><br><span class="line">        f(x[:-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">L = <span class="string">&#x27;abcd&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(f(L))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>从例子二中也可以看出：函数是不断地重复调用它自己</p>
<blockquote>
<ul>
<li>第一次输入<code>x='abcd'</code>，默认<code>result=['a', 'b', 'c', 'd']</code>，在<code>result</code>中移除<code>‘d’</code></li>
<li>第二次调用输入<code>x='abc'</code>，<code>result</code>不会再次被默认值定义，这时<code>result=['a', 'b', 'c']</code>，程序进行移除<code>result</code>中的<code>x[-1]='c'</code></li>
<li>程序一直重复，最终全部删除<code>result</code>中的元素，返回<code>result</code>这个空列表</li>
</ul>
</blockquote>
</blockquote>
<p>4、不定长参数（可变参数）</p>
<p>​
不定长参数（可变参数）用于不确定调用的时候会传递多少个（0个也可以）参数的场景
​1）位置不定长传递</p>
<p>​
在定义函数的时候，形式参数用<code>*args</code>(规范用<code>args</code>，用其他也可以)，在调用函数的时候，可以添加任意个实际参数，这些参数会按照顺序被存储在一个叫<code>args</code>的元组之中</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>)  <span class="comment">#输出：(1, 2, 5)</span></span><br></pre></td></tr></table></figure>
<p>​ 2）关键字不定长传递</p>
<p>​
在定义函数的时候，形式参数用<code>kwargs</code>(规范用<code>kwargs</code>，用其他也可以)，在调用函数的时候，实际参数要写成
<code>变量名=变量值</code>
的形式（和键值对有点类似，但是这里的键只能写变量名），用逗号隔开。这些参数会被存储在一个叫<code>kwargs</code>的字典之中</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"></span><br><span class="line">test(a=<span class="number">5</span>, c=<span class="number">7</span>, d=<span class="number">9</span>)   <span class="comment">#输出：&#123;&#x27;a&#x27;: 5, &#x27;c&#x27;: 7, &#x27;d&#x27;: 9&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="函数作为参数传递">函数作为参数传递</h2>
<p>​
函数作为参数传递指的是<code>a</code>函数的传入参数为<code>b</code>函数，在<code>a</code>函数体内需要<code>b</code>函数进行一系列的操作，最终返回函数<code>a</code>的结果，实际上是传递一种函数<code>b</code>的逻辑。</p>
<p>​
函数或者函数的嵌套需要的还是传入的数据，而函数作为参数的传递，传递的是一种逻辑而非数据</p>
<p>例如</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">c</span>):</span><br><span class="line">    result = c(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    <span class="comment">#如果在这里加上一句print(type(c))，那么会输出为&lt;class &#x27;function&#x27;&gt;类型，即函数b的类型</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">a(b)   <span class="comment">#输出3</span></span><br></pre></td></tr></table></figure>
<p>在这里，<code>x</code>、<code>y</code>和<code>c</code>为形式参数，<code>b</code>为传入函数<code>a</code>的实际参数，函数<code>a</code>中用实际参数（函数）<code>b</code>替换形式参数<code>c</code>。这里写成在函数体中写成<code>result = c(1,2)</code>,并无报错</p>
<h2 id="lambda匿名函数">lambda匿名函数</h2>
<p><code>def</code>定义参数时，定义的参数可以重复使用。若要一次性使用一个函数（为了不定义那么多函数，使程序更加简洁），这时可用匿名函数</p>
<p>​
语法：<code>lambda 传入参数（用逗号隔开）：函数体</code>（只能一行，多行报错）</p>
<p><code>**注：lambda函数直接将结果return**</code></p>
<p>例子</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">compute</span>):</span><br><span class="line">    result = compute(<span class="number">5</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">test(<span class="keyword">lambda</span> x, y: x+y)<span class="comment">#输出7，这里test函数需要传入一个compute函数，而compute函数的定义又lambda函数来一次性定义，传入两个参数进行加和计算</span></span><br></pre></td></tr></table></figure>
<h2 id="文件编码">文件编码</h2>
<p>​
电脑中存储的文本是将我们能够识别的文字，通过不同的编码规则转换（<code>UTF-8</code>，<code>GBK</code>（古早中文）。<code>Big5</code>（繁体）等）为二进制数据（0&amp;1）存储在电脑中，</p>
<p>​ 要读取时再用同样的编码规则再反向转换为可以识别的文字</p>
<h2 id="文件操作">文件操作</h2>
<h3 id="文件的读取操作">文件的读取操作</h3>
<h4 id="打开文件创建一个新文件">打开文件/创建一个新文件</h4>
<p>​ <code>open（）</code>函数</p>
<p>​ 语法：<code>open(name,mode,encoding="编码")</code></p>
<p>​
<code>name</code>:要打开的目标文件名的字符串（可以包含文件所在的路径），若不给路径，那么表示文件和代码在同一层级</p>
<p>​
<code>mode</code>：设置打开文件的模式：只读<code>‘r’</code>（默认模式）、写入(覆盖)<code>‘w’</code>和追加<code>‘a’</code>，写入（不覆盖）<code>'x'</code>和以二进制打开<code>‘b’</code>等</p>
<p>​
写入模式指的是打开一个文件进行写入，如果这个文件中已有内容，那么原有的内容就会被删除，重新写入。如果文件不存在，那么就会创建新的文件</p>
<p>​
追加模式：若文件存在，新内容会被写在已有的内容之后。若文件不存在，创建新文件写入。
​<code>encoding：编码格式</code>（UTF-8等）</p>
<blockquote>
<p>​ 注：1、打开的文件一般用名为f的文件对象去接收</p>
<p>​
2、<code>open</code>函数用了位置传参和关键字传参。这里不能<code>encoding</code>也用位置传参，因为<code>open</code>函数中不是只有<code>name`` mode</code>
和<code>encoding</code>三个参数</p>
<p>​
3、注意<code>name</code>，如果是地址就要用引号，是接受文件的变量就不用</p>
</blockquote>
<h4 id="文件对象的读取操作方法">文件对象的读取操作方法</h4>
<p>​ 文件对象.方法（）</p>
<p>​ 1、<code>read（num）</code>方法</p>
<p>​
表示在文件对象中读取<code>num</code>个字节的数据，如果没有<code>num</code>，那么就读取全部的数据</p>
<p>​
注：若多次调用<code>read</code>方法，那么<code>read</code>会在上一个<code>read</code>（或<code>readlines</code>）处继续读取
​2、<code>readlines()</code>方法</p>
<p>​
可以按照行的方式把这个文件中的内容一次性读取，封装到一个列表里，每一行的数据为一个元素</p>
<p>​
注：若多次调用<code>readlines</code>方法，那么<code>readlines</code>会在上一个<code>readlines</code>(或<code>read</code>)处继续读取
​3、<code>readline（）</code>方法</p>
<p>​
与<code>readlines</code>不同的是，<code>readline</code>运行一次是只读取一行的方法，返回一个字符串。其也受<code>read</code>、<code>readlines</code>指针位置变化的影响</p>
<p>​ 4、<code>for</code>循环读取文件的行</p>
<p>​ 语法:for 临时变量 in open（“文件名”， “mode”）</p>
<p>​ print（临时变量）</p>
<blockquote>
<p>​ 注：此方法也受<code>read</code>指针位置的影响</p>
<p>​ 临时变量为字符串类型,一行一个循环</p>
</blockquote>
<p>​ 5、关闭文件对象</p>
<p>​
为什么要关闭文件，因为在<code>python</code>程序的运行中，程序会一直占用文件，不能对文件进行操作</p>
<p>​ 语法：<code>文件对象.close（）</code></p>
<p>​ 6、<code>with open(name,mode,encoding="编码")</code> as
<code>文件对象</code>：</p>
<p>​
这个语法可以正常生成文件对象，在程序运行完毕之后客户以自动关闭文件，不用进行<code>文件对象.close</code>的操作</p>
<h3 id="文件的写操作">文件的写操作</h3>
<p>​ 语法：<code>f = open(name,“w”,encoding="编码")</code></p>
<p>​ <code>f.write(需要写入的内容)</code></p>
<p>​ <code>f.close（）/f.flush()</code></p>
<blockquote>
<p>​
注：1、写入模式指的是打开一个文件进行写入，如果这个文件中已有内容，那么原有的内容就会被删除，重新写入。如果文件不存在，那么就会创建新的文件</p>
<p>​
2、如果写入操作的结尾没有<code>f.close（）/f.flush()</code>，那么被写入的内容会一直存在于内存中的缓冲区中，直到遇见<code>f.close（）/f.flush()</code>，才会写入硬盘</p>
<p>​ 3、<code>close</code>方法内置了<code>flush</code>刷新</p>
</blockquote>
<h3 id="文件的追加操作">文件的追加操作</h3>
<p>​ 语法：<code>f = open(name,“a”,encoding="编码")</code></p>
<p>​ <code>f.write(需要写入的内容)</code></p>
<p>​ <code>f.close（）/f.flush()</code></p>
<blockquote>
<p>​
注：1、若文件存在，新内容会被写在已有的内容之后。若文件不存在，创建新文件写入。</p>
<p>​ 2、其余操作和写入操作类似</p>
<p>​ 3、追加内容换行可以用<code>\n</code></p>
</blockquote>
<h3 id="文件的创建写操作">文件的创建写操作</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(name,“x”,encoding=<span class="string">&quot;编码&quot;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若文件不存在，创建文件，若文件存在，报错：<code>FileExistsError</code></p>
</blockquote>
<h2 id="了解异常">了解异常</h2>
<p>​
异常就称为bug，表现为解释器不能进行程序的运行，会提示程序错误的类型和程序错误的位置</p>
<h2 id="捕获异常">捕获异常</h2>
<p>​ 异常分为两种情况：</p>
<p>1、bug使程序停止运行 ​<br />
2、出现bug的提醒，文件依然继续运行</p>
<p>​
捕获异常的作用在于尽量避免第一种情况的出现，如果有bug出现，我们可以有后续的手段进行处理</p>
<p>​ 语法：</p>
<p>​ <code>try:</code></p>
<p>​ 可能发生错误的代码</p>
<p>​ <code>except：</code></p>
<p>​ 如果出现bug所要执行的代码</p>
<p>例如</p>
<p><code>try：</code></p>
<p>​ 以只读模式打开一个文本文件（该文本文件并不存在，出现bug）</p>
<p><code>except：</code></p>
<p>​ 以写入模式打开一个文件（创建了一个新的文本文件）</p>
<p>注：这里<code>except</code>可能会出现波浪线，因为没有说明可能出现异常的类型</p>
<p>​ 2、捕获指定的异常</p>
<p>​ 语法：<code>try:</code></p>
<p>​ 可能发生错误的代码</p>
<p>​ <code>except 异常的类型 （as 变量）：</code></p>
<p>​ 如果出现bug所要执行的代码</p>
<p>​
这样就能捕获对应类型的异常，还可以把异常的说明赋给一个变量，将这个变量打印出来就可以知道异常的信息</p>
<p>​ 3、捕获多个异常</p>
<p>​ 语法：<code>try:</code></p>
<p>​ 可能发生错误的代码</p>
<p>​ <code>except （异常的类型1，异常的类型2，异常的类型3..）</code> as
<code>变量</code>：</p>
<p>​ 如果出现bug所要执行的代码</p>
<p>​ 注：（异常的类型1，异常的类型2，异常的类型3..）为元组</p>
<p>​ 4、捕获所有的异常</p>
<p>​ 语法：<code>try:</code></p>
<p>​ 可能发生错误的代码</p>
<p>​ <code>except Exception （as 变量）：</code></p>
<p>​ 如果出现bug所要执行的代码</p>
<p>​ 注：这种写法与</p>
<p>​ <code>try:</code></p>
<p>​ 可能发生错误的代码</p>
<p>​ <code>except：</code></p>
<p>​ 如果出现bug所要执行的代码</p>
<p>​ 效果相同，但不会再<code>except</code>下出现波浪线</p>
<p>​ 5、异常的<code>else</code></p>
<p>​ 语法try:</p>
<p>​ 可能发生错误的代码</p>
<p>​ <code>except Exception （as 变量）：</code></p>
<p>​ 如果出现bug所要执行的代码</p>
<p><code>else：</code></p>
<p>​ 如果没有异常，需要执行的代码</p>
<p>​
注：如果<code>try</code>中的代码没有异常。那么<code>else</code>中的代码会一起运行</p>
<p>​ 6、异常的<code>finally</code></p>
<p>​ 语法<code>try:</code></p>
<p>​ 可能发生错误的代码</p>
<p>​ <code>except Exception （as 变量）：</code></p>
<p>​ 如果出现bug所要执行的代码</p>
<p>​ <code>else：</code></p>
<p>​ 如果没有异常，需要执行的代码</p>
<p>​ <code>finally：</code></p>
<p>​ 不管有没有异常，都需要执行的代码</p>
<p>​
注：1、<code>finally</code>为不管程序有没有异常，都需要执行的代码，通常用于关闭或刷新文件</p>
<p>​ 2、<code>else</code>和<code>finally</code>可写可不写</p>
<p>​
3、注意<code>finally</code>下的语句也可能会出现异常，因为在一般情况下<code>finally</code>下的语句一般是对文件对象进行操作，如果不是文件对象，那么finally就会出错,可以在函数前先定义<code>f = None</code>，如果在令<code>f = open（）</code>的一系列操作中，没有使得f变成文件对象，那么<code>f</code>还是<code>None</code>，这时就可以在<code>finally</code>中用<code>if</code>对<code>f</code>进行判断（这种文件对象不存在的情况只会在读取模式中遇到，而追加或者写入模式如遇到不存在的文件会自动进行创建）</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">f = <span class="literal">None</span></span><br><span class="line">f = <span class="built_in">open</span>(...)</span><br><span class="line"><span class="keyword">if</span> f:</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="comment">#若打开文件失败，那么f仍未None，即为False，若f中有内容，那么f就不为False，if下的语句就可以被激活,如果f为文件对象，那么f就不为None，</span></span><br><span class="line">    那么<span class="keyword">if</span>下面的语句就可以执行</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;文件异常&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="异常的传递">异常的传递</h2>
<p>例子</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    a = <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fun1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>():</span><br><span class="line">    fun1()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fun2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    fun2()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">        <span class="comment">#出现除零异常，其中main、fun2函数都无异常，而fun1函数有异常，又main函数调用了fun2，fun2函数调用了fun1，所以最终会出现异常</span></span><br><span class="line">        <span class="comment">#若将mian函数改为</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fun2()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure>
<p>那么会显示除零异常，说明在有函数调用的情况下进行异常的捕获时不需要在低层级就进行捕获的，可以在高层级的函数中进行异常的捕获</p>
<h2 id="python模块">python模块</h2>
<p>​
模块就是一个<code>python</code>文件，里面有类、函数变量等，可以导入进来直接使用其功能</p>
<p>​
语法：<code>[from 模块名] import [模块|类|变量|函数|*] [as 别名]</code> ​
注：1、<code>[ ]</code>表示其中的内容可省略</p>
<p>​ 2、*表示导入模块中的所有内容</p>
<p>​ 3、模块导入一般写在程序的开头位置</p>
<p>​
4、导包快捷键：<code>alt+enter</code>，可以快速搜索导包，且会自动在程序上方添加导包语句</p>
<p>​ 1、<code>import模块名</code></p>
<p>​ 语法：<code>import 模块名</code></p>
<p>​ <code>import 模块名1,模块名2，...</code></p>
<p>​ <code>模块名.功能名</code></p>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;wait 5s&quot;</span>)</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">其中time属于python内置的模块，而time模块的内置函数中有sleep，可以用模块名.功能名进行使用，要查看time模块的py文件，按住ctrl再鼠标左键点击time即可进入time模块的py文件</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>​ 2、<code>from</code> 模块名 <code>import</code> 功能名</p>
<p>​ <code>功能名()</code></p>
<p>​ 这样的方法可以具体导入模块中的某个功能，只能使用模块中的某个功能</p>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>​ 3、使用<code>*</code>导入模块中的所有功能</p>
<p>​ 语法：<code>from time import *</code></p>
<p>​ <code>功能（）</code></p>
<p>​
注：这种方法和<code>import</code>模块名的作用相同，但是调用模块的功能时，使用的语法不同，前者直接：<code>功能（）调用</code>，后者要：<code>模块名.功能名（）</code>才能使用</p>
<p>例子</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">rom time <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>​ 4、<code>as</code>定义功能（模块）的别名</p>
<p>​ 语法：<code>impor</code> 模块名 <code>as</code> 别名</p>
<p>​ <code>from</code> 模块名<code>import</code> 功能<code>as</code>
别名</p>
<p>​ 注：有一些功能的名字比较长，改为别名方便使用</p>
<p>例子</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep <span class="keyword">as</span> sl</span><br><span class="line"></span><br><span class="line">sl(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>例子</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line">t.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="制作自定义的模块">制作自定义的模块</h2>
<p>​
除了<code>python</code>自带的模块之外，还可以自定义个性化的模块，方法是创建一个新的py文件（这里的文件名就是模块名），在py文件中写出要定义的函数，</p>
<p>​ 在其他的py文件中就可以使用模块名.功能名（）来调用模块中的功能</p>
<p>​ 1、自定义模块</p>
<p>例子、</p>
<p>main.py:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    c = a + b</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span> + <span class="subst">&#123;b&#125;</span> = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> main <span class="keyword">import</span> add</span><br><span class="line">add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">##或</span></span><br><span class="line"><span class="keyword">import</span> main</span><br><span class="line">main.add(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br><span class="line"><span class="comment">##打印5</span></span><br></pre></td></tr></table></figure>
<p>​ 2、不同模块的同名功能使用</p>
<p>​ 若是用<code>from</code> 模块名<code>import</code>
功能，导入两个模块名不同而功能名相同的功能（具体执行的功能不同），在调用这个功能的时候只会使用后导入的功能</p>
<p>例子</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> main <span class="keyword">import</span> test<span class="comment">#这个test没用</span></span><br><span class="line"><span class="keyword">from</span> main2 <span class="keyword">import</span> test<span class="comment">#使用这个test</span></span><br><span class="line">test(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>​ 3、测试模块</p>
<p>​
在自定义模块中，为了测试模块的有效性，常会在模块中写一些测试代码，当运行模块py文件的时候这些代码打印出的数据可以测试模块的有效性，但是如果不加任何限制，</p>
<p>​
在模块的调用中这些测试代码也会跟着运行，这就要在自定义模块中添加:</p>
<p>​ <code>if __name__ == '__main__':</code></p>
<p>​ <code>测试代码</code> ​
其中<code>if __name__ == '__main__':</code>可以通过输入<code>main</code>直接扩展得到，其意义是<code>if</code>下的测试代码只有在自定义模块本身的py文件运行时才会执行，在其他文件,调用该模块时，if不能通过，也就不能执行测试的代码。</p>
<p>​ 4、<code>__all__</code>变量</p>
<p>​ 在使用<code>from</code> 模块名<code>import *</code>
时，<code>*</code>代表的是导入模块中的所有功能，这里的“所有功能”由<code>__all__</code>变量控制，语法为</p>
<p>​ <code>__all__ = ["功能1"， “功能2”， ...]</code></p>
<p>​ 这样在使用<code>from</code>
模块名<code>import *</code>时，可以使用的功能只有<code>__all__</code>列表中存在的功能</p>
<p>​
注：若不规定<code>__all__</code>变量，那么<code>from</code>模块名<code>import *</code>表示导入所有的方法</p>
<h2 id="自定义python包">自定义python包</h2>
<p>​ 1、什么是<code>python</code>包</p>
<p>​
<code>python</code>包通俗的来说就是很多py文件模块组成的文件夹，与其他文件夹不同的是它里面有一个<code>__init__.py</code>的文件，有了这个文件，这个文件夹才能被成为<code>python</code>包</p>
<p>​
<code>python</code>包是用来解决模块相当多时调用模块的一种方法，可以直接调用包中的任意模块或功能，而不要一个个导入模块或功能进行使用</p>
<p>​ 2、<code>python</code>包的创建</p>
<p>​
右击<code>python</code>存放文件夹，点击<code>new</code>中的<code>python package</code>创建包，可以看到程序自动创建了一个<code>init</code>文件，在这个文件夹中编写各个模块，就创建拥有这些模块的包</p>
<p>​ 3、<code>python</code>包的调用 ​
语法：1、<code>import 包名.模块名</code></p>
<p>​ <code>包名.模块名.功能名</code> #注意这里要加包名</p>
<p>​ 2、<code>from</code> 包名<code>import</code> 模块名</p>
<p>​ <code>模块名.功能名</code></p>
<p>​ 3、<code>from</code> 包名.模块名 <code>import</code> 功能名</p>
<p>​ <code>功能名()</code></p>
<p>​ 4、<code>from</code> 包名<code>import *</code></p>
<p>​ <code>模块名.功能名（）</code></p>
<p>​
若直接这样写，用模块名.方法进行调用的时候会报错，这里的<code>*</code>与<code>from</code>
模块名
<code>import *</code>中的<code>*</code>不同，后者的<code>*</code>默认可以是全部模块中的功能，而前者的<code>*</code>中所包含的所有模块要在<code>__all__</code>变量中定义，且这个定义写在包的独有py文件init中，语法为：</p>
<p><code>__all__ = ["模块名1"， "模块名2"， ...]</code></p>
<p>只有这样才能用<code>from</code>
包名<code>import *</code>导入<code>__all__</code>中所有的模块，用<code>模块名.功能名（）</code>调用</p>
<h2 id="安装第三方包">安装第三方包</h2>
<p>​
1、第三方包是<code>python</code>没有内置的包，是各种相似模块的集合体</p>
<p>​ 例如科学计算包：<code>numpy</code>
数据分析包：<code>pandas</code>等</p>
<p>​
2、使用<code>pip</code>（<code>python</code>内置的程序）安装第三方包</p>
<p>​ 在<code>cmd</code>命令提示符中输入<code>pip install</code> 包名</p>
<p>​ 程序就会自动联网（国外）下载包</p>
<p>​
在<code>cmd</code>命令提示符中输入<code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple 包名</code></p>
<p>​ 程序就会自动联网（国内）下载包，速度更快</p>
<p>​ 3、使用<code>pycharm</code>下载第三方包</p>
<p>​
点击右下角<code>python</code>版本号，选择<code>interpreter setting</code>,点击加号，选择需要的包进行下载，也可勾选<code>option</code>，添加</p>
<p>​ -i
https://pypi.tuna.tsinghua.edu.cn/simple，链接国内网站进行下载，速度更快</p>
<h2 id="random模块">random模块</h2>
<p>使用<code>import random</code>导入random模块</p>
<h3 id="设置随机数种子">设置随机数种子</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">random.seed(随机数种子)</span><br></pre></td></tr></table></figure>
<h3 id="产生随机整数">产生随机整数</h3>
<p>产生[a, b]范围内的随机整数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">random_int = random.randint(a, b)</span><br></pre></td></tr></table></figure>
<h3 id="固定步长选取随机数">固定步长选取随机数</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">random_randrange = random.randrange(start, stop, step) </span><br></pre></td></tr></table></figure>
<hr />
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">random_randrange = random.randrange(<span class="number">1</span>, <span class="number">20</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 从1, 3, 5, 6, 9, 11, 13, 15, 17, 19中选取一个随机数</span></span><br><span class="line"><span class="built_in">print</span>(random_randrange)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="随机浮点数">随机浮点数</h3>
<p>随机生成[0, 1)内的浮点数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">random_float = random()</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">random_float = random.random()</span><br></pre></td></tr></table></figure>
<p>随机生成[a, b]内的浮点数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">random.uniform(a, b)</span><br></pre></td></tr></table></figure>
<h3 id="非空序列选取随机元素">非空序列选取随机元素</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">random.choice(非空序列)</span><br></pre></td></tr></table></figure>
<hr />
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">a = random.choice(<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz!@#$%^&amp;*()&#x27;</span>)</span><br><span class="line">b = random.choice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">c = random.choice((<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;asdsad&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">z 4 asdsad</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="无重复的随机抽样">无重复的随机抽样</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">random.sample(序列或集合, 抽取个数) # 不重复抽样，返回一个列表</span><br></pre></td></tr></table></figure>
<hr />
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">a = random.sample(<span class="string">&#x27;123456789&#x27;</span>,<span class="number">5</span>)</span><br><span class="line">b = random.sample([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>],<span class="number">5</span>)</span><br><span class="line">c = random.sample((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">99</span>),<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(a, b, c)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[&#x27;7&#x27;, &#x27;9&#x27;, &#x27;2&#x27;, &#x27;5&#x27;, &#x27;8&#x27;] [1, 3, 6, 4, 2] [4, 7, 8, 3, 1]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="随机打乱排序">随机打乱排序</h3>
<p>将原有的列表的基础上将顺序打乱</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">random.shuffle(列表)</span><br></pre></td></tr></table></figure>
<hr />
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">random.shuffle(a)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[2, 4, 3, 5, 1]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="jieba中文分词包">jieba中文分词包</h2>
<p>使用pip安装jieba</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install jieba</span><br></pre></td></tr></table></figure>
<p>导入jieba</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br></pre></td></tr></table></figure>
<h3 id="jeiba的四种分词模式">jeiba的四种分词模式</h3>
<h4 id="精确模式默认">精确模式(默认)</h4>
<p>精确模式是将文本按照最大概率进行切分，效果较好。</p>
<p>使用方法：<code>jieba.cut(sentence)</code>，返回一个可迭代（生成器）的分词结果。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确模式</span></span><br><span class="line">seg_list = jieba.cut(<span class="string">&quot;我来到北京清华大学&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(seg_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Full Mode: &quot;</span> + <span class="string">&quot;/ &quot;</span>.join(seg_list))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;generator&#x27;&gt;</span></span><br><span class="line"><span class="string">Full Mode: 我/ 来到/ 北京/ 清华大学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="全模式">全模式</h4>
<p>全模式将文本中所有可能的词语都切分出来，可能存在冗余。</p>
<p>使用方法：<code>jieba.cut(sentence, cut_all=True)</code>，返回一个可迭代生成器）的分词结果。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确模式</span></span><br><span class="line">seg_list = jieba.cut(<span class="string">&quot;我来到北京清华大学&quot;</span>, cut_all=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(seg_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Full Mode: &quot;</span> + <span class="string">&quot;/ &quot;</span>.join(seg_list))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;generator&#x27;&gt;</span></span><br><span class="line"><span class="string">Full Mode: 我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="搜索引擎模式">搜索引擎模式</h4>
<p>搜索引擎模式根据词语的位置进行切分，适合搜索引擎分词。</p>
<p>使用方法：<code>jieba.cut_for_search(sentence)</code>，返回一个可迭代的分词结果。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确模式</span></span><br><span class="line">seg_list = jieba.cut_for_search(<span class="string">&quot;小明硕士毕业于中国科学院计算所，后在日本京都大学深造&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(seg_list))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Full Mode: &quot;</span> + <span class="string">&quot;/ &quot;</span>.join(seg_list))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;generator&#x27;&gt;</span></span><br><span class="line"><span class="string">Full Mode: 小明/ 硕士/ 毕业/ 于/ 中国/ 科学/ 学院/ 科学院/ 中国科学院/ 计算/ 计算所/ ，/ 后/ 在/ 日本/ 京都/ 大学/ 日本京都大学/ 深造</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="paddle模式">paddle模式</h4>
<p>利用<code>PaddlePaddle</code>深度学习框架，训练序列标注（双向GRU）网络模型实现分词。同时支持词性标注。<code>paddle</code>模式使用需安装<code>paddlepaddle-tiny</code>，目前paddle模式支持jieba
v0.40及以上版本。jieba v0.40以下版本，请升级jieba。</p>
<p>安装<code>paddlepaddle-tiny</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install paddlepaddle==2.4.2 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<p>详细过程请看<a
href="https://www.cnblogs.com/vipsoft/p/17359066.html">原文</a></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">import</span> paddle</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">In PaddlePaddle 2.x, we turn on dynamic graph mode by default, and &#x27;data()&#x27; is only supported in static graph mode. So if you want to use this api, please call &#x27;paddle.enable_static()&#x27; before this api to enter static graph mode.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">paddle.enable_static()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动paddle模式。 0.40版之后开始支持，早期版本不支持</span></span><br><span class="line">jieba.enable_paddle()</span><br><span class="line">strs = [<span class="string">&quot;我来到北京清华大学&quot;</span>, <span class="string">&quot;乒乓球拍卖完了&quot;</span>, <span class="string">&quot;中国科学技术大学&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> strs:</span><br><span class="line">    seg_list = jieba.cut(<span class="built_in">str</span>, use_paddle=<span class="literal">True</span>)  <span class="comment"># 使用paddle模式</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Paddle Mode: &quot;</span> + <span class="string">&#x27;/&#x27;</span>.join(<span class="built_in">list</span>(seg_list)))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Paddle Mode: 我/来到/北京清华大学</span></span><br><span class="line"><span class="string">Paddle Mode: 乒乓球/拍卖/完/了</span></span><br><span class="line"><span class="string">Paddle Mode: 中国科学技术大学</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="turtle绘图包">Turtle绘图包</h2>
<p>详细介绍看<a
href="https://docs.python.org/zh-cn/3/library/turtle.html#">这里</a></p>
<h3 id="导入turtle包">导入Turtle包</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br></pre></td></tr></table></figure>
<p>Turtle包是用来操控一只小乌龟（<del>怎么好像听小学的谁说过</del>），设置一个由坐标轴的画布，让小乌龟顺时针或者逆时针转向（小乌龟默认在原点，面朝x轴正方向），再让小乌龟在这个画布上爬行设置好的距离，小乌龟爬行路线就被画成了图案。</p>
<h3 id="设置画布可选">设置画布（可选）</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">screen = turtle.Screen()</span><br></pre></td></tr></table></figure>
<h3 id="创建小乌龟对象可选">创建小乌龟对象（可选）</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_turtle = turtle.Turtle()</span><br></pre></td></tr></table></figure>
<h3 id="画笔状态控制">画笔状态控制</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">turtle.pendown()</span><br><span class="line">turtle.pd()</span><br><span class="line">turtle.down()</span><br><span class="line"><span class="comment"># 画笔落下 -- 移动时将画线。</span></span><br><span class="line"></span><br><span class="line">turtle.penup()</span><br><span class="line">turtle.pu()</span><br><span class="line">turtle.up()</span><br><span class="line"><span class="comment"># 画笔抬起 -- 移动时不画线。</span></span><br></pre></td></tr></table></figure>
<h3 id="前进和后退">前进和后退</h3>
<p>让小乌龟按着当前朝向前进或按着当前朝向向后退</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">turtle.forward(让小乌龟需要前进的像素个数)</span><br><span class="line"><span class="comment"># turtle.fd()也可以</span></span><br></pre></td></tr></table></figure>
<hr />
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">turtle.backward(让小乌龟需要前进的像素个数)</span><br><span class="line"><span class="comment"># turtle.bk()也可以</span></span><br></pre></td></tr></table></figure>
<hr />
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">screen = turtle.Screen()  <span class="comment"># 创建一个画布</span></span><br><span class="line">my_turtle = turtle.Turtle()  <span class="comment"># 创建一个turtle对象</span></span><br><span class="line">my_turtle.forward(<span class="number">100</span>)  <span class="comment"># 让turtle向前移动100个单位</span></span><br><span class="line">turtle.done() <span class="comment"># 这个在pycharm中要加，不然图像窗口会一闪而过</span></span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月09日23时41分25秒-动画.gif"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">screen = turtle.Screen()  <span class="comment"># 创建一个画布</span></span><br><span class="line">my_turtle = turtle.Turtle()  <span class="comment"># 创建一个turtle对象</span></span><br><span class="line">my_turtle.backward(<span class="number">100</span>)  <span class="comment"># 让turtle向后前移动100个单位</span></span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月09日23时40分19秒-动画.gif"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="小乌龟转向">小乌龟转向</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">turtle.right(angle) <span class="comment"># 顺时针转向</span></span><br><span class="line">turtle.rt(angle)</span><br><span class="line"></span><br><span class="line">turtle.left(angle) <span class="comment"># 逆时针转向</span></span><br><span class="line">turtle.lt(angle)</span><br><span class="line"></span><br><span class="line">turtle.setheading(angle) <span class="comment"># 这里的角度类似极坐标的角度逆时针为正，顺时针为负</span></span><br><span class="line">turtle.<span class="built_in">set</span>(angle)</span><br></pre></td></tr></table></figure>
<hr />
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">screen = turtle.Screen()  <span class="comment"># 创建一个画布</span></span><br><span class="line">my_turtle = turtle.Turtle()  <span class="comment"># 创建一个turtle对象</span></span><br><span class="line">my_turtle.forward(<span class="number">100</span>)  <span class="comment"># 让turtle向后前移动100个单位</span></span><br><span class="line">my_turtle.left(<span class="number">90</span>)</span><br><span class="line">my_turtle.forward(<span class="number">100</span>)</span><br><span class="line">my_turtle.left(<span class="number">90</span>)</span><br><span class="line">my_turtle.forward(<span class="number">100</span>)</span><br><span class="line">my_turtle.right(<span class="number">90</span>)</span><br><span class="line">my_turtle.forward(<span class="number">100</span>)</span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月09日23时36分15秒-动画.gif"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">screen = turtle.Screen()  <span class="comment"># 创建一个画布</span></span><br><span class="line">my_turtle = turtle.Turtle()  <span class="comment"># 创建一个turtle对象</span></span><br><span class="line">my_turtle.forward(<span class="number">100</span>)  <span class="comment"># 让turtle向前移动100个单位</span></span><br><span class="line">my_turtle.seth(<span class="number">60</span>)</span><br><span class="line">my_turtle.forward(<span class="number">100</span>)</span><br><span class="line">turtle.done()  <span class="comment"># 这个在pycharm中要加，不然图像窗口会一闪而过</span></span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月10日16时13分49秒-动画.gif"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="显示乌龟的位置">显示乌龟的位置</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">turtle.pos()</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">screen = turtle.Screen()  <span class="comment"># 创建一个画布</span></span><br><span class="line">my_turtle = turtle.Turtle()  <span class="comment"># 创建一个turtle对象</span></span><br><span class="line">my_turtle.forward(<span class="number">100</span>)  <span class="comment"># 让turtle向前移动100个单位</span></span><br><span class="line">my_turtle.seth(<span class="number">60</span>)</span><br><span class="line">my_turtle.forward(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(my_turtle.pos())</span><br><span class="line">turtle.done()  <span class="comment"># 这个在pycharm中要加，不然图像窗口会一闪而过</span></span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月10日16时19分26秒-image-20240810161925512.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3
id="让小乌龟移动到某个坐标有移动痕迹">让小乌龟移动到某个坐标（有移动痕迹）</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">tultle.goto(x坐标， y坐标)</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line">screen = turtle.Screen()  <span class="comment"># 创建一个画布</span></span><br><span class="line">my_turtle = turtle.Turtle()  <span class="comment"># 创建一个turtle对象</span></span><br><span class="line">my_turtle.forward(<span class="number">100</span>)  <span class="comment"># 让turtle向前移动100个单位</span></span><br><span class="line">my_turtle.seth(<span class="number">60</span>)</span><br><span class="line">my_turtle.forward(<span class="number">100</span>)</span><br><span class="line">my_turtle.goto(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">turtle.done()  <span class="comment"># 这个在pycharm中要加，不然图像窗口会一闪而过</span></span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月10日16时22分40秒-动画.gif"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3
id="让小乌龟传送动到某个坐标无移动痕迹">让小乌龟传送动到某个坐标（无移动痕迹）</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">turtle.teleport(x坐标， y坐标) <span class="comment"># 在python3.12中才可使用</span></span><br></pre></td></tr></table></figure>
<h3 id="让小乌龟回到原点有移动痕迹">让小乌龟回到原点（有移动痕迹）</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">turtle.home() <span class="comment"># 让小乌龟回到原点，使朝向变为默认朝向</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">screen = turtle.Screen()  <span class="comment"># 创建一个画布</span></span><br><span class="line">my_turtle = turtle.Turtle()  <span class="comment"># 创建一个turtle对象</span></span><br><span class="line"></span><br><span class="line">my_turtle.forward(<span class="number">100</span>)  <span class="comment"># 让turtle向前移动100个单位</span></span><br><span class="line"></span><br><span class="line">my_turtle.seth(<span class="number">60</span>)</span><br><span class="line">my_turtle.forward(<span class="number">200</span>)</span><br><span class="line">my_turtle.home()</span><br><span class="line">turtle.done()  <span class="comment"># 这个在pycharm中要加，不然图像窗口会一闪而过</span></span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月10日16时36分24秒-动画.gif"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="小乌龟画圆">小乌龟画圆</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">turtle.circle(radius, extent=<span class="literal">None</span>, steps=<span class="literal">None</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">radius:圆的半径，以小乌龟朝向的逆时针90度，半径为radius画圆</span></span><br><span class="line"><span class="string">extent:所画的圆心角</span></span><br><span class="line"><span class="string">steps:使得所化的圆变为steps边形</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">screen = turtle.Screen()  <span class="comment"># 创建一个画布</span></span><br><span class="line">my_turtle = turtle.Turtle()  <span class="comment"># 创建一个turtle对象</span></span><br><span class="line"></span><br><span class="line">my_turtle.forward(<span class="number">100</span>)  <span class="comment"># 让turtle向前移动100个单位</span></span><br><span class="line"></span><br><span class="line">my_turtle.seth(<span class="number">60</span>)</span><br><span class="line">my_turtle.forward(<span class="number">200</span>)</span><br><span class="line">my_turtle.home()</span><br><span class="line">my_turtle.circle(<span class="number">50</span>, <span class="number">360</span>)</span><br><span class="line">turtle.done()  <span class="comment"># 这个在pycharm中要加，不然图像窗口会一闪而过</span></span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月10日16时48分55秒-动画.gif"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">screen = turtle.Screen()  <span class="comment"># 创建一个画布</span></span><br><span class="line">my_turtle = turtle.Turtle()  <span class="comment"># 创建一个turtle对象</span></span><br><span class="line"></span><br><span class="line">my_turtle.forward(<span class="number">100</span>)  <span class="comment"># 让turtle向前移动100个单位</span></span><br><span class="line"></span><br><span class="line">my_turtle.seth(<span class="number">60</span>)</span><br><span class="line">my_turtle.forward(<span class="number">200</span>)</span><br><span class="line">my_turtle.home()</span><br><span class="line">my_turtle.circle(<span class="number">50</span>, <span class="number">360</span>,<span class="number">4</span>)</span><br><span class="line">turtle.done()  <span class="comment"># 这个在pycharm中要加，不然图像窗口会一闪而过</span></span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月10日16时50分32秒-动画.gif"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h2 id="json数据模式">json数据模式</h2>
<p>​ 1、什么是<code>json</code></p>
<p>​
<code>json</code>是一种通用的数据交换模式，其中按照特点的格式封装了数据，本质上来说就是带有一个特定功能的字符串</p>
<p>​ 2、<code>json</code>的主要功能</p>
<p>​
<code>json</code>实在各个变成语言中流通的数据格式，可用于不同编程语言之间的数据交换。比如<code>python</code>的数据在c语言中不能直接使用，就要使用<code>json</code>这一媒介,让<code>python</code>的数据转化为<code>json</code>，再将这些<code>json</code>数据用在c语言中</p>
<p>​ 3<code>json</code>的格式</p>
<p>​
由于<code>python</code>的便利性，<code>json</code>的主要格式就是字典形式或者是内嵌字典的列表的特殊字符串：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;hello&quot;</span>:<span class="string">&quot;A“, &quot;</span>ok<span class="string">&quot;:&quot;</span><span class="string">B&quot;&#125;</span></span><br><span class="line"><span class="string"> #或者</span></span><br><span class="line"><span class="string"> [&#123;&quot;</span>hello<span class="string">&quot;:&quot;</span>A“, <span class="string">&quot;ok&quot;</span>:<span class="string">&quot;B&quot;</span>&#125;,&#123;<span class="string">&quot;he&quot;</span>:<span class="string">&quot;C“, &quot;</span>she<span class="string">&quot;:&quot;</span>D<span class="string">&quot;&#125;]</span></span><br></pre></td></tr></table></figure>
<p>​ 4、<code>json</code>数据与<code>python</code>数据的互相转化</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json<span class="comment">#导入json模块</span></span><br><span class="line"> data = [&#123;<span class="string">&quot;hello&quot;</span>:<span class="string">&quot;A“, &quot;</span>ok<span class="string">&quot;:&quot;</span><span class="string">B&quot;&#125;,&#123;&quot;</span>he<span class="string">&quot;:&quot;</span>C“, <span class="string">&quot;she&quot;</span>:<span class="string">&quot;D&quot;</span>&#125;]<span class="comment">#在python中准备和json格式匹配的数据</span></span><br><span class="line">data = json.dumps(data)<span class="comment">#将data中的python数据更新为json数据（str）</span></span><br><span class="line">data = json.loads(data)<span class="comment">#将data中的json数据更新为python数据#注意这里是loads加载json文件，而用load要求标准的json文件</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">#将json格式的python字符串变为python数据</span></span><br><span class="line">s = <span class="string">&#x27;[&#123;&quot;hello&quot;:&quot;A“, &quot;ok&quot;:&quot;B&quot;&#125;,&#123;&quot;he&quot;:&quot;C“, &quot;she&quot;:&quot;D&quot;&#125;]&#x27;</span></span><br><span class="line">data = json.loads(s)<span class="comment">#字符串s变为python数据,其中data内容为[&#123;&quot;hello&quot;:&quot;A“, &quot;ok&quot;:&quot;B&quot;&#125;,&#123;&quot;he&quot;:&quot;C“, &quot;she&quot;:&quot;D&quot;&#125;]的列表</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;[&#123;&quot;hello&quot;:&quot;A“, &quot;ok&quot;:&quot;B&quot;&#125;&#x27;</span></span><br><span class="line">data = json.loads(s)<span class="comment">#字符串s变为python数据,其中data内容为&#123;&quot;hello&quot;:&quot;A“, &quot;ok&quot;:&quot;B&quot;&#125;的字典</span></span><br></pre></td></tr></table></figure>
<p>​
注：<code>json</code>格式的数据比较特殊，如果其中包含中文，那么打印<code>json</code>模式的字符串数据，会将中文转化为<code>ascii</code>码，解决方法是在将<code>python</code>数据转化为<code>json</code>数据时，添加参数：
​</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">data = json.dumps(data, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>​ 这样打印出来就是中文了</p>
<h2 id="初识对象">初识对象</h2>
<p>​
对象是一种组织数据的方法，如我我们要收集数据，那么收集到的数据可能会是五花八门的，而对象就是定义一种类，这种类只能填写规定的数据</p>
<p>​ 使用对象来组织数据 ​</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">##1 设计类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">        name = <span class="literal">None</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注意类的命名规则：</span></span><br><span class="line"><span class="string">    1-Python的命名规范约定，类名应以大写字母开头，这样可以方便区分类和函数。</span></span><br><span class="line"><span class="string">例：class MyClass</span></span><br><span class="line"><span class="string">    2-驼峰命名法：驼峰命名法是指每个单词的首字母大写，没有下划线分隔。</span></span><br><span class="line"><span class="string">例：class CarModel</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##2 创建对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##基于类创建对象</span></span><br><span class="line">stu_1 = Student() <span class="comment">#创建Student类的对象——stu_1</span></span><br><span class="line">stu_2 = Student() <span class="comment">#创建Student类的对象——stu_2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##3 对象属性赋值</span></span><br><span class="line"></span><br><span class="line">stu_1.name = <span class="string">&quot;周杰论&quot;</span> <span class="comment">#给学生1对象赋予名称属性值</span></span><br><span class="line">stu_2.name = <span class="string">&quot;刘德华&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">##设计类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    name = <span class="literal">None</span></span><br><span class="line">    gender = <span class="literal">None</span></span><br><span class="line">    nationality = <span class="literal">None</span></span><br><span class="line">    native_place = <span class="literal">None</span></span><br><span class="line">    age = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##创建对象</span></span><br><span class="line"></span><br><span class="line">stu_1 = Student()</span><br><span class="line"></span><br><span class="line"><span class="comment">##对象属性赋值</span></span><br><span class="line"></span><br><span class="line">stu_1.name = <span class="string">&quot;jack&quot;</span></span><br><span class="line">stu_1.gender = <span class="string">&quot;male&quot;</span></span><br><span class="line">stu_1.nationality = <span class="string">&quot;China&quot;</span></span><br><span class="line">stu_1.native_place = <span class="string">&quot;Xinyu&quot;</span></span><br><span class="line">stu_1.age = <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(stu_1))</span><br><span class="line"><span class="built_in">print</span>(stu_1.name)</span><br><span class="line"><span class="built_in">print</span>(stu_1.gender)</span><br></pre></td></tr></table></figure>
<h2 id="类的成员方法">类的成员方法</h2>
<p>​ 1-类的定义和使用</p>
<p><code>class</code> 类名称：</p>
<p>​ <code>类的属性</code> #
即定义在类中的变量（存贮数据）（成员变量）</p>
<p>​ <code>类的行为</code> #
即定义在类中的函数（存贮行为）（成员方法）</p>
<p>​ 创建类对象的语法</p>
<p><code>对象 = 类名称（）</code></p>
<p>​ 2-成员方法的定义语法</p>
<p>​
成员方法是定义在类之中的函数，以后我们将定义在类之外的函数成为函数，将定义在类之中的函数称为方法</p>
<p>​ 语法：</p>
<p>​ <code>class</code> 类名称：</p>
<p>​ 类的属性</p>
<p>​ <code>def 方法名（self，形参1，。。。，形参N）：</code></p>
<p>​ 方法体</p>
<p>​
注意：这里的关键词<code>self</code>是一定要填写的，当我们在外部调用方法时，<code>self</code>会被自动传入，只要写形参就好。</p>
<p>若在方法体内要调用成员变量时，必须使用<code>self.</code>成员变量的写法。</p>
<p>例子1：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">	name = <span class="literal">None</span></span><br><span class="line">	age = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">self</span>):  <span class="comment"># 在定义方法时，self必不可少</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;Hi大家好，我是<span class="subst">&#123;self.name&#125;</span>&quot;</span>) <span class="comment"># 在方法体中要调用成员变量，需要使用self.成员变量</span></span><br><span class="line"></span><br><span class="line">stu = Student()</span><br><span class="line">stu.name = <span class="string">&quot;吴凡&quot;</span></span><br><span class="line">stu.say_hi() <span class="comment"># 在调用方法时，无需写self</span></span><br></pre></td></tr></table></figure>
<p>例子2：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    name = <span class="literal">None</span></span><br><span class="line">    age = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">ef say_hi(self):  <span class="comment"># 在定义方法时，self必不可少</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;Hi大家好，我是<span class="subst">&#123;self.name&#125;</span>&quot;</span>)  <span class="comment"># 在方法体中要调用成员变量，需要使用self.成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_msg</span>(<span class="params">self, msg</span>):  <span class="comment"># 形式参数外部传入</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">f&quot;Hi大家好，我是<span class="subst">&#123;self.name&#125;</span>,我想和大家说<span class="subst">&#123;msg&#125;</span>&quot;</span>)  <span class="comment"># 在使用外部传入的形式参数（msg）的时候，不需要用self.的形式</span></span><br><span class="line"></span><br><span class="line">stu = Student()</span><br><span class="line">stu.name = <span class="string">&quot;吴凡&quot;</span></span><br><span class="line">stu.say_hi()   <span class="comment"># 在调用方法时，无需写self</span></span><br><span class="line">stu.say_msg(<span class="string">&quot;我吃屎&quot;</span>)  <span class="comment"># 无需写self，但是要写形式参数</span></span><br></pre></td></tr></table></figure>
<h2 id="类和对象">类和对象</h2>
<p>​
其实现实世界中的事物其实也和类是相似的，都可以分为属性和行为，比如手机，属性可以是品牌，型号，行为可以是打电话，玩游戏等。</p>
<p>​
而类可以比喻为设计图纸，对象可以比作我们生产出来的实体，类的设计图纸规定了生产出来的实体的属性和功能，而我们生产的对象实体则按照我们的</p>
<p>​ 要求，将信息和功能依照类的设计图纸填入实体中。</p>
<p>​ 所以说我们为什么要进行这一步
<code>对象名 = 类（）</code>，这个的意思就是用类的图纸创建一个对象名的实体</p>
<p>​
依据这个思路，我们可以用类来描述一些物品，我们用对象来为我们工作。这成为面向对象的编程</p>
<p>以生产闹钟为例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span>:</span><br><span class="line">    <span class="built_in">id</span> = <span class="literal">None</span></span><br><span class="line">    price = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">ring</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">import</span> winsound</span><br><span class="line">		winsound.Beep(<span class="number">500</span>, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure>
<p>设计类。也就是设计闹钟的图纸，<code>id</code>和<code>price</code>为闹钟的属性，<code>ring</code>为闹钟的功能</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">##根据图纸创建对象</span></span><br><span class="line">clock_1 = Clock()</span><br><span class="line"><span class="comment">##根据类的图纸制造闹钟1</span></span><br><span class="line">clock_1.<span class="built_in">id</span> = <span class="number">123</span></span><br><span class="line">clock_1.price = <span class="number">777</span></span><br><span class="line">clock_1.ring()</span><br><span class="line"><span class="comment">##根据类的图纸制造闹钟2</span></span><br><span class="line"></span><br><span class="line">clock_2 = Clock()</span><br><span class="line">clock_2.<span class="built_in">id</span> = <span class="number">123</span></span><br><span class="line">clock_2.price = <span class="number">777</span></span><br><span class="line">clock_2.ring()</span><br></pre></td></tr></table></figure>
<h2 id="构造方法">构造方法</h2>
<p>​
构造方法是一种在创建对象时，对成员变量的一种快速的赋值方法，在以下的程序中：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span>:</span><br><span class="line">    <span class="built_in">id</span> = <span class="literal">None</span></span><br><span class="line">    price = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">ring</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">import</span> winsound</span><br><span class="line">		winsound.Beep(<span class="number">500</span>, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure>
<p>设计类。也就是设计闹钟的图纸，<code>id</code>和<code>price</code>为闹钟的属性，<code>ring</code>为闹钟的功能</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">##根据图纸创建对象</span></span><br><span class="line">clock_1 = Clock()</span><br><span class="line"><span class="comment">##根据类的图纸制造闹钟1</span></span><br><span class="line">clock_1.<span class="built_in">id</span> = <span class="number">123</span></span><br><span class="line">clock_1.price = <span class="number">777</span></span><br><span class="line">clock_1.ring()</span><br><span class="line"><span class="comment">##根据类的图纸制造闹钟2</span></span><br><span class="line"></span><br><span class="line">clock_2 = Clock()</span><br><span class="line">clock_2.<span class="built_in">id</span> = <span class="number">123</span></span><br><span class="line">clock_2.price = <span class="number">777</span></span><br><span class="line">clock_2.ring()</span><br></pre></td></tr></table></figure>
<p>我们创建了两个对象分别进行成员变量的赋值，但是这样略显繁琐，这时候就可以用到构造方法来对变量进行快速赋值</p>
<p>语法：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>：</span><br><span class="line">    成员变量</span><br><span class="line">    成员方法</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, 参数<span class="number">1</span>, 参数<span class="number">2</span>, 。。，参数N</span>):</span><br><span class="line">​       self.参数<span class="number">1</span> = 参数<span class="number">1</span></span><br><span class="line">​        self.参数<span class="number">2</span> = 参数<span class="number">2</span></span><br><span class="line">​           ...</span><br><span class="line">​        self.参数N = 参数N</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    name = <span class="literal">None</span></span><br><span class="line">    gender = <span class="literal">None</span></span><br><span class="line">    age = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender, age</span>):</span><br><span class="line">    self.name = name</span><br><span class="line">    self.gender = gender <span class="comment"># 定义构造方法</span></span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line">student_1 = Student(<span class="string">&quot;吴凡&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">15</span>)</span><br><span class="line">student_2 = Student(<span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">17</span>) <span class="comment"># 使用构造方法进行成员变量的赋值</span></span><br></pre></td></tr></table></figure>
<p>注意： 1-在创建类对象时，若有构造方法，构造方法会自动执行</p>
<p>2-在创建类对象时，将传入参数自动给构造函方法使用</p>
<p>3-若规定了构造方法，在创建类对象的时候必须传入构造方法中所规定的参数</p>
<p>4-若在构造方法中已经注明了要传入的变量，那么这些变量可以不在成员变量中声明，因为在self.变量中已经完成了成员变量的定义</p>
<p>例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender <span class="comment"># 定义构造方法</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">student_1 = Student(<span class="string">&quot;吴凡&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">15</span>)</span><br><span class="line">student_2 = Student(<span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">17</span>)</span><br></pre></td></tr></table></figure>
<p>也是可以的</p>
<p>5-构造方法也是成员方法，注意要在参数列表中加入<code>self</code></p>
<p>6-在构造方法内部定义成员变量时，要使用<code>self.变量</code>进行，也就是只要在类的设计中访问变量，那么就需要通过<code>self</code>关键字。</p>
<p>​ 使用<code>for</code>循环创建对象</p>
<p>​ 语法1：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, address</span>):</span><br><span class="line">	self.name = name</span><br><span class="line">	self.age = age</span><br><span class="line">	self.address = address</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    name_inside = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名&quot;</span>)</span><br><span class="line">    age_inside = <span class="built_in">input</span>(<span class="string">&quot;请输入年龄&quot;</span>)</span><br><span class="line">    address_inside = <span class="built_in">input</span>(<span class="string">&quot;请输入地址&quot;</span>)</span><br><span class="line">    student[i] = Student(name_inside, age_inside, address_inside)</span><br><span class="line">    student.append([student[i]])</span><br><span class="line"></span><br><span class="line"><span class="comment">##语法1用列表的方式创建对象，用for循环挨个创建，每次都可以自定义成员变量的内容</span></span><br></pre></td></tr></table></figure>
<p>​ 语法2：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, address</span>):</span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line">    self.address = address</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name_inside = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名&quot;</span>)</span><br><span class="line">age_inside = <span class="built_in">input</span>(<span class="string">&quot;请输入年龄&quot;</span>)</span><br><span class="line">address_inside = <span class="built_in">input</span>(<span class="string">&quot;请输入地址&quot;</span>)</span><br><span class="line">students = [Student(name_inside, age_inside, address_inside) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">##语法2 只用了for循环生成了对象，而for循环将将这些对象存储在一个列表中，这些成员变量只能在开头得到相同的赋值</span></span><br></pre></td></tr></table></figure>
<p>学生信息录入案例(使用构造函数)</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, address</span>):</span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line">    self.address = address</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;当前录入第<span class="subst">&#123;i&#125;</span>位学生信息，总共需录入<span class="subst">&#123;<span class="built_in">len</span>(student)&#125;</span>位学生信息&quot;</span>)</span><br><span class="line">    name_inside = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名&quot;</span>)</span><br><span class="line">    age_inside = <span class="built_in">input</span>(<span class="string">&quot;请输入年龄&quot;</span>)</span><br><span class="line">    address_inside = <span class="built_in">input</span>(<span class="string">&quot;请输入地址&quot;</span>)</span><br><span class="line">    student[i] = Student(name_inside, age_inside, address_inside)</span><br><span class="line">    student.append([student[i]])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;学生<span class="subst">&#123;i&#125;</span>信息录入完毕，信息为【学生姓名：<span class="subst">&#123;student[i].name&#125;</span>，年龄：<span class="subst">&#123;student[i].age&#125;</span>，地址：<span class="subst">&#123;student[i].address&#125;</span>】&quot;</span>)</span><br><span class="line"></span><br><span class="line">学生信息录入案例(不使用构造函数)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    name = <span class="literal">None</span></span><br><span class="line">    age = <span class="literal">None</span></span><br><span class="line">    address = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">students = [Student() <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;当前录入第<span class="subst">&#123;k&#125;</span>位学生信息，总共需录入<span class="subst">&#123;<span class="built_in">len</span>(students)&#125;</span>位学生信息&quot;</span>)</span><br><span class="line">    students[k].name = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名&quot;</span>)</span><br><span class="line">    students[k].age = <span class="built_in">input</span>(<span class="string">&quot;请输入年龄&quot;</span>)</span><br><span class="line">    students[k].address = <span class="built_in">input</span>(<span class="string">&quot;请输入地址&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;学生<span class="subst">&#123;k&#125;</span>信息录入完毕，信息为【学生姓名：<span class="subst">&#123;students[k].name&#125;</span>，年龄：<span class="subst">&#123;students[k].age&#125;</span>，地址：<span class="subst">&#123;students[k].address&#125;</span>】&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="魔术方法类内置方法">魔术方法（类内置方法）</h2>
<p>1） __init__构造方法</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">类名</span>：</span><br><span class="line"></span><br><span class="line">    成员变量</span><br><span class="line">    </span><br><span class="line">    成员方法</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, 参数<span class="number">1</span>, 参数<span class="number">2</span>, 。。，参数N</span>):</span><br><span class="line">        self.参数<span class="number">1</span> = 参数<span class="number">1</span></span><br><span class="line">        self.参数<span class="number">2</span> = 参数<span class="number">2</span></span><br><span class="line">     		...</span><br><span class="line">        self.参数N = 参数N</span><br></pre></td></tr></table></figure>
<p>​ 作用：</p>
<p>​
可以直接在构造对象时定义和对成员变量赋值，在创建对象的时候构方法会被自动执行，而且必须要输入构造方法所规定的参数才能成功创建对象</p>
<p>​ 注意：1-在创建类对象时，若有构造方法，构造方法会自动执行</p>
<p>​ 2-在创建类对象时，将传入参数自动给构造函方法使用</p>
<p>​
3-若规定了构造方法，在创建类对象的时候必须传入构造方法中所规定的参数</p>
<p>​
4-若在构造方法中已经注明了要传入的变量，那么这些变量可以不在成员变量中声明，因为在<code>self.变量</code>中已经完成了成员变量的定义</p>
<p>​ 例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, gender, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender <span class="comment"># 定义构造方法</span></span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">student_1 = Student(<span class="string">&quot;吴凡&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">15</span>)</span><br><span class="line">student_2 = Student(<span class="string">&quot;周杰伦&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">17</span>)</span><br></pre></td></tr></table></figure>
<p>也是可以的</p>
<p>5-构造方法也是成员方法，注意要在参数列表中加入<code>self</code></p>
<p>6-在构造方法内部定义成员变量时，要使用<code>self.变量</code>进行，也就是只要在类的设计中访问变量，那么就需要通过<code>self</code>关键字。</p>
<p>​ 2）<code>__str__</code>字符串方法</p>
<p>​
在创建对象后，如果直接打印对象或者是将对象转换为字符串打印，只会打印出存贮该对象的内存地址的字符串，这不是我们需要的</p>
<p>​ 例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">name = <span class="literal">None</span></span><br><span class="line">age = <span class="literal">None</span></span><br><span class="line">address = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student_1 = Student()</span><br><span class="line"><span class="built_in">print</span>(student_1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(student_1))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;__main__.Student object at 0x0000027FCBAC6E00&gt;</span></span><br><span class="line"><span class="string">&lt;__main__.Student object at 0x0000027FCBAC6E00&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>而<code>__str__字</code>符串方法是将类对象转换字符串的行为进行改变</p>
<p>语法：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名称</span>：</span><br><span class="line">    成员变量</span><br><span class="line">    方法</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> 需要返回的内容(必须是字符串内容)</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">	<span class="keyword">return</span> <span class="string">f&quot;学生的姓名为<span class="subst">&#123;self.name&#125;</span>，学生的年龄为<span class="subst">&#123;self.age&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">student_1 = Student(<span class="string">&quot;吴凡&quot;</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(student_1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(student_1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(student_1))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">学生的姓名为吴凡，学生的年龄为6</span></span><br><span class="line"><span class="string">学生的姓名为吴凡，学生的年龄为6</span></span><br><span class="line"><span class="string">&lt;class &#x27;__main__.Student&#x27;&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>​ 3）<code>__lt__</code>小于符号比较方法（大于也可以比较）[less
than]</p>
<p>​
在不同的类对象中，我们不能直接比较两个类对象的大小，只能通过调用成员变量的方法进行大小的比较</p>
<p>​ 例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = age</span><br><span class="line"></span><br><span class="line">stu_1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">5</span>)</span><br><span class="line">stu_2 = Student(<span class="string">&quot;wufan&quot;</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(stu_1 &lt; stu_2) <span class="comment"># 报错，将最后一行改成print(stu_1.age &lt; stu_2.age)，才能正确执行</span></span><br></pre></td></tr></table></figure>
<p>​
而<code>__lt__</code>小于符号比较方法可以直接让两个对象进行大小的比较，其原理就是让成员变量进行比较</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">    语法：</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">类名称</span>：</span><br><span class="line"></span><br><span class="line">​    成员变量</span><br><span class="line"></span><br><span class="line">​    方法</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">return</span> self.需要比较的成员变量 &lt;(&gt;) other（同一类的不同对象）.需要比较的成员变量</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line">	<span class="keyword">return</span> self.age &lt; other.age <span class="comment"># 判断逻辑</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu_1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">5</span>)</span><br><span class="line">stu_2 = Student(<span class="string">&quot;wufan&quot;</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(stu_1 &lt; stu_2) <span class="comment"># __lt__方法只能用&lt; 或者&gt;，其他的符号会报错</span></span><br><span class="line"><span class="built_in">print</span>(stu_1 &gt; stu_2) <span class="comment"># 表达，用判断逻辑来判断表达是否正确</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>注：当出现类的大小比较情况时，会自动调用大小比较方法，且出现类的大小比较情况时，比较符号左边的类对应于定义方法中的<code>self</code>，另一个对应<code>other</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__le__</span>(<span class="params">self, other</span>):</span><br><span class="line">	<span class="keyword">return</span> other.age &lt;= self.age <span class="comment">#此顺序改变并不影响self和other的摆放位置</span></span><br><span class="line"></span><br><span class="line">stu_1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">5</span>)</span><br><span class="line">stu_2 = Student(<span class="string">&quot;wufan&quot;</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(stu_1 &lt;= stu_2)  <span class="comment"># 比较符号两边摆放的对象决定了哪个是self，哪个是other，一般符号左边的是self，右边的是other</span></span><br><span class="line"><span class="built_in">print</span>(stu_1 &gt;= stu_2)</span><br></pre></td></tr></table></figure>
<p>​ 4)<code>__le__</code>小于等于比较符号方法（大于等于）[less than or
equal]</p>
<p>​ 和<code>__lt__</code>小于符号比较方法作用相似</p>
<p>​ 语法：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名称</span>：</span><br><span class="line">​    成员变量</span><br><span class="line">​    方法</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__le__</span>(<span class="params">self, other</span>):</span><br><span class="line">​        <span class="keyword">return</span> self.需要比较的成员变量 &lt;=(&gt;=) other（同一类的不同对象）.需要比较的成员变量</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__le__</span>(<span class="params">self, other</span>):</span><br><span class="line">	<span class="keyword">return</span> self.age &lt;= other.age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu_1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">5</span>)</span><br><span class="line">stu_2 = Student(<span class="string">&quot;wufan&quot;</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(stu_1 &lt;= stu_2) <span class="comment">#注意在比较的时候只能用&gt;=或者&lt;=，不然会报错</span></span><br><span class="line"><span class="built_in">print</span>(stu_1 &gt;= stu_2)</span><br></pre></td></tr></table></figure>
<p>​
5)<code>__eq__</code>等于比较符号方法(只能用等号==或不等号！=)[equal]</p>
<p>​
若没有定义<code>__eq__</code>魔术方法对两个对象进行等于或不等于比较，那么比较的只是他们的内存地址，不同的对象一定返回<code>False</code>，相同的对象一定返回<code>True</code>,但就算两个类对象的成员变量都相同，他们的内存地址也不相同，也会返回<code>False</code>。若用<code>__eq__</code>则可以自定义比较对象</p>
<p>​ 语法：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">类名称</span>：</span><br><span class="line">​    成员变量</span><br><span class="line">​    方法</span><br><span class="line">​    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">​        <span class="keyword">return</span> self.需要比较的成员变量 ==(!=) other（同一类的不同对象）.需要比较的成员变量</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">##两个类对象的成员变量都相同，他们的内存地址也不相同</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">stu_1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">6</span>)</span><br><span class="line">stu_2 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(stu_1 == stu_2)</span><br><span class="line"></span><br><span class="line"><span class="comment">##输出 False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##__eq__方法进行类对象的比较</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">	<span class="keyword">return</span> self.age == other.age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu_1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">6</span>)</span><br><span class="line">stu_2 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(stu_1 == stu_2)</span><br><span class="line"></span><br><span class="line"><span class="comment">##输出 True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##__eq__方法进行类对象的比较</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, other</span>):</span><br><span class="line">	<span class="keyword">return</span> self.age != other.age <span class="comment">#判断逻辑中用不等于也可以</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">stu_1 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">6</span>)</span><br><span class="line">stu_2 = Student(<span class="string">&quot;haha&quot;</span>, <span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(stu_1 == stu_2)</span><br><span class="line"></span><br><span class="line"><span class="comment">##输出 False</span></span><br></pre></td></tr></table></figure>
<h2 id="封装">封装</h2>
<p>​
面向对象的变成就是创捷模板（类）来构造实体（对象），而将现实属性描述为成员变量，现实行为描述为成员方法，并将其写在类中的过程称为封装</p>
<p>​
在些时候，当我们创建的类中的成员变量或者成员方法不想让使用者修改或使用时，我们可以创建私有成员变量或私有成员方法</p>
<p>语法：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">##创建私有成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">变量名</span>：</span><br><span class="line">    __私有变量名 = 赋值</span><br><span class="line"></span><br><span class="line"><span class="comment">##创建私有成员方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">变量名</span>：</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__私有成员方法名</span>(<span class="params">self</span>)：</span><br><span class="line">        方法体</span><br><span class="line">    <span class="comment">#要让成员变量或者成员方法变成私有的，只要在变量或者方法前面加上</span></span><br></pre></td></tr></table></figure>
<p>私有的成员变量或者方法无法被类对象直接使用</p>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    name = <span class="literal">None</span></span><br><span class="line">    age = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">	__gender = <span class="literal">None</span> <span class="comment">#定义私有成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="meta">	@staticmethod</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__print</span>(<span class="params">self</span>): <span class="comment"># 定义私有成员方法</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;nihao&quot;</span>)</span><br><span class="line"></span><br><span class="line">stu = Student()</span><br><span class="line"></span><br><span class="line">stu.__<span class="built_in">print</span>()  <span class="comment"># 调用私有成员方法报错</span></span><br><span class="line">stu.__gender = <span class="string">&quot;男&quot;</span></span><br><span class="line"><span class="built_in">print</span>(stu.__gender) <span class="comment"># 调用私有成员变量报错</span></span><br></pre></td></tr></table></figure>
<p>私有的成员变量或者方法无法被类对象直接（在外部）使用，但是私有的成员变量或者方法可以在类的内部使用，即可以被类中的其他成员或方法所使用</p>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>:</span><br><span class="line">    __current_voltage = <span class="number">0.5</span> <span class="comment"># 创建私有成员变量</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__keep_single_core</span>():  <span class="comment"># 创建私有成员方法</span></span><br><span class="line">    	<span class="built_in">print</span>(<span class="string">&quot;以单核模式运行&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">call_by_5g</span>(<span class="params">self</span>): <span class="comment"># 创建公开的的成员方法</span></span><br><span class="line">		<span class="keyword">if</span> self.__current_voltage &gt;= <span class="number">1</span>: <span class="comment"># 调用私有成员变量</span></span><br><span class="line"> 			<span class="built_in">print</span>(<span class="string">&quot;电压符合要求，可以使用5g&quot;</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;条件不符，无法使用5g&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">phone = Phone()</span><br><span class="line">phone.call_by_5g() <span class="comment"># 调用公开的成员方法，该方法中有调用私有成员变量和私有成员方法</span></span><br></pre></td></tr></table></figure>
<p>封装与私有变量练习</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>:</span><br><span class="line">    __is_5g_enable = <span class="literal">True</span> <span class="comment"># 对用户隐藏的变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__check_5g</span>(<span class="params">self</span>):</span><br><span class="line">	<span class="keyword">if</span> self.__is_5g_enable:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;5g开启&quot;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;5g关闭，使用4g网络&quot;</span>) <span class="comment"># 对用户隐藏的方法</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">call_by_5g</span>(<span class="params">self</span>): <span class="comment"># 对用户公开的方法</span></span><br><span class="line">		self.__check_5g()</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;正在通话中&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">phone = Phone()</span><br><span class="line">phone.call_by_5g() <span class="comment"># 用户使用公开方法，在公开方法中使用了私有方法或变量，且用户是感知不到的</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">##输出</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5g开启</span></span><br><span class="line"><span class="string">正在通话中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="继承的基础语法">继承的基础语法</h2>
<p>​ 1-继承的概念</p>
<p>​
继承就是在旧的类的基础上建立一个新的类。在我们相对旧的类添加新功能时，我们不必重新写一个类（在旧类的基础上），而是使用继承，直接在基于旧类添加我们需要的内容创建为一个新的类，这个新的类也包括了旧类的内容。被继承的类被称为父类，继承的类称为子类单继承</p>
<p>​ 语法：（单继承）</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">子类名</span>（父类名）：</span><br><span class="line"></span><br><span class="line">​     类内容体（变量和方法）</span><br></pre></td></tr></table></figure>
<p>单继承例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>:</span><br><span class="line">	__is_5g_enable = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__check_5g</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="keyword">if</span> self.__is_5g_enable:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;5g开启&quot;</span>)</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;5g关闭，使用4g网络&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">call_by_5g</span>(<span class="params">self</span>):</span><br><span class="line">		self.__check_5g()</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;正在通话中&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneXR</span>(<span class="title class_ inherited__">Phone</span>):</span><br><span class="line">__face_id = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_face_id</span>(<span class="params">self</span>):</span><br><span class="line">	<span class="keyword">if</span> self.__face_id:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;面部识别已打开&quot;</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;面部识别未打开&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">phone = Phone()</span><br><span class="line">phone.call_by_5g()</span><br><span class="line"></span><br><span class="line">phoneXR = PhoneXR()</span><br><span class="line">phoneXR.check_face_id()</span><br><span class="line">phoneXR.call_by_5g()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">##输出：</span></span><br><span class="line"><span class="string">5g开启</span></span><br><span class="line"><span class="string">正在通话中</span></span><br><span class="line"><span class="string">面部识别已打开</span></span><br><span class="line"><span class="string">5g开启</span></span><br><span class="line"><span class="string">正在通话中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>多继承</p>
<p>多继承就是一个子类继承多个父类</p>
<p>语法：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">子类名</span>（父类<span class="number">1</span>,...,父类N）：</span><br><span class="line">     类内容体（若不想在子类新加入功能，而是只整合父类，那么为了符合语法要求，可将类内容体替换为关键字<span class="keyword">pass</span>）</span><br></pre></td></tr></table></figure>
<p>例子（多继承）</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone1</span>:</span><br><span class="line">    __is_5g_enable = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__check_5g</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.__is_5g_enable:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;5g开启&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;5g关闭，使用4g网络&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">call_by_5g</span>(<span class="params">self</span>):</span><br><span class="line">        self.__check_5g()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在通话中&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone2</span>:</span><br><span class="line">    __face_id = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_face_id</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.__face_id:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;面部识别已通过&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;面部识别未通过&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone3</span>:</span><br><span class="line">    __touch_id = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_touch_id</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.__touch_id:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;指纹识别已通过&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;指纹识别未通过&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>(Phone1, Phone2, Phone3):</span><br><span class="line">    __using_time = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check_using_time</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.__using_time &gt;= <span class="number">10</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;使用时间过长&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;可以继续使用&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">class Phone(Phone1, Phone2, Phone3):</span></span><br><span class="line"><span class="string">    pass</span></span><br><span class="line"><span class="string">只是整和父类功能创建子类，可用pass关键字来让程序符合要求</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">phone = Phone()</span><br><span class="line">phone.call_by_5g()</span><br><span class="line">phone.check_face_id()</span><br><span class="line">phone.check_touch_id()</span><br><span class="line">phone.check_using_time()</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">5g开启</span></span><br><span class="line"><span class="string">正在通话中</span></span><br><span class="line"><span class="string">面部识别已通过</span></span><br><span class="line"><span class="string">指纹识别已通过</span></span><br><span class="line"><span class="string">使用时间过长</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>继承的顺序</p>
<p>如果不同的父类中的成员变量（或成员方法）名称相同，那么子类会从左到右优先继承父类</p>
<p>例子（继承的顺序）</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test1</span>:</span><br><span class="line">    number = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test2</span>:</span><br><span class="line">    number = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;fun_1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test3</span>:</span><br><span class="line">    number = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;fun_2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>(Test1, Test2, Test3):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">test = Test()</span><br><span class="line"><span class="built_in">print</span>(test.number)</span><br><span class="line">test.fun()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">##输出：</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">fun_1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##Test1和Test2中有相同名称的成员变量，Test2与Test3中有相同的成员方法，按照继承顺序，test继承了Test1的成员变量，继承了Test2的成员方法</span></span><br></pre></td></tr></table></figure>
<h2 id="复写父类成员和调用父类成员">复写父类成员和调用父类成员</h2>
<p>复写父类成员</p>
<p>在继承时，子类的类内容体可以改写继承的父类成员的成员变量或者方法，但父类成员本身不改变</p>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone1</span>:</span><br><span class="line">    name = <span class="string">&quot;小米&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = <span class="number">88324</span></span><br><span class="line">    producer = <span class="string">&quot;富士康&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_welcome</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您好&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>(<span class="title class_ inherited__">Phone1</span>):</span><br><span class="line">    name = <span class="string">&quot;华为&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = <span class="number">66879</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_welcome</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你好，欢迎使用&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">phone_1 = Phone1()</span><br><span class="line">phone_2 = Phone()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(phone_1.name)</span><br><span class="line"><span class="built_in">print</span>(phone_2.name)</span><br><span class="line"><span class="built_in">print</span>(phone_1.<span class="built_in">id</span>)</span><br><span class="line"><span class="built_in">print</span>(phone_2.<span class="built_in">id</span>)</span><br><span class="line">phone_1.show_welcome()</span><br><span class="line">phone_2.show_welcome()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">##输出：</span></span><br><span class="line"><span class="string">小米 # 父类成员变量不变</span></span><br><span class="line"><span class="string">华为 # 复写父类成员变量</span></span><br><span class="line"><span class="string">88324 # 父类成员变量不变</span></span><br><span class="line"><span class="string">66879# 复写父类成员变量</span></span><br><span class="line"><span class="string">您好 # 父类成员方法不变</span></span><br><span class="line"><span class="string">你好，欢迎使用# 复写父类成员方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在子类中调用父类成员</p>
<p>在子类继承父类的过程中，有些父类的成员被子类复写了，但是我们还是希望能够在复写之后使用父类的成员，这个时候就需要调用父类的成员</p>
<p>但是要注意：只能在子类内部调用父类的变量和方法，在子类的实体类对象调用的变量或者方法默认为子类复写之后的</p>
<p>语法1：</p>
<p>使用成员变量：<code>父类名.成员变量</code></p>
<p>使用成员方法：<code>父类名.成员方法（self）</code></p>
<p>语法2：</p>
<p>使用成员变量：<code>super().成员变量</code></p>
<p>使用成员方法：<code>super().成员方法()</code></p>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone1</span>:</span><br><span class="line">    name = <span class="string">&quot;小米&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = <span class="number">88324</span></span><br><span class="line">    producer = <span class="string">&quot;富士康&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_welcome</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您好，这里是小米手机&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone2</span>:</span><br><span class="line">    name = <span class="string">&quot;红米&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = <span class="number">98547</span></span><br><span class="line">    producer = <span class="string">&quot;立讯&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_welcome</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您好，这里是红米手机&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>(Phone2, Phone1): <span class="comment"># 多继承</span></span><br><span class="line">    name = <span class="string">&quot;华为&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = <span class="number">66879</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_welcome</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;你好，欢迎使用华为手机&quot;</span>) <span class="comment">#复写</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">father_function</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line"><span class="comment">##第一种子类调用父类成员的方法</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;使用父类的功能：打印父类name<span class="subst">&#123;Phone1.name&#125;</span>打印父类欢迎语句:&quot;</span>) <span class="comment">#这种调用父类的方法无论在多继承还是单继承中都好用，因为他规定了父类名</span></span><br><span class="line">        Phone1.show_welcome(self)</span><br><span class="line"></span><br><span class="line"><span class="comment">##第二种子类调用父类成员的方法</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;使用父类的功能：打印父类name<span class="subst">&#123;<span class="built_in">super</span>().name&#125;</span>打印父类欢迎语句:&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">##这种父类调用方法在多继承中要注意，若有同名变量或方法，这种方法只会调用按从左至右的优先级排列的父类的变量或方法</span></span><br><span class="line">        <span class="built_in">super</span>().show_welcome()                                          </span><br><span class="line"></span><br><span class="line">phone = Phone()</span><br><span class="line">phone.father_function()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">##输出：</span></span><br><span class="line"><span class="string">使用父类的功能：打印父类name小米打印父类欢迎语句:</span></span><br><span class="line"><span class="string">您好，这里是小米手机 #第一种方法指定了打印和运行父类Phone1的成员变量和方法</span></span><br><span class="line"><span class="string">使用父类的功能：打印父类name红米打印父类欢迎语句:</span></span><br><span class="line"><span class="string">您好，这里是红米手机 #第二种方法没有指定到底打印和运行哪个父类的变量和方法，但是依据继承的从左至右的优先级，super（）方法会调用优先级最高的父类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="变量的类型注解">变量的类型注解</h2>
<p>当我们调用方法时，输入方法的前几个字母，<code>pycharm</code>就会自动跳出方法的全名，而且还标注了这个方法中所需要填写的变量的类型（<code>ctrl+p</code>显示）。但如果我们自定义一个带有传入参数的函数，要调用这个参数的一些方法时（比如这个参数是列表），<code>pycharm</code>并不能自动弹出方法的全名，在使用这个自定义函数时，如果按<code>ctrl+p</code>显示传入参数的类型，那么<code>pycharm</code>只能显示这个函数要使用是个类型为传入参数名的传入参数</p>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = []</span><br><span class="line"><span class="built_in">list</span>.ap   <span class="comment">#当输入ap时，pycharm会自动弹出append（）方法来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">data</span>):</span><br><span class="line">    data.ap  <span class="comment"># 当输入ap时，pycharm不会自动弹出append（）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random <span class="comment"># 导入随机数模块</span></span><br><span class="line">random.randint() <span class="comment">#使用方法，当光标在括号中按ctrl+p会显示：a:int, b:int  用来提示需要填入的参数类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span>  <span class="comment"># 定义一个有形式参数的函数，但是pycharm并不知道这个形式参数是什么类型的</span></span><br><span class="line"></span><br><span class="line">fun() <span class="comment"># 当在括号中按ctrl+p显示要填入的参数的类型时，会显示data,因为pycharm不知道date是什么说明类型的</span></span><br></pre></td></tr></table></figure>
<p>类型注解</p>
<p>语法：<code>变量名</code>：<code>类型</code></p>
<p>变量的类型注解</p>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">var_1:<span class="built_in">int</span> = <span class="number">10</span></span><br><span class="line">var_2:<span class="built_in">float</span> = <span class="number">0.5</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">stu: Student = Studnet()</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">a: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun() <span class="comment">#在括号里按ctrl+p就可以看到a：int的提示，说明类型被注解了</span></span><br></pre></td></tr></table></figure>
<p>容器的类型注解：</p>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_list: <span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">my_tuple: <span class="built_in">tuple</span> = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">my_set: <span class="built_in">set</span> = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">my_dict: <span class="built_in">dict</span> = &#123;<span class="string">&quot;哈哈哈&quot;</span>: <span class="number">6666</span>&#125;</span><br><span class="line">my_str: <span class="built_in">str</span> = <span class="string">&quot;fuck&quot;</span></span><br></pre></td></tr></table></figure>
<p>容器类型详细注解</p>
<p>语法：<code>变量名</code>：
<code>容器类型[允许的数据类型1, 允许的数据容器2, 。。。]</code>
<code>变量名</code>：
<code>dict[key的数据类型, value的数据类型]</code></p>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_list: <span class="built_in">list</span>[<span class="built_in">int</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">#注意虽然注解了列表中是int，但是如果填入str或者float也不会报错，说明变量的注解是提示性的而不是决定性的</span></span><br><span class="line">my_tuple: <span class="built_in">tuple</span>[<span class="built_in">str</span>, <span class="built_in">bool</span>, <span class="built_in">int</span>] = (<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;a&quot;</span>) <span class="comment">#注解为：第一个元素类型为str，第二个为bool，第三个为int，需要把每个元素的类型标记出来</span></span><br><span class="line">my_set: <span class="built_in">set</span>[<span class="built_in">int</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">my_dict: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>] = &#123;<span class="string">&quot;哈哈哈&quot;</span>: <span class="number">6666</span>&#125; <span class="comment"># 注意字典的注解的不同</span></span><br></pre></td></tr></table></figure>
<p>在注释中进行类型注解：</p>
<p>语法：</p>
<p>变量 <code># type：变量类型</code></p>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">var_1 = random.randint(<span class="number">1</span>, <span class="number">20</span>)  <span class="comment"># type: <span class="built_in">int</span></span></span><br><span class="line">var_1 = <span class="number">0.5</span> <span class="comment">#报错 因为前面规定了 var_1只能是int类型</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">var_2 = json.loads(<span class="string">&#x27;&#123;&quot;hahahaha&quot;: &quot;hahah&quot;&#125;&#x27;</span>)  <span class="comment"># type: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">var_3 = fun()  <span class="comment"># type: <span class="built_in">int</span></span></span><br></pre></td></tr></table></figure>
<p>注：</p>
<p>如下显示的变量无需注解，因为一眼就可以看出数据的类型</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_list: <span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">my_tuple: <span class="built_in">tuple</span> = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">my_set: <span class="built_in">set</span> = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">my_dict: <span class="built_in">dict</span> = &#123;<span class="string">&quot;哈哈哈&quot;</span>: <span class="number">6666</span>&#125;</span><br><span class="line">my_str: <span class="built_in">str</span> = <span class="string">&quot;fuck&quot;</span></span><br></pre></td></tr></table></figure>
<p>当一眼不能看出某个函数的返回值是什么的时候，可以加一个注解方便辨识</p>
<p>最后还要注意：注解只是提示性的，而不是决定性的，比如</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">var_1: <span class="built_in">int</span> = <span class="string">&quot;ihao&quot;</span></span><br><span class="line">my_tuple: <span class="built_in">tuple</span>[<span class="built_in">str</span>, <span class="built_in">bool</span>, <span class="built_in">int</span>] = (<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;a&quot;</span>) <span class="comment">#pycharm会提示有问题，但是还是可以运行也是不会出错的</span></span><br></pre></td></tr></table></figure>
<h2 id="函数和方法的类型注解">函数和方法的类型注解</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">data</span>):</span><br><span class="line">data.ap  <span class="comment"># 当输入ap时，pycharm不会自动弹出append（），因为pycharm不知道data的具体类型</span></span><br></pre></td></tr></table></figure>
<p>语法：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数或方法名</span>（形参名<span class="number">1</span>：类型，形参名<span class="number">2</span>：类型...）：</span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">int</span>, y: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(x+y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">2</span>)<span class="comment"># 按ctrl+p可以看到函数中弹出了需要输入变量的类型</span></span><br></pre></td></tr></table></figure>
<p>函数或方法的返回值注解</p>
<p>语法</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数或方法名</span>（形参名<span class="number">1</span>：类型，形参名<span class="number">2</span>：类型...）-&gt;返回值类型：</span><br><span class="line">    函数体</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">int</span>, y: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:<span class="comment">#注释返回值的类型为int</span></span><br><span class="line">    <span class="built_in">print</span>(x+y)</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">2</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>注：在函数中的注解也是提示性的，若不满足要求，只会出现提示，不会影响运行</p>
<h2 id="union类型联合类型">Union类型（联合类型）</h2>
<p>当列表中的元素不止一个类型或字典中的key或value不止一个类型，这种情况该如何进行注解</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_list: <span class="built_in">list</span> = [<span class="number">1</span>, <span class="string">&quot;nihao&quot;</span>, <span class="number">3</span>]</span><br><span class="line">my_dict: <span class="built_in">dict</span> = &#123;<span class="string">&quot;哈哈哈&quot;</span>: <span class="number">6666</span>,<span class="string">&quot;嘻嘻嘻&quot;</span>: <span class="string">&quot;你好&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>语法：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line">my_list: <span class="built_in">list</span>[<span class="type">Union</span>[元素类型<span class="number">1</span>， 元素类型<span class="number">2.</span>..]] = [元素<span class="number">1.</span> 元素<span class="number">2</span>， ...]</span><br><span class="line">my_dict: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]] = &#123;<span class="string">&quot;key1&quot;</span>:value1,<span class="string">&quot;key2&quot;</span>:value2, ... &#125;</span><br><span class="line"><span class="comment">##Union相当于一个联合类型</span></span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"><span class="comment">##在变量中使用联合类型注解</span></span><br><span class="line">my_list: <span class="built_in">list</span>[<span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]] = [<span class="number">1</span>, <span class="string">&quot;nihao&quot;</span>, <span class="number">3</span>]</span><br><span class="line">my_dict: <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]] = &#123;<span class="string">&quot;哈哈哈&quot;</span>: <span class="number">6666</span>, <span class="string">&quot;嘻嘻嘻&quot;</span>: <span class="string">&quot;你好&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">##在函数中使用联合类型注解</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">float</span>], y: <span class="built_in">int</span></span>)-&gt; <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">float</span>]:</span><br><span class="line">    <span class="built_in">print</span>(x+y)</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line">add()</span><br><span class="line"><span class="comment">##当在add中按ctrl+p时，会显示：x：int|float，y：int</span></span><br></pre></td></tr></table></figure>
<h2 id="多态">多态</h2>
<p>多态就是同一个行为（如函数），传入不同的对象，得到的不同的状态</p>
<p>例如定义一个函数，通过类型注解声明需要父类对象，实际传入子类对象进行工作，从而获得不同的工作状态</p>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):<span class="comment">#继承Animal父类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;汪汪汪&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):<span class="comment">#继承Animal父类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;喵喵喵&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_noise</span>(<span class="params">animal: Animal</span>):<span class="comment">#定义形式参数类型为Animal类</span></span><br><span class="line">    animal.speak()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat = Cat()<span class="comment">#实例化类</span></span><br><span class="line">dog = Dog()</span><br><span class="line"></span><br><span class="line">make_noise(cat)<span class="comment">#传入Cat类，Cat类属于Animal子类，符合类型条件。调用Cat类的speak方法</span></span><br><span class="line">make_noise(dog)<span class="comment">#传入Dog类，Dog类属于Animal子类，符合类型条件。调用Dog类的speak方法</span></span><br></pre></td></tr></table></figure>
<p>抽象类：</p>
<p>抽象类是，含有抽象方法的类 #也可以称之为接口</p>
<p>方法体是空实现（pass）的称之为抽象方法</p>
<p>##父类中的空实现是对子类的一种软性约束，要求子类必须复写父类中的一些方法，不然就无法使用
抽象类设计的具体目的是：父类用来确定有哪些方法，具体的实现方法由子类决定</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:<span class="comment">#抽象类/接口</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span> <span class="comment">#抽象方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):<span class="comment">#子类复写父类的方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;汪汪汪&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):<span class="comment">#子类复写父类的方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;喵喵喵&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>例子：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">##抽象的父类顶层设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AC</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cool_wind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span> <span class="comment">#抽象空实现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hot_wind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span> <span class="comment">#抽象空实现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span> <span class="comment">#抽象空实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##具体的子类实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gree</span>(<span class="title class_ inherited__">AC</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cool_wind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Gree make cool wind&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hot_wind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Gree make hot wind&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Gree make swing&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##具体的子类实现</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Midea</span>(<span class="title class_ inherited__">AC</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cool_wind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Midea make cool wind&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hot_wind</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Midea make hot wind&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Midea make swing&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_cool_wind</span>(<span class="params">ac: AC</span>):</span><br><span class="line">    ac.cool_wind()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gree = Gree()</span><br><span class="line">midea = Midea()</span><br><span class="line"><span class="comment">##多态实现</span></span><br><span class="line">make_cool_wind(gree)</span><br><span class="line">make_cool_wind(midea)</span><br></pre></td></tr></table></figure>
<h2 id="面向对象的数据分析">面向对象的数据分析</h2>
<p>data_define.py:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">数据的类的定义</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Record</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data, order_id, money, province</span>):</span><br><span class="line">        self.data: <span class="built_in">str</span> = data</span><br><span class="line">        self.order_id: <span class="built_in">str</span> = order_id</span><br><span class="line">        self.money: <span class="built_in">int</span> = money</span><br><span class="line">        self.province: <span class="built_in">str</span> = province</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.data&#125;</span>, <span class="subst">&#123;self.order_id&#125;</span>, <span class="subst">&#123;self.money&#125;</span>, <span class="subst">&#123;self.province&#125;</span>&quot;</span></span><br><span class="line">        <span class="comment"># 用来设计可以直接打印的类</span></span><br></pre></td></tr></table></figure>
<p>file_define.py:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">文件的处理都在这</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> data_define <span class="keyword">import</span> Record</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">## 进行抽象设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Filereader</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_data</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment">## 读取文件中的数据，将其转换为Record类型进行封装，返回以一个Record类型的列表</span></span><br><span class="line">    <span class="comment"># 设计类之间可以进行相加</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##子类进行具体功能设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Textfilereader</span>(<span class="title class_ inherited__">Filereader</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, path</span>):</span><br><span class="line">        self.path = path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_data</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>[Record]:</span><br><span class="line">        f = <span class="built_in">open</span>(self.path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">        record_list: <span class="built_in">list</span>[Record] = []</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            line = line.strip()</span><br><span class="line">            data_list = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">            record = Record(data_list[<span class="number">0</span>], data_list[<span class="number">1</span>], <span class="built_in">int</span>(data_list[<span class="number">2</span>]), data_list[<span class="number">3</span>])</span><br><span class="line">            record_list.append(record)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> record_list</span><br><span class="line"></span><br><span class="line"><span class="comment">##子类进行具体功能设计</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jsonfilereader</span>(<span class="title class_ inherited__">Filereader</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, path</span>):</span><br><span class="line">        self.path = path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_data</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>[Record]:</span><br><span class="line">        f = <span class="built_in">open</span>(self.path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">        record_list: <span class="built_in">list</span>[Record] = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">            data = json.loads(i)</span><br><span class="line">            record = Record(data[<span class="string">&quot;date&quot;</span>], data[<span class="string">&quot;order_id&quot;</span>], data[<span class="string">&quot;money&quot;</span>], data[<span class="string">&quot;province&quot;</span>])</span><br><span class="line">            record_list.append(record)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> record_list</span><br><span class="line"></span><br><span class="line"><span class="comment">##测试代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    textfilereader = Textfilereader(<span class="string">&quot;2011年1月销售数据.txt&quot;</span>)</span><br><span class="line">    jsonfilereader = Jsonfilereader(<span class="string">&quot;2011年2月销售数据JSON.txt&quot;</span>)</span><br><span class="line">    list1 = textfilereader.read_data()</span><br><span class="line">    list2 = jsonfilereader.read_data()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list2:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>
<p>main.py:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Timeline, Bar</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ThemeType</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">计算一天的销售额</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> file_define <span class="keyword">import</span> Filereader, Jsonfilereader, Textfilereader</span><br><span class="line"><span class="keyword">from</span> data_define <span class="keyword">import</span> Record</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar</span><br><span class="line"></span><br><span class="line">jan_data = Textfilereader(<span class="string">&quot;2011年1月销售数据.txt&quot;</span>)</span><br><span class="line">feb_data = Jsonfilereader(<span class="string">&quot;2011年2月销售数据JSON.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line">all_list: <span class="built_in">list</span>[Record] = jan_data.read_data() + feb_data.read_data()</span><br><span class="line"></span><br><span class="line">money_dict1 = &#123;&#125;</span><br><span class="line"><span class="comment">## 第一种方法</span></span><br><span class="line">money = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> all_list:</span><br><span class="line">    day = i.data</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> all_list:</span><br><span class="line">        <span class="keyword">if</span> k.data == day:</span><br><span class="line">            money += k.money</span><br><span class="line">    money_dict1[day] = money</span><br><span class="line">    money = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(money_dict1)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 第二种方法</span></span><br><span class="line">money_dict2 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> all_list:</span><br><span class="line">    money_dict2[i.data] = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> all_list:</span><br><span class="line">    money_dict2[i.data] += i.money</span><br><span class="line"><span class="built_in">print</span>(money_dict2)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 第三种方法</span></span><br><span class="line">money_dict3 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> all_list:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        money_dict3[i.data] += i.money</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        money_dict3[i.data] = i.money</span><br><span class="line"><span class="built_in">print</span>(money_dict3)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 第四种方法</span></span><br><span class="line">money_dict4 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> all_list:</span><br><span class="line">    <span class="keyword">if</span> i.data <span class="keyword">in</span> money_dict4.keys():</span><br><span class="line">        money_dict4[i.data] += i.money  <span class="comment"># 说明该日期已经被记录了，只需做累加即可</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        money_dict4[i.data] = i.money  <span class="comment"># 说明该日期还没有被记录，创建key并记录第一条value</span></span><br><span class="line"><span class="built_in">print</span>(money_dict4)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">可视化</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line">day_money = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> money_dict1:</span><br><span class="line">    data.append(i)</span><br><span class="line">    day_money.append(money_dict1[i])</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">print</span>(day_money)</span><br><span class="line">bar = Bar(init_opts=InitOpts(theme=ThemeType.LIGHT))</span><br><span class="line"></span><br><span class="line">bar.add_xaxis(data)</span><br><span class="line"></span><br><span class="line">bar.add_yaxis(<span class="string">&quot;销售额（元）&quot;</span>, day_money, label_opts=LabelOpts(position=<span class="string">&quot;left&quot;</span>, is_show=<span class="literal">False</span>))</span><br><span class="line">bar.render(<span class="string">&quot;每日销售额柱状图.html&quot;</span>)</span><br><span class="line">bar.set_global_opts(</span><br><span class="line">    title_opts=TitleOpts(title=<span class="string">&quot;每日销售额&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="闭包">闭包</h2>
<p>若用以下方法定义这个存取款的函数，代码的变量定义不够干净、整洁</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">account_amount = <span class="number">0</span>  <span class="comment"># 账户余额</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">atm</span>(<span class="params">num, deposit=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="keyword">global</span> account_amount</span><br><span class="line">    <span class="keyword">if</span> deposit:</span><br><span class="line">        account_amount += num</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;存款：+<span class="subst">&#123;num&#125;</span>,账户余额：<span class="subst">&#123;account_amount&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        account_amount -= num</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;取款：-<span class="subst">&#123;num&#125;</span>,账户余额：<span class="subst">&#123;account_amount&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>可能会出现一些风险的问题，在其他人引用这个函数的时候，全局变量<code>account_amount</code>可能会被修改</p>
<p>这时候就要用到闭包，在函数嵌套的前提下，内部函数使用了外部函数的变量，并且外部函数返回了内部函数，我们把这个使用外部函数变量的内部函数成为闭包</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">logo</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">msg</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;&lt;<span class="subst">&#123;logo&#125;</span>&gt;<span class="subst">&#123;msg&#125;</span>&lt;<span class="subst">&#123;logo&#125;</span>&gt;&quot;</span>)  <span class="comment"># 内部函数称为闭包函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner <span class="comment"># 将内部函数作为返回值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = outer(<span class="string">&quot;kiki&quot;</span>) <span class="comment"># 对于f1，外部变量logo就锁定为“kiki”</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f1))</span><br><span class="line">f1(<span class="string">&quot;fuck&quot;</span>)</span><br><span class="line"></span><br><span class="line">f2 = outer(<span class="string">&quot;haha&quot;</span>) <span class="comment"># 对于f2，外部变量logo就锁定为“haha” </span></span><br><span class="line">f2(<span class="string">&quot;suck&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;class &#x27;function&#x27;&gt;</span></span><br><span class="line"><span class="string">&lt;kiki&gt;fuck&lt;kiki&gt;</span></span><br><span class="line"><span class="string">&lt;haha&gt;suck&lt;haha&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>在上面的代码中<code>outer</code>函数用来接受传入参数<code>logo</code>，并且返回<code>outer</code>内部的函数<code>inner</code>。由于<code>outer</code>函数的作用域，<code>inner</code>函数体也能识别到传入的<code>logo</code>变量的值，对于<code>inner</code>函数来说，<code>logo</code>就是外部变量</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">f1 = outer(<span class="string">&quot;kiki&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这时<code>f1</code>就相当于函数<code>inne</code>，不过这是的<code>inner</code>内部的<code>logo</code>变量已经被<code>f1 = outer("kiki")</code>所确定，所以这时</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">f1(<span class="string">&quot;fuck&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>只是在为<code>inner</code>函数提供传入参数<code>msg</code>，也就是说<code>nner（f1）</code>函数是在l<code>ogo</code>变量已经确定的情况下给<code>msg</code>赋值,内部函数无法去修改外部函数的值</p>
<h3
id="nonlocal关键字在闭包中修改外部函数的值">nonlocal关键字：在闭包中修改外部函数的值</h3>
<p>只需要在闭包中添加</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">nonlocal</span> 外部变量</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">num1</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">num2</span>):</span><br><span class="line">        <span class="keyword">nonlocal</span> num1  <span class="comment"># 在闭包中改变外部变量的值</span></span><br><span class="line">        num1 += num2</span><br><span class="line">        <span class="built_in">print</span>(num1)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = outer(<span class="number">10</span>) <span class="comment"># 定义初始num1的值</span></span><br><span class="line">f1(<span class="number">10</span>) <span class="comment"># 在inner中修改num1的值</span></span><br><span class="line">f1(<span class="number">10</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">20</span></span><br><span class="line"><span class="string">30</span></span><br><span class="line"><span class="string">40</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>上述代码中<code>num1</code>只是一个临时变量，当这个函数被应用的时候传入参数是要从外部导入的，这就保证了变量在函数的使用过程中不会被恶意串改</p>
<h3 id="atm案例">ATM案例</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">account_create</span>(<span class="params">initial_amount=<span class="number">0</span></span>):  <span class="comment"># 默认初始金额为0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">atm</span>(<span class="params">num: <span class="built_in">int</span>, deposit=<span class="literal">True</span></span>):  <span class="comment"># 默认取钱</span></span><br><span class="line">        <span class="keyword">nonlocal</span> initial_amount</span><br><span class="line">        <span class="keyword">if</span> deposit:</span><br><span class="line">            initial_amount += num</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;存款：+<span class="subst">&#123;num&#125;</span>,账户余额：<span class="subst">&#123;initial_amount&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            initial_amount -= num</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;取款：-<span class="subst">&#123;num&#125;</span>,账户余额：<span class="subst">&#123;initial_amount&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> atm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = account_create()  <span class="comment"># 默认初始金额为0,外部变量已经固定</span></span><br><span class="line">f1(<span class="number">500</span>) <span class="comment"># 当使用内部函数f1时，外部变量一直被保存和修改</span></span><br><span class="line">f1(<span class="number">600</span>)</span><br><span class="line">f1(<span class="number">200</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line">come_from_outside_money = <span class="number">900</span>  <span class="comment"># 从外部得到的存款余额900,外部变量已经固定</span></span><br><span class="line">f2 = account_create(come_from_outside_money)</span><br><span class="line">f2(<span class="number">500</span>, <span class="literal">False</span>) <span class="comment"># 当使用内部函数f2时，外部变量一直被保存和修改</span></span><br><span class="line">f2(<span class="number">1000</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">存款：+500,账户余额：500</span></span><br><span class="line"><span class="string">存款：+600,账户余额：1100</span></span><br><span class="line"><span class="string">取款：-200,账户余额：900</span></span><br><span class="line"><span class="string">-----------------------------------</span></span><br><span class="line"><span class="string">取款：-500,账户余额：400</span></span><br><span class="line"><span class="string">存款：+1000,账户余额：1400</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在以上案例中，银行的余额只能从外部函数获取，内部函数只负责余额的加减。这个函数被调用时，函数只让被使用者传入的余额变量进行改变，保证了规范性</p>
<p><strong>闭包的优点</strong></p>
<ul>
<li>无需定义全局变量即可实现通过函数，持续访问、修改某个值</li>
<li>闭包所使用的变量作用域只在函数内，难以被错误的调用修改</li>
</ul>
<p>闭包的缺点</p>
<ul>
<li>由于内部函数持续引用外部函数的值，所以会导致这一部分内存空间不被释放（保证外部函数的值一直存在），一直占用内存</li>
</ul>
<h2 id="装饰器">装饰器</h2>
<p>装饰器也是一种闭包，它是再不改变函数䣌原有代码的功能的基础下，为目标函数增加新功能的方法。</p>
<p>有如下函数：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;睡眠中。。。。。&quot;</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<p>如果想为这个函数添加一个新功能：在调用<code>sleep</code>前输出<code>我要睡觉了</code>，在调用后输出<code>我起床了</code>。实现这个功能当然可以在调用函数前后直接打印这两段话，或者重新写一个函数。但是使用装饰器可以更优雅的实现这个功能</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;睡眠中。。。。。&quot;</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):  <span class="comment"># 为outer函数传入func</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我要睡觉了&quot;</span>)</span><br><span class="line">        func()  <span class="comment"># 使用func()函数，inner固定func()函数，注意括号</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我起床了&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner  <span class="comment"># 返回函数，无需加括号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f1 = outer(sleep)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(f1))</span><br><span class="line">f1()  <span class="comment"># 加括号，使用函数</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;class &#x27;function&#x27;&gt;</span></span><br><span class="line"><span class="string">我要睡觉了</span></span><br><span class="line"><span class="string">睡眠中。。。。。</span></span><br><span class="line"><span class="string">我起床了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="装饰器的语法糖写法">装饰器的语法糖写法</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(<span class="params">func</span>):  <span class="comment"># 为outer函数传入func</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我要睡觉了&quot;</span>)</span><br><span class="line">        func()  <span class="comment"># 使用func()函数，inner固定func()函数，注意括号</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我起床了&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner  <span class="comment"># 返回函数，无需加括号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@outer </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;本质还是调用outer函数，将下面的sleep函数传入给outer函数，逻辑和之前的一样，最终也是使用inner函数，@outer就是装饰器，相当于给sleep增加了一个叫outer的装饰器。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sleep</span>():</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;睡眠中。。。。。&quot;</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">sleep()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">我要睡觉了</span></span><br><span class="line"><span class="string">睡眠中。。。。。</span></span><br><span class="line"><span class="string">我起床了</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>结果相同</p>
<h1 id="numpy基础">NUMPY基础</h1>
<p>Numpy（Numerical
Python）是一个开源的Python科学计算库，用于快速处理任意维度的数组。</p>
<p>Numpy支持常见的数组和矩阵操作。对于同样的数值计算任务，使用Numpy比直接使用Python要简洁的多。</p>
<p>Numpy使用ndarray对象来处理多维数组，该对象是一个快速而灵活的大数据容器。</p>
<h2 id="numpy安装">NUMPY安装</h2>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure>
<p>验证NUMPY是否安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">print</span>(np.__version__)</span><br></pre></td></tr></table></figure>
<h2 id="ndarray介绍">Ndarray介绍</h2>
<p>NumPy提供了一个N维数组类型ndarray，它描述了相同类型的“items”的集合。</p>
<ul>
<li>​ n - 任意个</li>
<li>​ d - dimension 维度</li>
<li>​ array - 数组</li>
</ul>
<h3 id="创建ndarray">创建NDARRAY</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">numpy.array(object, dtype <span class="operator">=</span> <span class="keyword">None</span>, <span class="keyword">copy</span> <span class="operator">=</span> <span class="literal">True</span>, <span class="keyword">order</span> <span class="operator">=</span> <span class="keyword">None</span>, subok <span class="operator">=</span> <span class="literal">False</span>, ndmin <span class="operator">=</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">名称</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">object</td>
<td style="text-align: left;">数组或嵌套的数列</td>
</tr>
<tr class="even">
<td style="text-align: left;">dtype</td>
<td style="text-align: left;">数组元素的数据类型，可选</td>
</tr>
<tr class="odd">
<td style="text-align: left;">copy</td>
<td style="text-align: left;">对象是否需要复制，可选</td>
</tr>
<tr class="even">
<td style="text-align: left;">order</td>
<td
style="text-align: left;">创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）</td>
</tr>
<tr class="odd">
<td style="text-align: left;">subok</td>
<td style="text-align: left;">默认返回一个与基类类型一致的数组</td>
</tr>
<tr class="even">
<td style="text-align: left;">ndmin</td>
<td style="text-align: left;">指定生成数组的最小维度</td>
</tr>
</tbody>
</table>
<ul>
<li>ndarray.方法（） # ndarry为类，类中有方法</li>
<li>numpy.函数名（） # numpy为包，包中有函数</li>
</ul>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">语文</th>
<th style="text-align: left;">数学</th>
<th style="text-align: left;">英语</th>
<th style="text-align: left;">政治</th>
<th style="text-align: left;">体育</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">80</td>
<td style="text-align: left;">89</td>
<td style="text-align: left;">86</td>
<td style="text-align: left;">67</td>
<td style="text-align: left;">79</td>
</tr>
<tr class="even">
<td style="text-align: left;">78</td>
<td style="text-align: left;">97</td>
<td style="text-align: left;">89</td>
<td style="text-align: left;">67</td>
<td style="text-align: left;">81</td>
</tr>
<tr class="odd">
<td style="text-align: left;">90</td>
<td style="text-align: left;">94</td>
<td style="text-align: left;">78</td>
<td style="text-align: left;">67</td>
<td style="text-align: left;">74</td>
</tr>
<tr class="even">
<td style="text-align: left;">91</td>
<td style="text-align: left;">91</td>
<td style="text-align: left;">90</td>
<td style="text-align: left;">67</td>
<td style="text-align: left;">69</td>
</tr>
<tr class="odd">
<td style="text-align: left;">76</td>
<td style="text-align: left;">87</td>
<td style="text-align: left;">75</td>
<td style="text-align: left;">67</td>
<td style="text-align: left;">86</td>
</tr>
<tr class="even">
<td style="text-align: left;">70</td>
<td style="text-align: left;">79</td>
<td style="text-align: left;">84</td>
<td style="text-align: left;">67</td>
<td style="text-align: left;">84</td>
</tr>
<tr class="odd">
<td style="text-align: left;">94</td>
<td style="text-align: left;">92</td>
<td style="text-align: left;">93</td>
<td style="text-align: left;">67</td>
<td style="text-align: left;">64</td>
</tr>
<tr class="even">
<td style="text-align: left;">86</td>
<td style="text-align: left;">85</td>
<td style="text-align: left;">83</td>
<td style="text-align: left;">67</td>
<td style="text-align: left;">80</td>
</tr>
</tbody>
</table>
<p>使用numpy创建上述表格的ndarray对象</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">score = np.array([[<span class="number">80</span>, <span class="number">89</span>, <span class="number">86</span>, <span class="number">67</span>, <span class="number">79</span>],</span><br><span class="line">[<span class="number">78</span>, <span class="number">97</span>, <span class="number">89</span>, <span class="number">67</span>, <span class="number">81</span>],</span><br><span class="line">[<span class="number">90</span>, <span class="number">94</span>, <span class="number">78</span>, <span class="number">67</span>, <span class="number">74</span>],</span><br><span class="line">[<span class="number">91</span>, <span class="number">91</span>, <span class="number">90</span>, <span class="number">67</span>, <span class="number">69</span>],</span><br><span class="line">[<span class="number">76</span>, <span class="number">87</span>, <span class="number">75</span>, <span class="number">67</span>, <span class="number">86</span>],</span><br><span class="line">[<span class="number">70</span>, <span class="number">79</span>, <span class="number">84</span>, <span class="number">67</span>, <span class="number">84</span>],</span><br><span class="line">[<span class="number">94</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">67</span>, <span class="number">64</span>],</span><br><span class="line">[<span class="number">86</span>, <span class="number">85</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">80</span>]])</span><br><span class="line"></span><br><span class="line">score</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">array([[<span class="number">80</span>, <span class="number">89</span>, <span class="number">86</span>, <span class="number">67</span>, <span class="number">79</span>],</span><br><span class="line">       [<span class="number">78</span>, <span class="number">97</span>, <span class="number">89</span>, <span class="number">67</span>, <span class="number">81</span>],</span><br><span class="line">       [<span class="number">90</span>, <span class="number">94</span>, <span class="number">78</span>, <span class="number">67</span>, <span class="number">74</span>],</span><br><span class="line">       [<span class="number">91</span>, <span class="number">91</span>, <span class="number">90</span>, <span class="number">67</span>, <span class="number">69</span>],</span><br><span class="line">       [<span class="number">76</span>, <span class="number">87</span>, <span class="number">75</span>, <span class="number">67</span>, <span class="number">86</span>],</span><br><span class="line">       [<span class="number">70</span>, <span class="number">79</span>, <span class="number">84</span>, <span class="number">67</span>, <span class="number">84</span>],</span><br><span class="line">       [<span class="number">94</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">67</span>, <span class="number">64</span>],</span><br><span class="line">       [<span class="number">86</span>, <span class="number">85</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">80</span>]])</span><br></pre></td></tr></table></figure>
<p>查看score的类型</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>(score)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">numpy.ndarray</span><br></pre></td></tr></table></figure>
<h3
id="ndarray与python原生list运算效率对比">Ndarray与Python原生list运算效率对比</h3>
<p>先生成一个数极多的列表，将他变为ndarray类型和原生list类型，在对这些元素进行求和，记录时间，看哪一个快。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time <span class="comment"># 引入时间包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个大数组，一亿个元素</span></span><br><span class="line">python_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000000</span>):</span><br><span class="line">    python_list.append(random.random())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表转化为ndarray</span></span><br><span class="line">ndarray_list = np.array(python_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 原生pythonlist求和</span></span><br><span class="line">t1 = time.time() <span class="comment"># 记录开始时间</span></span><br><span class="line">a = <span class="built_in">sum</span>(python_list)</span><br><span class="line">t2 = time.time() <span class="comment"># 记录结束时间</span></span><br><span class="line">d1 = t2 - t1</span><br><span class="line"></span><br><span class="line"><span class="comment"># ndarray求和</span></span><br><span class="line">t3 = time.time()</span><br><span class="line">b = np.<span class="built_in">sum</span>(ndarray_list) <span class="comment"># 使用numpy内置方法.sum求和</span></span><br><span class="line">t4 = time.time()</span><br><span class="line">d2 = t4 - t3</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d1,d2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0.29117655754089355 0.0663759708404541</span></span><br></pre></td></tr></table></figure>
<p>可以看到numpy的运行时间比list要小，效率更高！</p>
<p>机器学习的最大特点就是大量的数据运算，那么如果没有一个快速的解决方案，那可能现在python也在机器学习领域达不到好的效果。Numpy专门针对ndarray的操作和运算进行了设计，所以数组的存储效率和输入输出性能远优于Python中的嵌套列表，数组越大，Numpy的优势就越明显。</p>
<h3 id="ndarray的优势">ndarray的优势</h3>
<h4 id="存储风格">存储风格</h4>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250320143821580-acee83.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>从图中我们可以看出ndarray在存储数据的时候，数据与数据的地址都是连续的，这样就给使得批量操作数组元素时速度更快。</p>
<p>这是因为ndarray中的所有元素的类型都是相同的，而Python列表中的元素类型是任意的，所以ndarray在存储元素时内存可以连续，而python原生list就只能通过寻址方式找到下一个元素，这虽然也导致了在通用性能方面Numpy的ndarray不及Python原生list，但在科学计算中，Numpy的ndarray就可以省掉很多循环语句，代码使用方面比Python原生list简单的多。</p>
<h4 id="并行化运算">并行化运算</h4>
<p>ndarray支持向量化运算</p>
<h4 id="底层语言">底层语言</h4>
<p>Numpy底层使用C语言编写，内部解除了GIL（全局解释器锁），其对数组的操作速度不受Python解释器的限制，效率远高于纯Python代码。</p>
<h2 id="ndarray的属性">NDARRAY的属性</h2>
<p>数组属性反映了数组本身的固有信息</p>
<table>
<thead>
<tr class="header">
<th style="text-align: left;">属性名字</th>
<th style="text-align: left;">属性解释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">ndarray.shape</td>
<td style="text-align: left;">数组维度的元组</td>
</tr>
<tr class="even">
<td style="text-align: left;">ndarray.ndim</td>
<td style="text-align: left;">数组维数</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ndarray.size</td>
<td style="text-align: left;">数组中的元素数量</td>
</tr>
<tr class="even">
<td style="text-align: left;">ndarray.itemsize</td>
<td style="text-align: left;">一个数组元素的长度（字节）</td>
</tr>
<tr class="odd">
<td style="text-align: left;">ndarray.dtype</td>
<td style="text-align: left;">数组元素的类型</td>
</tr>
</tbody>
</table>
<p>比如按照上面创建的score数组，输出以上的属性</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">score = np.array([[<span class="number">80</span>, <span class="number">89</span>, <span class="number">86</span>, <span class="number">67</span>, <span class="number">79</span>],</span><br><span class="line">[<span class="number">78</span>, <span class="number">97</span>, <span class="number">89</span>, <span class="number">67</span>, <span class="number">81</span>],</span><br><span class="line">[<span class="number">90</span>, <span class="number">94</span>, <span class="number">78</span>, <span class="number">67</span>, <span class="number">74</span>],</span><br><span class="line">[<span class="number">91</span>, <span class="number">91</span>, <span class="number">90</span>, <span class="number">67</span>, <span class="number">69</span>],</span><br><span class="line">[<span class="number">76</span>, <span class="number">87</span>, <span class="number">75</span>, <span class="number">67</span>, <span class="number">86</span>],</span><br><span class="line">[<span class="number">70</span>, <span class="number">79</span>, <span class="number">84</span>, <span class="number">67</span>, <span class="number">84</span>],</span><br><span class="line">[<span class="number">94</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">67</span>, <span class="number">64</span>],</span><br><span class="line">[<span class="number">86</span>, <span class="number">85</span>, <span class="number">83</span>, <span class="number">67</span>, <span class="number">80</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(score.shape)</span><br><span class="line"><span class="built_in">print</span>(score.ndim)</span><br><span class="line"><span class="built_in">print</span>(score.size)</span><br><span class="line"><span class="built_in">print</span>(score.itemsize)</span><br><span class="line"><span class="built_in">print</span>(score.dtype)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">(<span class="number">8</span>, <span class="number">5</span>) <span class="comment"># 共八行五列</span></span><br><span class="line"><span class="number">2</span> <span class="comment"># 二维</span></span><br><span class="line"><span class="number">40</span> <span class="comment"># 共40个元素</span></span><br><span class="line"><span class="number">8</span> <span class="comment"># 每个元素大小为8字节</span></span><br><span class="line">int64 <span class="comment"># 元素的类型为int64</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在创建ndarray时，若没有指定dtype，如果数据时整数，那么默认为int64类型；若为浮点数，那么默认为float64类型</p>
</blockquote>
<h2 id="ndarray的形状">NDARRAY的形状</h2>
<p>创建三个数组，并观察他们的shape属性</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">c = np.array([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]],[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.shape)</span><br><span class="line"><span class="built_in">print</span>(b.shape)</span><br><span class="line"><span class="built_in">print</span>(c.shape)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(2, 3)</span></span><br><span class="line"><span class="string">(4,)</span></span><br><span class="line"><span class="string">(2, 2, 3)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>其实这个数组的个数就相当于表中的索引个数</p>
<p>例如二维数组，有两个索引，即在ndarray中显示为有两个中的括号的，每一维度的索引有三个值，所以这个的shape为（3，3）</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250320151457612-98a60e.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>对于三维数组可以看成是一个xyz轴，z轴上也有系列的索引，共有三层，每一层又又9个对应于不同xy
的元素，shape为（3，3，3）</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250320151643463-f735a1.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>高于3维难以用图形去理解；</p>
<p>对于这三个数组</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">b = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">c = np.array([[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]],[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]])</span><br></pre></td></tr></table></figure>
<ul>
<li>a有两层中括号，代表有两维的索引，首先最外层的索引中有两个元素（两个嵌套的列表），最里层的中括号里有三个元素，所以a.shape为（2，3）</li>
<li>b只有一层中括号，为一维数组，b.shape为（4，）</li>
<li>c中最外层有两个元素，中间层2个，最里层3个，所以c.shape为（2，2，3）</li>
</ul>
<blockquote>
<p>可以这样理解x.shape的(
)中有几个数字，就代表了x是多少维的数组；（）中的第一个数字，代表了最外层的中括号包含了几个列表元素，下一个数字代表了再往下一层中括号中嵌套的列表的元素个数；这也能解释为什么一维数组的shape为（N,）;</p>
</blockquote>
<h2 id="ndarray的类型">NDARRAY的类型</h2>
<table>
<colgroup>
<col style="width: 17%" />
<col style="width: 82%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">名称</th>
<th style="text-align: left;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">np.bool</td>
<td style="text-align: left;">布尔型数据类型（True 或者 False）</td>
</tr>
<tr class="even">
<td style="text-align: left;">np.int_</td>
<td style="text-align: left;">默认的整数类型（类似于 C 语言中的
long，int32 或 int64）</td>
</tr>
<tr class="odd">
<td style="text-align: left;">np.intc</td>
<td style="text-align: left;">与 C 的 int 类型一样，一般是 int32 或 int
64</td>
</tr>
<tr class="even">
<td style="text-align: left;">np.intp</td>
<td style="text-align: left;">用于索引的整数类型（类似于 C 的
ssize_t，一般情况下仍然是 int32 或 int64）</td>
</tr>
<tr class="odd">
<td style="text-align: left;">np.int8</td>
<td style="text-align: left;">字节（-128 to 127）</td>
</tr>
<tr class="even">
<td style="text-align: left;">np.int16</td>
<td style="text-align: left;">整数（-32768 to 32767）</td>
</tr>
<tr class="odd">
<td style="text-align: left;">np.int32</td>
<td style="text-align: left;">整数（-2147483648 to 2147483647）</td>
</tr>
<tr class="even">
<td style="text-align: left;">np.int64</td>
<td style="text-align: left;">整数（-9223372036854775808 to
9223372036854775807）</td>
</tr>
<tr class="odd">
<td style="text-align: left;">np.uint8</td>
<td style="text-align: left;">无符号整数（0 to 255）</td>
</tr>
<tr class="even">
<td style="text-align: left;">np.uint16</td>
<td style="text-align: left;">无符号整数（0 to 65535）</td>
</tr>
<tr class="odd">
<td style="text-align: left;">np.uint32</td>
<td style="text-align: left;">无符号整数（0 to 4294967295）</td>
</tr>
<tr class="even">
<td style="text-align: left;">np.uint64</td>
<td style="text-align: left;">无符号整数（0 to
18446744073709551615）</td>
</tr>
<tr class="odd">
<td style="text-align: left;">np.float_</td>
<td style="text-align: left;">float64 类型的简写</td>
</tr>
<tr class="even">
<td style="text-align: left;">np.float16</td>
<td style="text-align: left;">半精度浮点数，包括：1 个符号位，5
个指数位，10 个尾数位</td>
</tr>
<tr class="odd">
<td style="text-align: left;">np.float32</td>
<td style="text-align: left;">单精度浮点数，包括：1 个符号位，8
个指数位，23 个尾数位</td>
</tr>
<tr class="even">
<td style="text-align: left;">np.float64</td>
<td style="text-align: left;">双精度浮点数，包括：1 个符号位，11
个指数位，52 个尾数位</td>
</tr>
<tr class="odd">
<td style="text-align: left;">np.complex_</td>
<td style="text-align: left;">complex128 类型的简写，即 128 位复数</td>
</tr>
<tr class="even">
<td style="text-align: left;">np.complex64</td>
<td style="text-align: left;">复数，表示双 32
位浮点数（实数部分和虚数部分）</td>
</tr>
<tr class="odd">
<td style="text-align: left;">np.complex128</td>
<td style="text-align: left;">复数，表示双 64
位浮点数（实数部分和虚数部分）</td>
</tr>
</tbody>
</table>
<h3 id="在创建数组时指定类型">在创建数组时指定类型</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">k = np.array([<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>], dtype=np.float32)</span><br><span class="line"><span class="built_in">print</span>(k.dtype)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">float32</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="生成数组的方法">生成数组的方法</h2>
<h3 id="生成-0-和-1-的数组">生成 0 和 1 的数组</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n1 = np.zeros(shape=(<span class="number">3</span>, <span class="number">4</span>), dtype=<span class="string">&quot;float32&quot;</span>) <span class="comment"># 生成一组0</span></span><br><span class="line"></span><br><span class="line">n2 = np.ones(shape=[<span class="number">2</span>, <span class="number">3</span>], dtype=np.int32) <span class="comment"># 生成一组1</span></span><br><span class="line"><span class="comment"># shape指定维数和个数，可以用元组，也可以用列表；但是查询出来的shape属性只能是元组</span></span><br><span class="line"><span class="comment"># 注意dtype不同的写法</span></span><br><span class="line"><span class="built_in">print</span>(n1)</span><br><span class="line"><span class="built_in">print</span>(n2)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0. 0.]]</span></span><br><span class="line"><span class="string">-----------------</span></span><br><span class="line"><span class="string">[[1 1 1]</span></span><br><span class="line"><span class="string"> [1 1 1]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="从现有数组生成">从现有数组生成</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data1 = np.array(score) <span class="comment"># 深拷贝</span></span><br><span class="line">data2 = np.asarray(score) <span class="comment"># 浅拷贝</span></span><br><span class="line">data3 = np.copy(score) <span class="comment"># 深拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data1)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data1))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(data2)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data2))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(data3)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(data3))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[80 89 86 67 79]</span></span><br><span class="line"><span class="string"> [78 97 89 67 81]</span></span><br><span class="line"><span class="string"> [90 94 78 67 74]</span></span><br><span class="line"><span class="string"> [91 91 90 67 69]</span></span><br><span class="line"><span class="string"> [76 87 75 67 86]</span></span><br><span class="line"><span class="string"> [70 79 84 67 84]</span></span><br><span class="line"><span class="string"> [94 92 93 67 64]</span></span><br><span class="line"><span class="string"> [86 85 83 67 80]]</span></span><br><span class="line"><span class="string">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="string">---------------------------</span></span><br><span class="line"><span class="string">[[80 89 86 67 79]</span></span><br><span class="line"><span class="string"> [78 97 89 67 81]</span></span><br><span class="line"><span class="string"> [90 94 78 67 74]</span></span><br><span class="line"><span class="string"> [91 91 90 67 69]</span></span><br><span class="line"><span class="string"> [76 87 75 67 86]</span></span><br><span class="line"><span class="string"> [70 79 84 67 84]</span></span><br><span class="line"><span class="string"> [94 92 93 67 64]</span></span><br><span class="line"><span class="string"> [86 85 83 67 80]]</span></span><br><span class="line"><span class="string">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="string">---------------------------</span></span><br><span class="line"><span class="string">[[80 89 86 67 79]</span></span><br><span class="line"><span class="string"> [78 97 89 67 81]</span></span><br><span class="line"><span class="string"> [90 94 78 67 74]</span></span><br><span class="line"><span class="string"> [91 91 90 67 69]</span></span><br><span class="line"><span class="string"> [76 87 75 67 86]</span></span><br><span class="line"><span class="string"> [70 79 84 67 84]</span></span><br><span class="line"><span class="string"> [94 92 93 67 64]</span></span><br><span class="line"><span class="string"> [86 85 83 67 80]]</span></span><br><span class="line"><span class="string">&lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>三组生成方法均成功生成了ndarray对象</p>
<p>若修改原始的<code>score</code>表，观察各个data的变化</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">score[<span class="number">3</span>, <span class="number">1</span>] = <span class="number">10000</span> <span class="comment"># 将score表的第四行第二列数值改为10000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(data2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------------------------&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(data3)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[[80 89 86 67 79]</span></span><br><span class="line"><span class="string"> [78 97 89 67 81]</span></span><br><span class="line"><span class="string"> [90 94 78 67 74]</span></span><br><span class="line"><span class="string"> [91 91 90 67 69]</span></span><br><span class="line"><span class="string"> [76 87 75 67 86]</span></span><br><span class="line"><span class="string"> [70 79 84 67 84]</span></span><br><span class="line"><span class="string"> [94 92 93 67 64]</span></span><br><span class="line"><span class="string"> [86 85 83 67 80]]</span></span><br><span class="line"><span class="string">---------------------------</span></span><br><span class="line"><span class="string">[[   80    89    86    67    79]</span></span><br><span class="line"><span class="string"> [   78    97    89    67    81]</span></span><br><span class="line"><span class="string"> [   90    94    78    67    74]</span></span><br><span class="line"><span class="string"> [   91 10000    90    67    69]</span></span><br><span class="line"><span class="string"> [   76    87    75    67    86]</span></span><br><span class="line"><span class="string"> [   70    79    84    67    84]</span></span><br><span class="line"><span class="string"> [   94    92    93    67    64]</span></span><br><span class="line"><span class="string"> [   86    85    83    67    80]]</span></span><br><span class="line"><span class="string">---------------------------</span></span><br><span class="line"><span class="string">[[80 89 86 67 79]</span></span><br><span class="line"><span class="string"> [78 97 89 67 81]</span></span><br><span class="line"><span class="string"> [90 94 78 67 74]</span></span><br><span class="line"><span class="string"> [91 91 90 67 69]</span></span><br><span class="line"><span class="string"> [76 87 75 67 86]</span></span><br><span class="line"><span class="string"> [70 79 84 67 84]</span></span><br><span class="line"><span class="string"> [94 92 93 67 64]</span></span><br><span class="line"><span class="string"> [86 85 83 67 80]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>发现data2的内容改变了，说明<code>np.asarray()</code>函数为浅拷贝；其余两个为深拷贝</p>
<h5 id="赋值深拷贝和浅拷贝区别">赋值、深拷贝和浅拷贝区别</h5>
<h6 id="赋值">赋值</h6>
<p><strong>b = a:</strong> 赋值引用，a 和 b 都指向同一个对象。</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250320164057759-b238eb.png"  width=55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h6 id="浅拷贝">浅拷贝</h6>
<p><strong>b = a.copy():</strong> 浅拷贝, a 和 b
是一个独立的对象，但他们的子对象还是指向统一对象（是引用）</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250320164130960-99c693.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h6 id="深拷贝">深拷贝</h6>
<p><strong>b = copy.deepcopy(a):</strong> 深度拷贝, a 和 b
完全拷贝了父对象及其子对象，两者是完全独立的。</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250320164201233-5afb29.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h4 id="生成固定范围的数组">生成固定范围的数组</h4>
<p>根据 start 与 stop 指定的范围以及 step 设定的步长，生成一个
ndarray</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">numpy.arange(start, stop, step, dtype)</span><br></pre></td></tr></table></figure>
<table>
<colgroup>
<col style="width: 10%" />
<col style="width: 89%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">参数</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>start</code></td>
<td style="text-align: center;">起始值，默认为<code>0</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>stop</code></td>
<td style="text-align: center;">终止值（不包含）</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>step</code></td>
<td style="text-align: center;">步长，默认为<code>1</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>dtype</code></td>
<td
style="text-align: center;">返回<code>ndarray</code>的数据类型，如果没有提供，则会使用输入数据的类型。</td>
</tr>
</tbody>
</table>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(np.arange(<span class="number">0</span>, <span class="number">11</span>, <span class="number">5</span>)) <span class="comment"># [0,11)，5为步长生成数组</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[ 0  5 10]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>numpy.linspace
函数用于创建一个一维数组，数组是一个等差数列构成的，格式如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">np.linspace(<span class="keyword">start</span>, stop, num<span class="operator">=</span><span class="number">50</span>, endpoint<span class="operator">=</span><span class="literal">True</span>, retstep<span class="operator">=</span><span class="literal">False</span>, dtype<span class="operator">=</span><span class="keyword">None</span>)</span><br></pre></td></tr></table></figure>
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 85%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">参数</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>start</code></td>
<td style="text-align: center;">序列的起始值</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>stop</code></td>
<td
style="text-align: center;">序列的终止值，如果<code>endpoint</code>为<code>true</code>，该值包含于数列中</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>num</code></td>
<td
style="text-align: center;">要生成的等步长的样本数量，默认为<code>50</code></td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>endpoint</code></td>
<td style="text-align: center;">该值为 <code>true</code>
时，数列中包含<code>stop</code>值，反之不包含，默认是True。</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>retstep</code></td>
<td style="text-align: center;">如果为 True
时，生成的数组中会显示间距，反之不显示。</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>dtype</code></td>
<td style="text-align: center;"><code>ndarray</code> 的数据类型</td>
</tr>
</tbody>
</table>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>) <span class="comment"># 生成[0,10]之间等距离的5个数</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([ 0. ,  2.5,  5. ,  7.5, 10. ])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(k.dtype)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">默认为合适的数据类型</span></span><br><span class="line"><span class="string">float64</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="生成随机数组">生成随机数组</h4>
<p>生成随机数组可以使用<code>np.random</code>模块，可以生成不同类型分布的随机数</p>
<h5 id="均匀分布的随机数">均匀分布的随机数</h5>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">np.random.rand(d0, d1, ..., dn)</span><br></pre></td></tr></table></figure>
<p>返回一个n维数组，每个元素都为<strong>[0.0,1.0)</strong>之间的均匀分布随机数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">np.random.rand(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[[0.45527955, 0.16073549, 0.49151397],</span></span><br><span class="line"><span class="string">        [0.88622139, 0.05550505, 0.83274785]]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">np.random.uniform(low=<span class="number">0.0</span>, high=<span class="number">1.0</span>, size=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p>从一个均匀分布中随机采样，生成一个整数或N维整数数组,其形状参数与size中描述一致</p>
<p>取数范围：若high不为None时，取[low,high)之间随机整数，否则取值[0,low)之间随机整数。</p>
<ul>
<li>low: 采样下界，float类型，默认值为0；</li>
<li>high: 采样上界，float类型，默认值为1；</li>
<li>size:
输出样本数目，为int或元组(tuple)类型，例如，size=(m,n,k)，则输出mnk个样本，缺省时输出1个值。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">np.random.uniform(low=<span class="number">0.0</span>, high=<span class="number">1.0</span>, size=(<span class="number">5</span>,<span class="number">2</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">array([[[0.23388311],</span></span><br><span class="line"><span class="string">        [0.39901042]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[0.32860077],</span></span><br><span class="line"><span class="string">        [0.16360136]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[0.42436328],</span></span><br><span class="line"><span class="string">        [0.0393719 ]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[0.43615542],</span></span><br><span class="line"><span class="string">        [0.71969588]],</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       [[0.8606245 ],</span></span><br><span class="line"><span class="string">        [0.59130934]]])</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">np.random.randint(low, high=<span class="literal">None</span>, size=<span class="literal">None</span>, dtype=<span class="string">&#x27;与int有关的类型&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>从一个均匀分布中随机采样，生成一个整数或N维整数数组，取数范围：若high不为None时，取[low,high)之间随机整数，否则取值[0,low)之间随机整数。size可设置形状参数;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成均匀分布的一组数[low,high)</span></span><br><span class="line">data1 = np.random.uniform(low=-<span class="number">1</span>, high=<span class="number">1</span>, size=<span class="number">1000000</span>)</span><br><span class="line"><span class="comment"># 生成正态分布的一组数，loc：均值；scale：标准差</span></span><br><span class="line">data2 = np.random.normal(loc=<span class="number">1.75</span>, scale=<span class="number">0.1</span>, size=<span class="number">1000000</span>)</span><br></pre></td></tr></table></figure>
<h1 id="pyecharts可视化基础">Pyecharts可视化基础</h1>
<h2 id="pyecharts包">pyecharts包</h2>
<p>​
<code>pyecharts</code>是百度开源的一个数据可视化的<code>python</code>包</p>
<p><code>pyecharts</code>官网：<a href="">pyecharts.org</a></p>
<p>​ <code>pyecharts</code>画廊（有各种可视化示例的代码）：<a
href="">gallery.pyecharts.org</a></p>
<p>​
通过<code>pip</code>安装<code>pyecharts</code>模块：打开命令提示符进入<code>cmd</code>输入<code>pip install</code>
pyecharts</p>
<h2 id="pyecharts包的入门使用">pyecharts包的入门使用</h2>
<p>​ 1、折线图的制作</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line <span class="comment">#从pyecharts包的charts模块中导入Line功能（L要大写）</span></span><br><span class="line"></span><br><span class="line">line = Line() <span class="comment">#得到折线图对象line，对比open（）打开文件对象</span></span><br><span class="line">line.add_xaxis([<span class="string">&quot;China&quot;</span>, <span class="string">&quot;USA&quot;</span>, <span class="string">&quot;UK&quot;</span>])<span class="comment">#对折线图对象添加x轴的数据</span></span><br><span class="line">line.add_yaxis(<span class="string">&quot;GDP&quot;</span>, [<span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>])<span class="comment">#对折线图对象添加y轴（因变量）的变量名和数据</span></span><br><span class="line">line.render()<span class="comment">#生成图像，图像是python形式的网页，可以通过网页打开，x轴与y轴的数据是由顺序一一对应的</span></span><br></pre></td></tr></table></figure>
<p>​ 2、<code>pyecharts</code>的全局配置</p>
<p>​
<code>pyecharts</code>的全局配置就是针对整个图像进行设置，比如图像的标题，图像的图例等等</p>
<p>​ 1、图标标题的控制 ​</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> TitleOpts<span class="comment">#dao#导入标题控制功能</span></span><br><span class="line">    line.set_global_opts(</span><br><span class="line">    title_opts=TitleOpts(title=<span class="string">&quot;GDP展示&quot;</span>)</span><br><span class="line">)<span class="comment">#图表标题的修改</span></span><br></pre></td></tr></table></figure>
<p>​ 2、图标标题位置的修改</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> TitleOpts<span class="comment">#dao#导入标题控制功能</span></span><br><span class="line">line.set_global_opts(</span><br><span class="line">title_opts=TitleOpts(title=<span class="string">&quot;GDP展示&quot;</span>,pos_left=<span class="string">&#x27;5%&#x27;</span>, pos_bottom=<span class="string">&#x27;5%&#x27;</span>)</span><br><span class="line">)<span class="comment">#控制标题‘GDP展示’在图表远离左边5%的位置，在远离底部5%的位置</span></span><br><span class="line">title_opts=TitleOpts(title=<span class="string">&quot;GDP展示&quot;</span>,pos_left=<span class="string">&#x27;center&#x27;</span>, pos_bottom=<span class="string">&#x27;5%&#x27;</span>)</span><br><span class="line"><span class="comment">##控制标题‘GDP展示’在图表坐标远离左边一半的位置（居中），在远离底部5%的位置</span></span><br></pre></td></tr></table></figure>
<p>​ 3、控制图例</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> LegendOpts<span class="comment">##导入图例功能</span></span><br><span class="line">line.set_global_opts(</span><br><span class="line">legend_opts=LegendOpts(is_show=<span class="literal">True</span>)</span><br><span class="line">)<span class="comment">#图例默认为true</span></span><br></pre></td></tr></table></figure>
<p>​ 4、控制工具箱</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> ToolboxOpts</span><br><span class="line">line.set_global_opts(</span><br><span class="line">toolbox_opts=ToolboxOpts(is_show=<span class="literal">True</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>​ 5、控制视觉效果</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> VisualMapOpts</span><br><span class="line">line.set_global_opts(</span><br><span class="line">visualmap_opts=VisualMapOpts(is_show=<span class="literal">True</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>​ 6、多种功能同时运用</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> TitleOpts, LegendOpts, ToolboxOpts, VisualMapOpts<span class="comment">#同时导入多种功能</span></span><br><span class="line"></span><br><span class="line">line = Line()</span><br><span class="line">line.add_xaxis([<span class="string">&quot;Chine&quot;</span>, <span class="string">&quot;USA&quot;</span>, <span class="string">&quot;UK&quot;</span>])</span><br><span class="line">line.add_yaxis(<span class="string">&quot;GDP&quot;</span>, [<span class="number">30</span>, <span class="number">20</span>, <span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">line.set_global_opts(</span><br><span class="line">    title_opts=TitleOpts(title=<span class="string">&quot;GDP展示&quot;</span>, pos_left=<span class="string">&#x27;center&#x27;</span>, pos_bottom=<span class="string">&#x27;5%&#x27;</span>),</span><br><span class="line">    legend_opts=LegendOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    toolbox_opts=ToolboxOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    visualmap_opts=VisualMapOpts(is_show=<span class="literal">True</span>)</span><br><span class="line">)<span class="comment">#同时修改多种图表参数</span></span><br><span class="line"></span><br><span class="line">line.render()</span><br></pre></td></tr></table></figure>
<p>​ 7、其余的全局配置项</p>
<p>​ 进入pyecharts的官网</p>
<p>https://pyecharts.org/#/zh-cn/global_options</p>
<p>可查看所有的全局配置项</p>
<p>​ 8、系列设置</p>
<p>​
系列设置指的是x轴或y轴的单个变量所对应的曲线（图示）的配置，比如取消某条折线上的变量等</p>
<p>​ 1、取消显示折线图y轴上数字：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">line.add_yaxis(<span class="string">&quot;美国确诊人数&quot;</span>, us_trend_y_data, label_opts=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<h2 id="数据准备">数据准备</h2>
<p>​ 1、以日期作为x轴，美国新冠感染者总数作为y轴制作折线图</p>
<p>​
1-拿到一组txt文件数据，打开文件，将其转化为<code>json</code>格式的字符串数据（删除一些不必要的内容使它和json格式相同）</p>
<p>​
2-将<code>json</code>格式字符串数据<code>loads</code>为<code>python</code>格式的字典数据（注意这里是<code>loads</code>，<code>load</code>要用标准的<code>json</code>格式）</p>
<p>​
3-由于数据比较总体层次比较复杂，将数据复制到在线格式化<code>json</code>数据的网站中进行分层查看</p>
<p>​ 4-一层一层的剥开数据，去除想要的数据并将其赋予适当的变量</p>
<h2 id="折线图的生成">折线图的生成</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> TitleOpts, LegendOpts, ToolboxOpts, VisualMapOpts, LabelOpts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f_us = <span class="built_in">open</span>(<span class="string">&quot;D:/python project/美国.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">us_data = f_us.read()</span><br><span class="line">us_data = us_data[<span class="number">26</span>:]</span><br><span class="line">us_data = us_data[:-<span class="number">2</span>]</span><br><span class="line">us_dict = json.loads(us_data)</span><br><span class="line"></span><br><span class="line">us_trend_x_data = us_dict[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;trend&quot;</span>][<span class="string">&quot;updateDate&quot;</span>][:<span class="number">314</span>]</span><br><span class="line">us_trend_y_data = us_dict[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;trend&quot;</span>][<span class="string">&quot;list&quot;</span>][<span class="number">0</span>][<span class="string">&quot;data&quot;</span>][:<span class="number">314</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f_in = <span class="built_in">open</span>(<span class="string">&quot;D:/python project/印度.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">in_data = f_in.read()</span><br><span class="line">in_data = in_data[<span class="number">26</span>:]</span><br><span class="line">in_data = in_data[:-<span class="number">2</span>]</span><br><span class="line">in_dict = json.loads(in_data)</span><br><span class="line"></span><br><span class="line">in_trend_x_data = in_dict[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;trend&quot;</span>][<span class="string">&quot;updateDate&quot;</span>][:<span class="number">314</span>]</span><br><span class="line">in_trend_y_data = in_dict[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;trend&quot;</span>][<span class="string">&quot;list&quot;</span>][<span class="number">0</span>][<span class="string">&quot;data&quot;</span>][:<span class="number">314</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f_jp = <span class="built_in">open</span>(<span class="string">&quot;D:/python project/日本.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">jp_data = f_jp.read()</span><br><span class="line">jp_data = jp_data[<span class="number">26</span>:]</span><br><span class="line">jp_data = jp_data[:-<span class="number">2</span>]</span><br><span class="line">jp_dict = json.loads(jp_data)</span><br><span class="line"></span><br><span class="line">jp_trend_x_data = jp_dict[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;trend&quot;</span>][<span class="string">&quot;updateDate&quot;</span>][:<span class="number">314</span>]</span><br><span class="line">jp_trend_y_data = jp_dict[<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;trend&quot;</span>][<span class="string">&quot;list&quot;</span>][<span class="number">0</span>][<span class="string">&quot;data&quot;</span>][:<span class="number">314</span>]</span><br><span class="line"></span><br><span class="line">line = Line()</span><br><span class="line">line.add_xaxis(us_trend_x_data)  <span class="comment">#注意这里x轴的数据是通用的</span></span><br><span class="line">line.add_yaxis(<span class="string">&quot;美国确诊人数&quot;</span>, us_trend_y_data, label_opts=LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">line.add_yaxis(<span class="string">&quot;印度确诊人数&quot;</span>, in_trend_y_data, label_opts=LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line">line.add_yaxis(<span class="string">&quot;日本确诊人数&quot;</span>, jp_trend_y_data, label_opts=LabelOpts(is_show=<span class="literal">False</span>))</span><br><span class="line"><span class="comment">##分别导入不同的因变量数据，并为了数据的美观，将每个系列（这里是y轴）的图例显示关闭</span></span><br><span class="line">line.set_global_opts(</span><br><span class="line">    title_opts=TitleOpts(title=<span class="string">&quot;各国新冠确诊人数&quot;</span>, pos_left=<span class="string">&#x27;center&#x27;</span>, pos_bottom=<span class="string">&#x27;5%&#x27;</span>),</span><br><span class="line">    legend_opts=LegendOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    toolbox_opts=ToolboxOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">    visualmap_opts=VisualMapOpts(is_show=<span class="literal">True</span>),</span><br><span class="line">)<span class="comment">#全局设置图标</span></span><br><span class="line">line.render()</span><br><span class="line"></span><br><span class="line">f_us.close()</span><br><span class="line">f_in.close()</span><br><span class="line">f_jp.close()</span><br><span class="line"><span class="comment">##关闭文件</span></span><br></pre></td></tr></table></figure>
<h2 id="地图可视化">地图可视化</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map    <span class="comment">#从pyecharts.charts模块中带入Map功能</span></span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> VisualMapOpts   <span class="comment">#从pyecharts.charts模块中导入视觉控制选项</span></span><br><span class="line"><span class="built_in">map</span> = Map() <span class="comment">#打开地图对象，和Line一样</span></span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    (<span class="string">&quot;北京市&quot;</span>, <span class="number">99</span>),</span><br><span class="line">    (<span class="string">&quot;上海市&quot;</span>, <span class="number">199</span>),</span><br><span class="line">    (<span class="string">&quot;湖南省&quot;</span>, <span class="number">299</span>),</span><br><span class="line">    (<span class="string">&quot;台湾省&quot;</span>, <span class="number">399</span>),</span><br><span class="line">    (<span class="string">&quot;广东省&quot;</span>, <span class="number">499</span>)</span><br><span class="line">] <span class="comment">#地图数据的文件形式是由列表形成的，列表中的每个元素又是元组，元组有两个元素组成，一个是确定地点的字符串，另一个是属于这个地点的数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.add(<span class="string">&quot;测试地图&quot;</span>, data, <span class="string">&quot;china&quot;</span>) <span class="comment">#将数据加入map对象，&quot;测试地图&quot;为地图数据列表的每个元组的系列名称，“china”是用哪一个国家的地图</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.set_global_opts(</span><br><span class="line">    visualmap_opts=VisualMapOpts(</span><br><span class="line">        is_show=<span class="literal">True</span>, <span class="comment">#是否打开视觉映射器</span></span><br><span class="line">        is_piecewise=<span class="literal">True</span>, <span class="comment">#视觉映射器是否分段</span></span><br><span class="line">        pieces=[<span class="comment">#可控制每个范围的区间小块，由列表组成，其中每个元素由字典组成，每个元素就是一个系列，字典中由这个系列的最大值、最小值、系列名称和</span></span><br><span class="line">                属于该系列的颜色等可以设置。，详细看ctrl+p</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">1</span>, <span class="string">&quot;max&quot;</span>: <span class="number">9</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;1-9&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#CCFFFF&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">10</span>, <span class="string">&quot;max&quot;</span>: <span class="number">99</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;10-99&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#FF6666&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">100</span>, <span class="string">&quot;max&quot;</span>: <span class="number">199</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;100-500&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#990033&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">200</span>, <span class="string">&quot;max&quot;</span>: <span class="number">399</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;200-399&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#990058&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">400</span>, <span class="string">&quot;max&quot;</span>: <span class="number">799</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;400-799&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#990099&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="built_in">map</span>.render()<span class="comment">#地图生成</span></span><br></pre></td></tr></table></figure>
<h2 id="全国疫情地图案例">全国疫情地图案例</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">f_ch = <span class="built_in">open</span>(<span class="string">&quot;D:/python project/疫情.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">ch_data = f_ch.read()</span><br><span class="line">f_ch.close()</span><br><span class="line">ch_dict = json.loads(ch_data)</span><br><span class="line"><span class="built_in">map</span> = Map()</span><br><span class="line"></span><br><span class="line">data_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data_op <span class="keyword">in</span> ch_dict[<span class="string">&quot;areaTree&quot;</span>][<span class="number">0</span>][<span class="string">&quot;children&quot;</span>]:</span><br><span class="line">    data_name = data_op[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> data_name == <span class="string">&quot;香港&quot;</span>:</span><br><span class="line">        data_name = <span class="string">&quot;香港特别行政区&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> data_name == <span class="string">&quot;澳门&quot;</span>:</span><br><span class="line">        data_name = <span class="string">&quot;澳门特别行政区&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> data_name == <span class="string">&quot;内蒙古&quot;</span>:</span><br><span class="line">        data_name = <span class="string">&quot;内蒙古自治区&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> data_name == <span class="string">&quot;广西&quot;</span>:</span><br><span class="line">        data_name = <span class="string">&quot;广西壮族自治区&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> data_name == <span class="string">&quot;西藏&quot;</span>:</span><br><span class="line">        data_name = <span class="string">&quot;西藏自治区&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> data_name == <span class="string">&quot;宁夏&quot;</span>:</span><br><span class="line">        data_name = <span class="string">&quot;宁夏回族自治区&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> data_name == <span class="string">&quot;新疆&quot;</span>:</span><br><span class="line">        data_name = <span class="string">&quot;新疆维吾尔自治区&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> data_name == <span class="string">&quot;北京&quot;</span>:</span><br><span class="line">        data_name = <span class="string">&quot;北京市&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> data_name == <span class="string">&quot;上海&quot;</span>:</span><br><span class="line">        data_name = <span class="string">&quot;上海市&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> data_name == <span class="string">&quot;天津&quot;</span>:</span><br><span class="line">        data_name = <span class="string">&quot;天津市&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> data_name == <span class="string">&quot;重庆&quot;</span>:</span><br><span class="line">        data_name = <span class="string">&quot;重庆市&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data_name += <span class="string">&quot;省&quot;</span>  <span class="comment">#这一步是为了让名称能和pyecharts包中的名字相对应，版本不同情况可能会不同</span></span><br><span class="line">    data_total = data_op[<span class="string">&quot;total&quot;</span>][<span class="string">&quot;confirm&quot;</span>]</span><br><span class="line">    data_list.append((data_name, data_total))</span><br><span class="line">   <span class="comment">#这一步也可以用while循环，循环34次，取得名字和确诊人数。其实在循环中就可以直接用map.add添加数据，每一个循环添加一次，最后效果相同</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.add(<span class="string">&quot;各省疫情确诊人数&quot;</span>, data_list, <span class="string">&quot;china&quot;</span>)</span><br><span class="line"><span class="built_in">map</span>.set_global_opts(</span><br><span class="line">    title_opts=TitleOpts(title=<span class="string">&quot;全国疫情确诊人数&quot;</span>),</span><br><span class="line">    visualmap_opts=VisualMapOpts(</span><br><span class="line">        is_show=<span class="literal">True</span>,</span><br><span class="line">        is_piecewise=<span class="literal">True</span>,</span><br><span class="line">        pieces=[</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">1</span>, <span class="string">&quot;max&quot;</span>: <span class="number">99</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;1-99人确诊&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#FFB6C1&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">100</span>, <span class="string">&quot;max&quot;</span>: <span class="number">999</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;100-999人确诊&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#FFC0CB&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">1000</span>, <span class="string">&quot;max&quot;</span>: <span class="number">4999</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;1000-4999人确诊&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#990033&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">5000</span>, <span class="string">&quot;max&quot;</span>: <span class="number">9999</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;5000-9999人确诊&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#990058&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">10000</span>, <span class="string">&quot;max&quot;</span>: <span class="number">99999</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;10000-999999人确诊&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#990099&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">100000</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;100000+人确诊&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#DDA0DD&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.render()</span><br></pre></td></tr></table></figure>
<h2 id="省级疫情地图的绘制">省级疫情地图的绘制</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Map</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;D:/python project/疫情.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">f_ch = f.read()</span><br><span class="line">f.close()</span><br><span class="line">f_dict = json.loads(f_ch)</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> = Map()</span><br><span class="line">hn_data = []</span><br><span class="line">hn_dict = <span class="literal">None</span></span><br><span class="line"><span class="keyword">for</span> take <span class="keyword">in</span> f_dict[<span class="string">&quot;areaTree&quot;</span>][<span class="number">0</span>][<span class="string">&quot;children&quot;</span>]:</span><br><span class="line">    <span class="keyword">if</span> take[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;河南&quot;</span>:</span><br><span class="line">        hn_dict = take</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> take2 <span class="keyword">in</span> hn_dict[<span class="string">&quot;children&quot;</span>]:</span><br><span class="line">    city_name = take2[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> city_name == <span class="string">&quot;境外输入&quot;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">elif</span> city_name == <span class="string">&quot;地区待确认&quot;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> city_name == <span class="string">&quot;济源示范区&quot;</span>:</span><br><span class="line">        city_name = <span class="string">&quot;济源市&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        city_name += <span class="string">&quot;市&quot;</span></span><br><span class="line">    city_confirm = take2[<span class="string">&quot;total&quot;</span>][<span class="string">&quot;confirm&quot;</span>]</span><br><span class="line">    hn_data.append((city_name, city_confirm))</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.add(<span class="string">&quot;河南省各市确诊人数&quot;</span>, hn_data, <span class="string">&quot;河南&quot;</span>)<span class="comment">#河南会被pyecharts自动识别，生成河南省的地图，注意输入的时候最后没有省</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>.set_global_opts(</span><br><span class="line">    title_opts=TitleOpts(title=<span class="string">&quot;河南省疫情地图&quot;</span>),</span><br><span class="line">    visualmap_opts=VisualMapOpts(</span><br><span class="line">        is_show=<span class="literal">True</span>,</span><br><span class="line">        is_piecewise=<span class="literal">True</span>,</span><br><span class="line">        pieces=[</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">1</span>, <span class="string">&quot;max&quot;</span>: <span class="number">99</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;1-99人确诊&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#FFB6C1&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">100</span>, <span class="string">&quot;max&quot;</span>: <span class="number">999</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;100-999人确诊&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#FFC0CB&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">1000</span>, <span class="string">&quot;max&quot;</span>: <span class="number">4999</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;1000-4999人确诊&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#990033&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">5000</span>, <span class="string">&quot;max&quot;</span>: <span class="number">9999</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;5000-9999人确诊&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#990058&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">10000</span>, <span class="string">&quot;max&quot;</span>: <span class="number">99999</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;10000-999999人确诊&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#990099&quot;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&quot;min&quot;</span>: <span class="number">100000</span>, <span class="string">&quot;label&quot;</span>: <span class="string">&quot;100000+人确诊&quot;</span>, <span class="string">&quot;color&quot;</span>: <span class="string">&quot;#DDA0DD&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"><span class="built_in">map</span>.render()</span><br></pre></td></tr></table></figure>
<h2 id="柱状图的绘制">柱状图的绘制</h2>
<p>​ 1、基本的柱状图的绘制</p>
<p>​ 柱状图的绘制和折线图差不多</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Bar <span class="comment">#从pyecharts导入柱状图包</span></span><br><span class="line"></span><br><span class="line">bar = Bar()<span class="comment">#创建柱状图对象bar</span></span><br><span class="line"></span><br><span class="line">bar.add_xaxis([<span class="string">&quot;China&quot;</span>, <span class="string">&quot;USA&quot;</span>, <span class="string">&quot;UK&quot;</span>])</span><br><span class="line"></span><br><span class="line">bar.add_yaxis(<span class="string">&quot;各国GDP&quot;</span>, [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>], label_opts=LabelOpts(</span><br><span class="line">    position=<span class="string">&quot;right&quot;</span></span><br><span class="line">))</span><br><span class="line"><span class="comment">##添加x轴y轴数据的方法和折线图一样</span></span><br><span class="line"><span class="comment">##label_opts=LabelOpts(osition=&quot;right&quot;）使系列的图例位于右侧</span></span><br><span class="line">bar.reversal_axis() <span class="comment">#反转xy轴（只是xy轴的位置转换，）</span></span><br><span class="line">bar.render(<span class="string">&quot;GDP.html&quot;</span>)<span class="comment">#生成名为GDP的.html文件</span></span><br></pre></td></tr></table></figure>
<p>​ 2、基础时间线柱状图绘制</p>
<p>​
时间线是用来控制显示某一个时间点的截面数据，时间线是一个一维的轴。比如2000-2009每年的世界各国gdp，无法用单一的柱状图或者折线图表示</p>
<p>​ 这时就要用到时间线，控制2000-2009年的每一个时间点</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Timeline, Bar</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ThemeType <span class="comment">#导入pyecharts中的主图功能</span></span><br><span class="line"></span><br><span class="line">bar1 = Bar()</span><br><span class="line">bar2 = Bar()</span><br><span class="line">timeline = Timeline(</span><br><span class="line">    &#123;<span class="string">&quot;theme&quot;</span>: ThemeType.LIGHT&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">##时间线需要多个时间点的截面数据，一个截面数据创建一个对象，最后创建一个时间线对象，将所有的截面数据都添加进时间线中</span></span><br><span class="line"><span class="comment">##主题设置的方法：在创建时间线对象时加入一个字典，字典的value可以控制主题</span></span><br><span class="line"></span><br><span class="line">bar1.add_xaxis([<span class="string">&quot;China&quot;</span>, <span class="string">&quot;US&quot;</span>, <span class="string">&quot;UK&quot;</span>])</span><br><span class="line">bar1.add_yaxis(<span class="string">&quot;Gdp&quot;</span>, [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], label_opts=LabelOpts(</span><br><span class="line">    position=<span class="string">&quot;top&quot;</span>,</span><br><span class="line">))<span class="comment">#添加第一个截面数据，并对其进行系列命名和设置</span></span><br><span class="line"></span><br><span class="line">bar2.add_xaxis([<span class="string">&quot;China&quot;</span>, <span class="string">&quot;US&quot;</span>, <span class="string">&quot;UK&quot;</span>])</span><br><span class="line">bar2.add_yaxis(<span class="string">&quot;Gdp&quot;</span>, [<span class="number">20</span>, <span class="number">10</span>, <span class="number">5</span>], label_opts=LabelOpts(</span><br><span class="line">    position=<span class="string">&quot;top&quot;</span></span><br><span class="line">))<span class="comment">#添加第二个截面数据，并对其进行系列命名和设置</span></span><br><span class="line"></span><br><span class="line">timeline.add(bar1, <span class="string">&quot;2020年各国GDP&quot;</span>)</span><br><span class="line">timeline.add(bar2, <span class="string">&quot;2021年各国GDP&quot;</span>)</span><br><span class="line"><span class="comment">##将各个截面数据添加入时间线对象中，并依次给在时间线中显示的截面数据命名</span></span><br><span class="line"></span><br><span class="line">timeline.add_schema(</span><br><span class="line">    play_interval=<span class="number">1000</span>,<span class="comment">#设置播放间隔</span></span><br><span class="line">    is_timeline_show=<span class="literal">True</span>,<span class="comment">#是否展示时间线,默认为展示</span></span><br><span class="line">    is_auto_play=<span class="literal">True</span>,<span class="comment">#是否自动播放</span></span><br><span class="line">    is_loop_play=<span class="literal">True</span><span class="comment">#是否循环播放</span></span><br><span class="line">)<span class="comment">#时间线的各项设置</span></span><br><span class="line"></span><br><span class="line">timeline.render(<span class="string">&quot;2020-2021各国GDP.html&quot;</span>)<span class="comment">#生成时间线，名对其进行命名</span></span><br></pre></td></tr></table></figure>
<p>​ 2、动态GDP柱状图绘制</p>
<p>​ <code>sort</code>方法</p>
<p>​
由于<code>sorted</code>函数只能对数据容器进行升序或者降序的排列，不能适用于所有情况，而<code>sorted</code>方法可以将列表中的元素依照某个函数进行排序</p>
<p>​ 语法：</p>
<p><code>列表.sorted(key=选择排序依据的函数，reverse=True|False)</code></p>
<p>​
<code>key</code>表示要求元素传入的函数，表示将每一个元素都传入该函数中，返回的（经过函数处理过的）数据作为排序的依据（元素不会变）</p>
<p><code>reverse=True</code>降序排列 反之升序</p>
<p>两种方法</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">##方法一：</span></span><br><span class="line"></span><br><span class="line">my_list = [[<span class="string">&quot;a&quot;</span>,<span class="number">33</span>],[<span class="string">&quot;b&quot;</span>,<span class="number">55</span>],[<span class="string">&quot;c&quot;</span>,<span class="number">11</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">##定义排序方法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choose_sort_key</span>(<span class="params">element</span>)</span><br><span class="line">    retuen element[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">my_list.sort(key=choose_sort_key,reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">##方法二</span></span><br><span class="line">my_list = [[<span class="string">&quot;a&quot;</span>,<span class="number">33</span>],[<span class="string">&quot;b&quot;</span>,<span class="number">55</span>],[<span class="string">&quot;c&quot;</span>,<span class="number">11</span>]]</span><br><span class="line">my_list.sort(key=<span class="keyword">lambda</span> element:element[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(my_list)</span><br></pre></td></tr></table></figure>
<p>动态gdp条形图制作</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Timeline, Bar</span><br><span class="line"><span class="keyword">from</span> pyecharts.options <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pyecharts.<span class="built_in">globals</span> <span class="keyword">import</span> ThemeType     <span class="comment"># 导入pyecharts中的主图功能</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;I:/1960-2019全球GDP数据.csv&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;GB2312&quot;</span>) <span class="comment"># 注意文件的编码</span></span><br><span class="line">data_lines = f.readlines() <span class="comment"># 直接一次性读取所有的行</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="keyword">del</span> data_lines[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_lines)</span><br><span class="line"></span><br><span class="line">data_lines_1 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data_lines:</span><br><span class="line">    i = i.strip()</span><br><span class="line">    data_lines_1.append(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_lines_1)</span><br><span class="line"></span><br><span class="line">dictionary = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> data_lines_1:</span><br><span class="line">    j = k.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(j)</span><br><span class="line">    year = <span class="built_in">int</span>(j[<span class="number">0</span>])</span><br><span class="line">    country = j[<span class="number">1</span>]</span><br><span class="line">    GDP = <span class="built_in">float</span>(j[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">###为什么要用异常捕获的形式？因为如果字典中的key是之间没有的，那么我们新加入一个新的key的value就会报错，所以如果出错了，我们就先创建一个key和其所对应的空的列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        dictionary[year].append([country, GDP])</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        dictionary[year] = []</span><br><span class="line">        dictionary[year].append([country, GDP])</span><br><span class="line"></span><br><span class="line"><span class="comment">##将字典中的key全部取出，由于字典是没有顺序的，所以要将其排列</span></span><br><span class="line"></span><br><span class="line">year_list = <span class="built_in">sorted</span>(<span class="built_in">list</span>(dictionary.keys()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> year_list:</span><br><span class="line">    dictionary[i].sort(key=<span class="keyword">lambda</span> element: element[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    dictionary[i] = dictionary[i][<span class="number">0</span>:<span class="number">8</span>:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(dictionary)</span><br><span class="line">timeline = Timeline(</span><br><span class="line">    &#123;<span class="string">&quot;theme&quot;</span>: ThemeType.LIGHT&#125;) <span class="comment"># 创建时间线对象</span></span><br><span class="line">timeline.add_schema(</span><br><span class="line">    play_interval=<span class="number">1000</span>,  <span class="comment"># 设置播放间隔</span></span><br><span class="line">    is_timeline_show=<span class="literal">True</span>,  <span class="comment"># 是否展示时间线,默认为展示</span></span><br><span class="line">    is_auto_play=<span class="literal">True</span>,  <span class="comment"># 是否自动播放</span></span><br><span class="line">    is_loop_play=<span class="literal">False</span>  <span class="comment"># 是否循环播放</span></span><br><span class="line">)  <span class="comment"># 时间线的各项设置</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> year_list:</span><br><span class="line">    x_data = []</span><br><span class="line">    y_data = []</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dictionary[k]:</span><br><span class="line">        x_data.append([j[<span class="number">0</span>]])</span><br><span class="line">        y_data.append(j[<span class="number">1</span>]/<span class="number">100000000</span>)</span><br><span class="line">    bar = Bar() <span class="comment"># 创建条形图对象</span></span><br><span class="line">    bar.add_xaxis(x_data[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">##为了让旋转后的数据能够从大到小显示，需要将列表反转</span></span><br><span class="line"></span><br><span class="line">bar.add_yaxis(<span class="string">&quot;GDP(亿)&quot;</span>, y_data[::-<span class="number">1</span>], label_opts=LabelOpts(position=<span class="string">&quot;right&quot;</span>))</span><br><span class="line">bar.reversal_axis()</span><br><span class="line"></span><br><span class="line"><span class="comment">##设置每一年的图标标题</span></span><br><span class="line"></span><br><span class="line">bar.set_global_opts(</span><br><span class="line">title_opts=TitleOpts(</span><br><span class="line">	title=<span class="string">f&quot;<span class="subst">&#123;k&#125;</span>年全球各国GDP数据&quot;</span>)</span><br><span class="line">)</span><br><span class="line">timeline.add(bar, <span class="built_in">str</span>(k))</span><br><span class="line"></span><br><span class="line">timeline.render(<span class="string">&quot;各国GDP数据.html&quot;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="matplotlib可视化">matplotlib可视化</h1>
<h2 id="matplotlib基础绘图">matplotlib基础绘图</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt <span class="comment"># 导入包，设置缩略名，容易调用</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">26</span>, <span class="number">1</span>) <span class="comment"># x为一个列表</span></span><br><span class="line">y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>):</span><br><span class="line">    y.append(random.uniform(<span class="number">1</span>,<span class="number">20</span>)) <span class="comment"># y为一个列表</span></span><br><span class="line"><span class="comment"># print(y)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(y)) <span class="comment">#检查下x与y的元素个数是否一致</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(x))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">21</span></span><br><span class="line"><span class="string">21</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月11日16时42分42秒-2024年07月29日17时31分17秒-Figure_1.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>打印列表<code>x</code>与<code>y</code>，
代码中的<code>plt.plot(x, y)</code>为输入对应的横坐标x坐标与纵坐标y</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]</span><br><span class="line">[5.066203269839232, 1.172149660209287, 14.898323399395188, 19.470870957254707, 15.726459864096526, 18.133436353424575, 14.3847378679692, 1.0544279281663287, 12.236687355903484, 3.5468258554928864, 2.209184839136926, 7.693016146151321, 13.027680119894145, 4.827479062894177, 11.720487724376735, 10.714038779446401, 8.28387519294477, 19.537916626793997, 6.412880242631897, 18.73869646297504, 17.864961863947634]</span><br></pre></td></tr></table></figure>
<p>等同于描绘以下坐标：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(5, 5.066203269839232),(6, 1.172149660209287),(7, 14.898323399395188),(8, 19.470870957254707),(9, 15.726459864096526),(10, 18.133436353424575),(11, 14.3847378679692),(12, 1.0544279281663287),(13, 12.236687355903484),(14, 3.5468258554928864),(15, 2.209184839136926),(16, 7.693016146151321),(17, 13.027680119894145),(18, 4.827479062894177),(19, 11.720487724376735),(20, 10.714038779446401),(21, 8.28387519294477),(22, 19.537916626793997),(23, 6.412880242631897),(24, 18.73869646297504),(25, 17.864961863947634),</span><br></pre></td></tr></table></figure>
<h2 id="matplotlib基础绘图细节调整">matplotlib基础绘图细节调整</h2>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月29日17时31分17秒-Figure_1.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>上述图片中的表格有多地方可以调整，比如x,y的刻度，线条颜色，是否保存图片在本地等</p>
<h3 id="保存图片在本地">保存图片在本地</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">x = <span class="built_in">range</span>(<span class="number">5</span>, <span class="number">26</span>, <span class="number">1</span>)</span><br><span class="line">y = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">21</span>):</span><br><span class="line">    y.append(random.uniform(<span class="number">1</span>,<span class="number">20</span>))</span><br><span class="line"><span class="comment"># print(y)</span></span><br><span class="line"><span class="comment"># print(len(y))</span></span><br><span class="line"><span class="comment"># print(len(x))</span></span><br><span class="line">fig1 = plt.figure(figsize=(<span class="number">20</span>, <span class="number">8</span>), dpi=<span class="number">500</span>)</span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.savefig(<span class="string">&quot;./test_dpi_500.png&quot;</span>)</span><br><span class="line">plt.savefig(<span class="string">&quot;./test.svg&quot;</span>)</span><br><span class="line"><span class="comment"># 注意保存的时机</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>代码中<code>fig1 = plt.figure(figsize=(20, 8), dpi=500)</code>代表的是</p>
<h1 id="python和sql">Python和SQL</h1>
<h2 id="数据库的介绍">数据库的介绍</h2>
<p>数据库按照库-表-数据的层级顺序进行组织</p>
<h2 id="mysql的入门命令">Mysql的入门命令</h2>
<p>进程命令提示符输入<code>cmd</code></p>
<p>输入：<code>mysql –uroot –p</code></p>
<p>输入：密码</p>
<p>输入：<code>show databases;</code>#查看数据库</p>
<p>输入：<code>use 数据库名;</code> #使用某个数据库</p>
<p>输入：<code>show tables;</code> #查看数据库中由那些表</p>
<p>输入：<code>show tables;</code> #查看数据库中由那些表</p>
<p>输入：<code>exits;</code> #退出mysql的命令行环境</p>
<h2 id="sql基础和ddl">SQL基础和DDL</h2>
<p>SQL：Structured Query
Language，结构化查询语言，用于访问和处理数据库的标准计算机语言</p>
<p>以下三个<code>sql</code>语言的结果都相同</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> </span><br><span class="line"></span><br><span class="line">databases;</span><br></pre></td></tr></table></figure>
<p>三种不同的注释方法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> DatABases;</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> databases; <span class="comment">-- 第一种注释方法，但是一定要在—后加空格，否则报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> # 第二种注释方法</span><br><span class="line"></span><br><span class="line">databases;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注释方法*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> DatABases;</span><br></pre></td></tr></table></figure>
<h3 id="ddl操作">DDL操作</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases; # 查看数据库</span><br><span class="line">use world; # 使用数据库</span><br><span class="line"><span class="keyword">create</span> database wufan [charset UTF8];#创建数据库，中括号代表可选内容  </span><br><span class="line"><span class="keyword">drop</span> database wufan;# 删除数据库</span><br><span class="line">use wufan;</span><br><span class="line"><span class="keyword">select</span> database();# 查看当前使用的数据库</span><br><span class="line">##注：选中<span class="keyword">sql</span>语句可以分别运行</span><br></pre></td></tr></table></figure>
<h3 id="表的操作">表的操作</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line"></span><br><span class="line">  id <span class="type">int</span>,</span><br><span class="line"></span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line"></span><br><span class="line">  age <span class="type">int</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> create table 表名称(</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  列名称 列类型,</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  列名称 列类型,</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  ...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  列名称 列类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">列类型有</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">int整数（不需要&#x27;&#x27;包围）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">float浮点数（不需要&#x27;&#x27;包围）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">varchar(长度)文本长度，做最大长度限制（最大为255）（需要&#x27;&#x27;包围）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">date日期类型（需要&#x27;&#x27;包围）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">timestamp时间戳类型（需要&#x27;&#x27;包围）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student;# <span class="keyword">drop</span> <span class="keyword">table</span> 表名称；删除表（需要先选中数据库）</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> student;# <span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> 表名称；如果存在表，则删除表（需要先选中数据库）</span><br></pre></td></tr></table></figure>
<h2 id="sql的dml操作">SQL的DML操作</h2>
<h3 id="写入操作">写入操作</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">## 写法一：<span class="keyword">insert</span> <span class="keyword">into</span> 表名字 <span class="keyword">values</span>(值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3</span>);，这种方法的每个值都要对应表中的列名称及其类型，适合向全部的列中加入数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">10001</span>, &quot;周杰伦&quot;, <span class="number">24</span>),(<span class="number">10002</span>, &quot;mike&quot;, <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">## 写法二：<span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名<span class="number">1</span>, 列名<span class="number">2</span>) <span class="keyword">values</span>(值<span class="number">1</span>, 值<span class="number">2</span>);，这种写法适合在选定的列中加入数据</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(id, name) <span class="keyword">values</span>(<span class="number">10002</span>, &quot;芜湖&quot;);</span><br><span class="line"></span><br><span class="line">## 上述加入数据的操作可重复使用，插入相同的数据</span><br></pre></td></tr></table></figure>
<h3 id="删除操作">删除操作</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">10002</span>;</span><br><span class="line"></span><br><span class="line">## <span class="keyword">delete</span> <span class="keyword">from</span> 表名称 [<span class="keyword">where</span> 条件判断];</span><br><span class="line"></span><br><span class="line">## [<span class="keyword">where</span> 条件判断]支持<span class="operator">=</span>,<span class="operator">&gt;=</span>,<span class="operator">&lt;=</span>,<span class="operator">!=</span>,<span class="operator">&lt;</span>,<span class="operator">&gt;</span></span><br><span class="line"></span><br><span class="line">## <span class="keyword">delete</span> <span class="keyword">from</span> 表名称 表示直接删除这个表中的所有数据（表不会被删除）</span><br></pre></td></tr></table></figure>
<h3 id="数据更新update">数据更新UPDATE</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">20</span>;</span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> name <span class="operator">=</span> <span class="string">&#x27;张学友&#x27;</span> <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;周杰伦&#x27;</span>;</span><br><span class="line">## <span class="keyword">update</span> 表名称 <span class="keyword">set</span> 列名 <span class="operator">=</span> 值 [<span class="keyword">where</span> 条件判断];</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">10001</span>, <span class="string">&#x27;周杰伦&#x27;</span>, <span class="number">24</span>),(<span class="number">10002</span>,  <span class="string">&#x27;mike&#x27;</span>, <span class="number">19</span>);</span><br></pre></td></tr></table></figure>
<h2 id="sql的dql操作">SQL的DQL操作</h2>
<h3 id="基础查询">基础查询</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name <span class="keyword">from</span> student; </span><br><span class="line">## 在student表中查看id和name列</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student; </span><br><span class="line">## 在student表中查看所有列</span><br><span class="line">## <span class="keyword">select</span> 字段列表<span class="operator">|</span><span class="operator">*</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件判断];</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">20</span> <span class="keyword">and</span> id <span class="operator">=</span> <span class="number">2</span>; </span><br><span class="line"><span class="keyword">select</span> id, name <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">20</span> <span class="keyword">and</span> id <span class="operator">=</span> <span class="number">2</span>; </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;吴凡&#x27;</span>; </span><br></pre></td></tr></table></figure>
<h3 id="分组聚合">分组聚合</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> gender,<span class="built_in">avg</span>(age) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line">## <span class="keyword">select</span> 字段<span class="operator">|</span>聚合函数 <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> 字段;</span><br><span class="line">## 只有在<span class="keyword">group</span> <span class="keyword">by</span>之后的列才可以写在<span class="keyword">select</span>的后面，<span class="built_in">avg</span>(age)中的age不是字段，属于聚合函数。</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 聚合函数</span></span><br><span class="line"><span class="comment"> * sum(列)求和</span></span><br><span class="line"><span class="comment"> * avg(列)求平均</span></span><br><span class="line"><span class="comment"> * min(列)求最小值</span></span><br><span class="line"><span class="comment"> * max(列)求最大值</span></span><br><span class="line"><span class="comment"> * count(列|*)求数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">select</span> gender,<span class="built_in">sum</span>(age),<span class="built_in">min</span>(age),<span class="built_in">max</span>(age),<span class="built_in">count</span>(age) <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 若上述count(gender)换为count(*)，则表示按照gender分组，各性别的数据分别有几条，换为count(age),</span></span><br><span class="line"><span class="comment"> 表示按照gender分组,各gender有age数据的分别有几条</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="排序分页">排序分页</h3>
<h4 id="排序">排序</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> gender,<span class="built_in">sum</span>(age),<span class="built_in">min</span>(age),<span class="built_in">max</span>(age),<span class="built_in">count</span>(age) </span><br><span class="line"><span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> gender</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">min</span>(age) <span class="keyword">asc</span>; # 按照<span class="built_in">min</span>(age)的大小升序（<span class="keyword">asc</span>）排列</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 语法</span></span><br><span class="line"><span class="comment">select 字段|聚合函数 </span></span><br><span class="line"><span class="comment">from 表名 </span></span><br><span class="line"><span class="comment">group by 字段 </span></span><br><span class="line"><span class="comment">order by 字段|聚合函数 [asc|desc];</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h4 id="分页">分页</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> gender,<span class="built_in">sum</span>(age),<span class="built_in">min</span>(age),<span class="built_in">max</span>(age),<span class="built_in">count</span>(age) </span><br><span class="line"><span class="keyword">from</span> student </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> gender</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">min</span>(age);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 语法</span></span><br><span class="line"><span class="comment">select 字段|聚合函数 </span></span><br><span class="line"><span class="comment">from 表名 </span></span><br><span class="line"><span class="comment">group by 字段 </span></span><br><span class="line"><span class="comment">order by 字段|聚合函数 [asc|desc]</span></span><br><span class="line"><span class="comment">limit n[,m];</span></span><br><span class="line"><span class="comment">##limit关键字用来限制所展示的结果条数，limit n表示只展示前n条数据，limit n,m表示只展示从n条（不包括n）数据之后的m条数据</span></span><br><span class="line"><span class="comment">##注意select,from,group by,order by, limit关键字的顺序不能弄错，否则报错</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">select</span> age, <span class="built_in">count</span>(age) </span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> age <span class="operator">&gt;=</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> age </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> age</span><br><span class="line">limit <span class="number">2</span>; #顺序例子</span><br></pre></td></tr></table></figure>
<p>在<code>DQL</code>的操作中要注意以下几点</p>
<ul>
<li><code>select</code>和<code>from</code>必须写，其他的关键字可以省略</li>
<li>一定要注意各个关键字的顺序</li>
</ul>
<h2 id="python操作mysql">Python操作Mysql</h2>
<p>使用python第三方库pymysql进行</p>
<h3 id="使用python连接mysql">使用python连接mysql</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> Connection</span><br><span class="line"><span class="comment">## 获取到mysql数据库的链接对象</span></span><br><span class="line">conn = Connection(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,  <span class="comment"># 主机名或ip地址</span></span><br><span class="line">    port=<span class="number">3306</span>,  <span class="comment"># 端口，默认3306</span></span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,  <span class="comment"># 账户名</span></span><br><span class="line">    password=<span class="string">&#x27;6264152&#x27;</span>  <span class="comment"># 密码</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">## 打印mysql数据库软件信息</span></span><br><span class="line"><span class="built_in">print</span>(conn.get_server_info())</span><br><span class="line"><span class="comment">## 关闭数据库的链接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h3 id="使用python创建表">使用python创建表</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> Connection</span><br><span class="line"><span class="comment">## 获取到mysql数据库的链接对象</span></span><br><span class="line">conn = Connection(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,  <span class="comment"># 主机名或ip地址</span></span><br><span class="line">    port=<span class="number">3306</span>,  <span class="comment"># 端口，默认3306</span></span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,  <span class="comment"># 账户名</span></span><br><span class="line">    password=<span class="string">&#x27;6264152&#x27;</span>  <span class="comment"># 密码</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">## 获取游标对象</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment">## 选择数据库</span></span><br><span class="line">conn.select_db(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="comment">## 使用游标对象执行SQL语句</span></span><br><span class="line">cursor.execute(<span class="string">&quot;create table test_pymusql(id int,info varchar(255));&quot;</span>)</span><br><span class="line"><span class="comment">##cursor.execute(&quot;需要执行的SQL语句&quot;)</span></span><br><span class="line"><span class="comment">##在python中，去掉sql语句末尾的分号，即cursor.execute(&quot;create table test_pymusql(id int,info varchar(255))&quot;)，程序也能运行</span></span><br><span class="line"><span class="comment">##cursor.execute(&quot;create table 表名(列名 类型,列名 类型，...)[;]&quot;)</span></span><br><span class="line"><span class="comment">## 关闭数据库的链接</span></span><br><span class="line">conn.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="使用python对数据进行查询">使用python对数据进行查询</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> Connection</span><br><span class="line"><span class="comment">## 获取到mysql数据库的链接对象</span></span><br><span class="line">conn = Connection(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,  <span class="comment"># 主机名或ip地址</span></span><br><span class="line">    port=<span class="number">3306</span>,  <span class="comment"># 端口，默认3306</span></span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,  <span class="comment"># 账户名</span></span><br><span class="line">    password=<span class="string">&#x27;6264152&#x27;</span>  <span class="comment"># 密码</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">## 获取游标对象</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment">## 选择数据库</span></span><br><span class="line">conn.select_db(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="comment">## 使用游标对象执行SQL语句</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from student&quot;</span>)</span><br><span class="line"><span class="comment">## cursor.fetchall()返回元组类型的数据，元组的每个数据也是一个元组，元组套元组</span></span><br><span class="line">result: <span class="built_in">tuple</span> = cursor.fetchall()</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(10001, &#x27;吴凡&#x27;, 24, &#x27;male&#x27;)</span></span><br><span class="line"><span class="string">(10003, &#x27;mike&#x27;, 19, &#x27;female&#x27;)</span></span><br><span class="line"><span class="string">(10004, &#x27;bob&#x27;, 15, &#x27;female&#x27;)</span></span><br><span class="line"><span class="string">(10005, &#x27;mike&#x27;, 21, &#x27;female&#x27;)</span></span><br><span class="line"><span class="string">(10005, &#x27;jack&#x27;, 25, &#x27;male&#x27;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">## 关闭数据库的链接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h3 id="使用python向表中插入数据">使用python向表中插入数据</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> Connection</span><br><span class="line"><span class="comment">## 获取到mysql数据库的链接对象</span></span><br><span class="line">conn = Connection(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,  <span class="comment"># 主机名或ip地址</span></span><br><span class="line">    port=<span class="number">3306</span>,  <span class="comment"># 端口，默认3306</span></span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,  <span class="comment"># 账户名</span></span><br><span class="line">    password=<span class="string">&#x27;6264152&#x27;</span>  <span class="comment"># 密码</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">## 获取游标对象</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment">## 选择数据库</span></span><br><span class="line">conn.select_db(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="comment">## 使用游标对象执行SQL语句</span></span><br><span class="line">cursor.execute(<span class="string">&quot;insert into student values (123, &#x27;peter&#x27;, 55, &#x27;male&#x27;)&quot;</span>)</span><br><span class="line"><span class="comment">## 查询student表</span></span><br><span class="line">cursor.execute(<span class="string">&quot;select * from student&quot;</span>)</span><br><span class="line"><span class="comment">## cursor.fetchall()返回元组类型的数据，元组的每个数据也是一个元组，元组套元组</span></span><br><span class="line">result: <span class="built_in">tuple</span> = cursor.fetchall()</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment">## 关闭数据库的链接</span></span><br><span class="line">conn.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在上述<code>python</code>代码中，运行后可看见打印结果为：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(10001, &#x27;吴凡&#x27;, 24, &#x27;male&#x27;)</span></span><br><span class="line"><span class="string">(10003, &#x27;mike&#x27;, 19, &#x27;female&#x27;)</span></span><br><span class="line"><span class="string">(10004, &#x27;bob&#x27;, 15, &#x27;female&#x27;)</span></span><br><span class="line"><span class="string">(10005, &#x27;mike&#x27;, 21, &#x27;female&#x27;)</span></span><br><span class="line"><span class="string">(10005, &#x27;jack&#x27;, 25, &#x27;male&#x27;)</span></span><br><span class="line"><span class="string">(123, &#x27;peter&#x27;, 55, &#x27;male&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>但是打开可视化软件DBeaver，发现数据库中并没有以下数据</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">(123, &#x27;peter&#x27;, 55, &#x27;male&#x27;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在使用<code>python</code>对<code>SQL</code>进行操作的时候，若涉及对数据进行更改的操作，在<code>python</code>中操作完成之后，还需要进行：<code>链接对象.commit()</code>的操作，表示确认<code>python</code>的操作并将其保存至<code>sql</code>数据库中。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> Connection</span><br><span class="line"><span class="comment">## 获取到mysql数据库的链接对象</span></span><br><span class="line">conn = Connection(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,  <span class="comment"># 主机名或ip地址</span></span><br><span class="line">    port=<span class="number">3306</span>,  <span class="comment"># 端口，默认3306</span></span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,  <span class="comment"># 账户名</span></span><br><span class="line">    password=<span class="string">&#x27;6264152&#x27;</span>  <span class="comment"># 密码</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">## 获取游标对象</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment">## 选择数据库</span></span><br><span class="line">conn.select_db(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="comment">## 使用游标对象执行SQL语句</span></span><br><span class="line">cursor.execute(<span class="string">&quot;insert into student values (123, &#x27;peter&#x27;, 55, &#x27;male&#x27;)&quot;</span>)</span><br><span class="line"><span class="comment">## 使用链接对象.commit()进行确认</span></span><br><span class="line">conn.commit()</span><br><span class="line"><span class="comment">## 关闭数据库的链接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<p>这样才能应用<code>python</code>对数据库数据的更改</p>
<p>这种手动的<code>commit</code>方法有时很麻烦，可以在构建链接对象的时候设置自动<code>commit</code>：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 获取到mysql数据库的链接对象</span></span><br><span class="line">conn = Connection(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,  <span class="comment"># 主机名或ip地址</span></span><br><span class="line">    port=<span class="number">3306</span>,  <span class="comment"># 端口，默认3306</span></span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,  <span class="comment"># 账户名</span></span><br><span class="line">    password=<span class="string">&#x27;6264152&#x27;</span>,  <span class="comment"># 密码</span></span><br><span class="line">    autocommit=<span class="literal">True</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>这样<code>python</code>的更改就会立马应用在<code>SQL</code>数据库中</p>
<h2 id="python对mysql写入案例">python对Mysql写入案例</h2>
<p>要求将txt文件中的数据导入进<code>Mysql</code>数据库</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">数据的类的定义</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Record</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, date, order_id, money, province</span>):</span><br><span class="line">        self.date: <span class="built_in">str</span> = date</span><br><span class="line">        self.order_id: <span class="built_in">str</span> = order_id</span><br><span class="line">        self.money: <span class="built_in">int</span> = money</span><br><span class="line">        self.province: <span class="built_in">str</span> = province</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.date&#125;</span>, <span class="subst">&#123;self.order_id&#125;</span>, <span class="subst">&#123;self.money&#125;</span>, <span class="subst">&#123;self.province&#125;</span>&quot;</span></span><br><span class="line">        <span class="comment"># 用来设计可以直接打印的类</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">文件的处理都在这</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> data_define <span class="keyword">import</span> Record</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Filereader</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_data</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment">## 读取文件中的数据，将其转换为Record类型进行封装，返回以一个Record类型的列表</span></span><br><span class="line">    <span class="comment"># 设计类之间可以进行相加</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Textfilereader</span>(<span class="title class_ inherited__">Filereader</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, path</span>):</span><br><span class="line">        self.path = path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_data</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>[Record]:</span><br><span class="line">        f = <span class="built_in">open</span>(self.path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">        record_list: <span class="built_in">list</span>[Record] = []</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            line = line.strip()</span><br><span class="line">            data_list = line.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">            record = Record(data_list[<span class="number">0</span>], data_list[<span class="number">1</span>], <span class="built_in">int</span>(data_list[<span class="number">2</span>]), data_list[<span class="number">3</span>])</span><br><span class="line">            record_list.append(record)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> record_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jsonfilereader</span>(<span class="title class_ inherited__">Filereader</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, path</span>):</span><br><span class="line">        self.path = path</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_data</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>[Record]:</span><br><span class="line">        f = <span class="built_in">open</span>(self.path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">        record_list: <span class="built_in">list</span>[Record] = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">            data = json.loads(i)</span><br><span class="line">            record = Record(data[<span class="string">&quot;date&quot;</span>], data[<span class="string">&quot;order_id&quot;</span>], data[<span class="string">&quot;money&quot;</span>], data[<span class="string">&quot;province&quot;</span>])</span><br><span class="line">            record_list.append(record)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> record_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    textfilereader = Textfilereader(<span class="string">&quot;2011年1月销售数据.txt&quot;</span>)</span><br><span class="line">    jsonfilereader = Jsonfilereader(<span class="string">&quot;2011年2月销售数据JSON.txt&quot;</span>)</span><br><span class="line">    list1 = textfilereader.read_data()</span><br><span class="line">    list2 = jsonfilereader.read_data()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list2:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 在数据库中创建表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> Connection</span><br><span class="line"><span class="comment">## 获取到mysql数据库的链接对象</span></span><br><span class="line">conn = Connection(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,  <span class="comment"># 主机名或ip地址</span></span><br><span class="line">    port=<span class="number">3306</span>,  <span class="comment"># 端口，默认3306</span></span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,  <span class="comment"># 账户名</span></span><br><span class="line">    password=<span class="string">&#x27;6264152&#x27;</span>,  <span class="comment"># 密码</span></span><br><span class="line">    autocommit=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">## 获取游标对象</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment">## 选择数据库</span></span><br><span class="line">conn.select_db(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="comment">## 创建表格</span></span><br><span class="line">cursor.execute(<span class="string">&quot;create table &quot;</span></span><br><span class="line">               <span class="string">&quot;jan_data(date date, id varchar(225),money int, province varchar(225))&quot;</span>)<span class="comment"># 这里注意字符串的拼接，可看九</span></span><br><span class="line">cursor.execute(<span class="string">&quot;create table&quot;</span></span><br><span class="line">               <span class="string">&quot;feb_data(date date, id varchar(225),money int, province varchar(225))&quot;</span>) </span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 主操作</span></span><br><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> Connection</span><br><span class="line"><span class="keyword">from</span> file_define <span class="keyword">import</span> Jsonfilereader, Textfilereader</span><br><span class="line"></span><br><span class="line"><span class="comment">## 获取到mysql数据库的链接对象</span></span><br><span class="line">conn = Connection(</span><br><span class="line">    host=<span class="string">&#x27;localhost&#x27;</span>,  <span class="comment"># 主机名或ip地址</span></span><br><span class="line">    port=<span class="number">3306</span>,  <span class="comment"># 端口，默认3306</span></span><br><span class="line">    user=<span class="string">&#x27;root&#x27;</span>,  <span class="comment"># 账户名</span></span><br><span class="line">    password=<span class="string">&#x27;6264152&#x27;</span>,  <span class="comment"># 密码</span></span><br><span class="line">    autocommit=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">## 获取游标对象</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment">## 选择数据库</span></span><br><span class="line">conn.select_db(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">jan_data = Textfilereader(<span class="string">&quot;2011年1月销售数据.txt&quot;</span>)</span><br><span class="line">feb_data = Jsonfilereader(<span class="string">&quot;2011年2月销售数据JSON.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用python对sql数据库进行操作</span></span><br><span class="line"><span class="comment">## 制作sql语句</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> jan_data.read_data():</span><br><span class="line">    sql = <span class="string">f&quot;insert into jan_data(date, id, money, province) &quot;</span> \</span><br><span class="line">           <span class="string">f&quot;values (&#x27;<span class="subst">&#123;i.date&#125;</span>&#x27;, &#x27;<span class="subst">&#123;i.order_id&#125;</span>&#x27;, <span class="subst">&#123;i.money&#125;</span>, &#x27;<span class="subst">&#123;i.province&#125;</span>&#x27;);&quot;</span><span class="comment"># 这里注意字符串的拼接，可看九</span></span><br><span class="line">    cursor.execute(sql) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> feb_data.read_data():</span><br><span class="line">    sql = <span class="string">f&quot;insert into feb_data(date, id, money, province) &quot;</span> \</span><br><span class="line">          <span class="string">f&quot;values (&#x27;<span class="subst">&#123;i.date&#125;</span>&#x27;, &#x27;<span class="subst">&#123;i.order_id&#125;</span>&#x27;, <span class="subst">&#123;i.money&#125;</span>, &#x27;<span class="subst">&#123;i.province&#125;</span>&#x27;);&quot;</span></span><br><span class="line">    cursor.execute(sql)</span><br><span class="line"><span class="comment">## 方法2</span></span><br><span class="line"><span class="comment">## for i in jan_data.read_data():</span></span><br><span class="line"><span class="comment">##     cursor.execute(f&quot;insert into jan_data(date, id, money, province) &quot;</span></span><br><span class="line"><span class="comment">##                    f&quot;values (&#x27;&#123;i.date&#125;&#x27;, &#x27;&#123;i.order_id&#125;&#x27;, &#123;i.money&#125;, &#x27;&#123;i.province&#125;&#x27;);&quot;)# 这里注意字符串的拼接，可看九</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## for i in feb_data.read_data():</span></span><br><span class="line"><span class="comment">##     cursor.execute(f&quot;insert into feb_data(date, id, money, province) &quot;</span></span><br><span class="line"><span class="comment">##                    f&quot;values (&#x27;&#123;i.date&#125;&#x27;, &#x27;&#123;i.order_id&#125;&#x27;, &#123;i.money&#125;, &#x27;&#123;i.province&#125;&#x27;);&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">方法一和二的思路都是通过循环，构建出字符串类型的sql语句，再将字符串类型的sql语句放进cursor.execute（）中进行执行，注意构建字符串语句时，字符串的各种拼接规则，可看九</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure>
<h2 id="python提取mysql数据">python提取Mysql数据</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">数据的类的定义</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Record</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, date, order_id, money, province</span>):</span><br><span class="line">        self.date: <span class="built_in">str</span> = date</span><br><span class="line">        self.order_id: <span class="built_in">str</span> = order_id</span><br><span class="line">        self.money: <span class="built_in">int</span> = money</span><br><span class="line">        self.province: <span class="built_in">str</span> = province</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;self.date&#125;</span>, <span class="subst">&#123;self.order_id&#125;</span>, <span class="subst">&#123;self.money&#125;</span>, <span class="subst">&#123;self.province&#125;</span>&quot;</span></span><br><span class="line">        <span class="comment"># 用来设计可以直接打印的类</span></span><br></pre></td></tr></table></figure>
<p>数据的提取、文件的产生：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> data_define <span class="keyword">import</span> Record</span><br><span class="line"><span class="keyword">from</span> pymysql <span class="keyword">import</span> Connection</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 设计类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GETTER</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MakeJsonData</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_it</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 具体子类设计，接收参数conn为Connection类，接收字符串数据库名和表名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GetSqlData</span>(<span class="title class_ inherited__">GETTER</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, conn_: Connection, database: <span class="built_in">str</span>, table: <span class="built_in">str</span></span>):</span><br><span class="line">        self.conn: Connection = conn_</span><br><span class="line">        self.database: <span class="built_in">str</span> = database</span><br><span class="line">        self.table: <span class="built_in">str</span> = table</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_data</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>[Record]:  <span class="comment"># 返回一个Record类型的列表</span></span><br><span class="line">        data = []</span><br><span class="line">        cursor = self.conn.cursor()</span><br><span class="line">        self.conn.select_db(self.database)</span><br><span class="line">        cursor.execute(<span class="string">f&quot;select * from <span class="subst">&#123;self.table&#125;</span>&quot;</span>)  <span class="comment"># 执行SQL语句</span></span><br><span class="line">        result: <span class="built_in">tuple</span> = cursor.fetchall()  <span class="comment"># 拿到查询结果</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> result:</span><br><span class="line">            record = Record(<span class="built_in">str</span>(k[<span class="number">0</span>]), <span class="built_in">str</span>(k[<span class="number">1</span>]), <span class="built_in">int</span>(k[<span class="number">2</span>]), <span class="built_in">str</span>(k[<span class="number">3</span>]))</span><br><span class="line">            data.append(record)  <span class="comment"># 封装在列表中</span></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 具体子类设计，接收一个Record类型的列表，将其转化为Json类型的数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListToJson</span>(<span class="title class_ inherited__">MakeJsonData</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, list_: <span class="built_in">list</span>[Record]</span>):</span><br><span class="line">        self.<span class="built_in">list</span> = list_</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">make_it</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>[<span class="built_in">dict</span>]:</span><br><span class="line">        data_list = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> self.<span class="built_in">list</span>:</span><br><span class="line">            data_list.append(&#123;<span class="string">&quot;date&quot;</span>: j.date,</span><br><span class="line">                              <span class="string">&quot;order_id&quot;</span>: j.order_id,</span><br><span class="line">                              <span class="string">&quot;money&quot;</span>: j.money,</span><br><span class="line">                              <span class="string">&quot;province&quot;</span>: j.province&#125;)  <span class="comment"># 挑出Record类的成员变量，封装为一个字典</span></span><br><span class="line">        <span class="keyword">return</span> data_list  <span class="comment"># 返回字典列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    conn = Connection(</span><br><span class="line">        host=<span class="string">&#x27;localhost&#x27;</span>,  <span class="comment"># 主机名或ip地址</span></span><br><span class="line">        port=<span class="number">3306</span>,  <span class="comment"># 端口，默认3306</span></span><br><span class="line">        user=<span class="string">&#x27;root&#x27;</span>,  <span class="comment"># 账户名</span></span><br><span class="line">        password=<span class="string">&#x27;6264152&#x27;</span>,  <span class="comment"># 密码</span></span><br><span class="line">        autocommit=<span class="literal">True</span></span><br><span class="line">    )  <span class="comment"># 连接SQL数据库</span></span><br><span class="line"></span><br><span class="line">    get_jan_sql_data = GetSqlData(conn, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;jan_data&quot;</span>)  <span class="comment"># 实例化数据</span></span><br><span class="line">    get_feb_sql_data = GetSqlData(conn, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;feb_data&quot;</span>)  <span class="comment"># 实例化数据</span></span><br><span class="line">    <span class="comment"># 得到Record的列表并合并</span></span><br><span class="line">    get_all_sql_dat_list = get_jan_sql_data.get_data() + get_feb_sql_data.get_data()</span><br><span class="line">    <span class="comment"># 将Record类型的列表转化为Json数据</span></span><br><span class="line">    list_to_json = ListToJson(get_all_sql_dat_list)</span><br><span class="line">    ready_write = list_to_json.make_it()</span><br><span class="line">    <span class="comment"># 写入文件</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&quot;一、二月数据总和.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ready_write:</span><br><span class="line">        f.write(<span class="built_in">str</span>(i) + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>
<h1 id="python和pyspark">Python和PySpark</h1>
<h2 id="pyspark">pyspark</h2>
<h3 id="pyspark库的安装">pyspark库的安装</h3>
<p><code>pip install pyspark</code></p>
<h3 id="构建pyspark执行环境入口对象">构建Pyspark执行环境入口对象</h3>
<p>每次使用<code>Pyspark</code>都要构建<code>Pyspark</code>执行环境入口对象，以<code>sc</code>作为开始</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象（链式调用）</span></span><br><span class="line">conf = (SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>))</span><br><span class="line"><span class="comment">## 下面的写法也可以</span></span><br><span class="line"><span class="comment">## conf = SparkConf()</span></span><br><span class="line"><span class="comment">## conf.setMaster(&quot;local[*]&quot;)  # 返回值为SparkConf()对象</span></span><br><span class="line"><span class="comment">## conf.setAppName(&quot;test_spark_app&quot;)  # 返回值为SparkConf()对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 打印Pyspark运行版本</span></span><br><span class="line"><span class="built_in">print</span>(sc.version)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 停止SparkContext对象的运行（停止spark程序）</span></span><br><span class="line">sc.stop()</span><br></pre></td></tr></table></figure>
<p><code>SparkContext</code>类对象是<code>PySpark</code>编程中一切功能的入口</p>
<p><code>PySpark</code>编程主要分为三个步骤：</p>
<ul>
<li><strong>数据输入</strong></li>
</ul>
<p>通过<code>SparkContext</code>类对象的成员方法完成数据的读取操作，读取后获得<code>RDD</code>类对象</p>
<ul>
<li><strong>数据处理</strong></li>
</ul>
<p>通过<code>RDD</code>类对象的成员方法完成各种数据计算的要求</p>
<ul>
<li><strong>数据输出</strong></li>
</ul>
<p>将处理完成后的<code>RDD</code>对象调用各种成员方法完成写出文件、转为<code>list</code>等操作</p>
<pre class="mermaid">    flowchart TD
        A[json文件] --> E[SparkContext]
        B[文本文件] --> E[SparkContext]
        C[数据库文件] --> E[SparkContext] 
        D[...] --> E[SparkContext]
        E[SparkContext] --> F[RDD]
        F[RDD]-->|...|G[RDD]
        G[RDD] --> H[list\tuple\dict]
        G[RDD] --> I[文本文件\json文件]
        G[RDD] --> J[数据库]
        G[RDD] --> K[...]</pre>
<h2 id="pyspark的数据输入">pyspark的数据输入</h2>
<p><code>pyspark</code>在通过<code>SparkContext</code>类完成数据的输入之后，会得到一个<code>RDD</code>类对象，<code>RDD</code>全程弹性分布式数据集（Resilient
Distributed Datasets）,</p>
<p><code>pyspark</code>针对数据集的处理，都是以<code>RDD</code>对象作为载体，即</p>
<ul>
<li>数据储存在<code>RDD</code>内</li>
<li>各类数据的计算方法，也都是<code>RDD</code>的成员方法</li>
<li><code>RDD</code>的数据计算方法，返回值依旧是<code>RDD</code>对象</li>
</ul>
<p><code>pyspark</code>支持通过<code>SparkContext</code>类对象的<code>parallelize</code>成员方法，将</p>
<ul>
<li><code>list</code></li>
<li><code>tuple</code></li>
<li><code>str</code></li>
<li><code>dict</code></li>
<li><code>set</code></li>
</ul>
<p>转化为<code>pyspark</code>的<code>RDD</code>对象</p>
<p><strong>注意</strong>：</p>
<ul>
<li><strong>字符串会被拆分为一个个字符存入<code>RDD</code>对象中</strong></li>
<li><strong>字典仅有<code>KEY</code>会被存入<code>RDD</code>对象</strong></li>
</ul>
<h3 id="数据容器转化为rdd对象">数据容器转化为RDD对象</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line"><span class="comment">## 下面的写法也可以</span></span><br><span class="line"><span class="comment">## conf = SparkConf()</span></span><br><span class="line"><span class="comment">## conf.setMaster(&quot;local[*]&quot;)  # 返回值为SparkConf()对象</span></span><br><span class="line"><span class="comment">## conf.setAppName(&quot;test_spark_app&quot;)  # 返回值为SparkConf()对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 将数据容器转化为RDD对象</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">语法：</span></span><br><span class="line"><span class="string">rdd = sc.parallelize(数据容器)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">rdd_list = sc.parallelize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">rdd_tuple = sc.parallelize((<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">rdd_str = sc.parallelize(<span class="string">&quot;HELLO&quot;</span>)</span><br><span class="line">rdd_dict = sc.parallelize(&#123;<span class="string">&quot;hello&quot;</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="string">&quot;wufan&quot;</span>&#125;)</span><br><span class="line">rdd_set = sc.parallelize(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;HELLO&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看rdd类中的内容，需要用rdd.collect（）方法</span></span><br><span class="line"><span class="built_in">print</span>(rdd_list.collect())</span><br><span class="line"><span class="built_in">print</span>(rdd_tuple.collect())</span><br><span class="line"><span class="built_in">print</span>(rdd_str .collect())</span><br><span class="line"><span class="built_in">print</span>(rdd_dict.collect())</span><br><span class="line"><span class="built_in">print</span>(rdd_set .collect())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出：</span></span><br><span class="line"><span class="string">[1, 2, 3, 4]</span></span><br><span class="line"><span class="string">[1, 2, 3, 4]</span></span><br><span class="line"><span class="string">[&#x27;H&#x27;, &#x27;E&#x27;, &#x27;L&#x27;, &#x27;L&#x27;, &#x27;O&#x27;]</span></span><br><span class="line"><span class="string">[&#x27;hello&#x27;, 2]</span></span><br><span class="line"><span class="string">[1, 2, 3, &#x27;HELLO&#x27;]</span></span><br><span class="line"><span class="string">输出全都为列表</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">## 停止SparkContext对象的运行（停止spark程序）</span></span><br><span class="line">sc.stop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="txt文件转化为rdd对象">txt文件转化为rdd对象</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 读取txt文件转化为RDD对象</span></span><br><span class="line">rdd = sc.textFile(<span class="string">&quot;hello.txt&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">语法：</span></span><br><span class="line"><span class="string">rdd = sc.textFile(文件路径)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">## 打印内容</span></span><br><span class="line"><span class="built_in">print</span>(rdd.collect())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">输出为：</span></span><br><span class="line"><span class="string">[&#x27;wufan 吴凡&#x27;, &#x27;lml&#x27;, &#x27;啊哈哈哈哈哈&#x27;, &#x27;12345&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">## 停止SparkContext对象的运行（停止spark程序）</span></span><br><span class="line">sc.stop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<ul>
<li><strong>读取txt的文件转化为<code>rdd</code>类对象也是会产生一个列表</strong></li>
<li><strong>列表元素以回车换行作为分割，一个回车一个列表中的元组，空格不影响（就像<code>.readline（）</code>方法，每次读取一行）</strong></li>
</ul>
<h2 id="rdd对象方法">RDD对象方法</h2>
<h3 id="map算子">map（）算子</h3>
<p><code>RDD</code>对象的<code>map()</code>方法是将RDD中的数据进行逐条处理，返回新的<code>RDD</code>，处理的逻辑是基于<code>map（）</code>中括号所接受到的函数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">times_10</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">return</span> a*<span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 创建一个rdd对象，并用sc.parallelize方法传入一个列表</span></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="comment">## 使用map方法，让列表中的所以元素都乘以10</span></span><br><span class="line">rdd2 = rdd.<span class="built_in">map</span>(times_10).<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x + <span class="number">5</span>) <span class="comment"># 链式调用，map算子返回rdd对象</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">注意这里map（）括号中所要填入的func的要求，按ctrl+p出现f：[T] -&gt; U 的注释，意味着map（）括号中是要传入一个函数，这个函数需要有一个形式参数（T），和一个返回值U，这里的T和U的类型可以不相同，如果是[T] -&gt; T，那么传入参数的类型就要和返回值的类型一样</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">## 打印内容</span></span><br><span class="line"><span class="built_in">print</span>(rdd2.collect())</span><br><span class="line"><span class="comment">## 停止SparkContext对象的运行（停止spark程序）</span></span><br><span class="line">sc.stop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="flapmap方法算子">flapmap（）方法（算子）</h3>
<p><code>flapMap（）</code>方法和<code>map（）方法</code>类似，也是将<code>RDD</code>中的数据进行<strong>逐条</strong>处理，返回新的<code>RDD</code>，处理的逻辑是基于<code>map（）</code>中括号所接受到的函数。但是<code>flapMap（）</code>方法与<code>map（）</code>方法不同的是，<code>flapMap（）</code>方法有解除嵌套(解列表、元组、字符串、字典（只会将<code>key</code>解嵌套，忽略<code>value</code>）等)的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>) <span class="comment"># 这个是报错的设置，可以不要</span></span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>) <span class="comment"># 这个是报错的设置，可以不要</span></span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="string">&quot;a b c&quot;</span>, <span class="string">&quot;c d e&quot;</span>, <span class="string">&quot;f g h&quot;</span>])</span><br><span class="line"><span class="comment">## 使用map方法分割嵌套的字符串列表</span></span><br><span class="line">rdd2 = rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"><span class="comment">## 使用flapMap方法分割嵌套的字符串列表</span></span><br><span class="line">rdd3 = rdd.flatMap(<span class="keyword">lambda</span> x: x.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"><span class="comment">## 打印内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;打印rdd2：<span class="subst">&#123;rdd2.collect()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;打印rdd3：<span class="subst">&#123;rdd3.collect()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">## 停止SparkContext对象的运行（停止spark程序）</span></span><br><span class="line">sc.stop()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">打印rdd2：[[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;], [&#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;], [&#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;]]</span></span><br><span class="line"><span class="string">打印rdd3：[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;, &#x27;h&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>从上述代码可以看出<code>rdd.flapMap()</code>方法把列表<code>["a b c", "c d e", "f g h"]</code>的嵌套给解除了，把他们都分割成了一个个字符串</p>
<p>注意<code>rdd.flatMap</code>只能去除一层的嵌套，若有如</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">rdd = sc.parallelize([[<span class="string">&quot;a b&quot;</span>, <span class="string">&quot;c d&quot;</span>], [<span class="string">&quot;e f&quot;</span>, <span class="string">&quot;g h&quot;</span>], [<span class="string">&quot;m n&quot;</span>, <span class="string">&quot;o p&quot;</span>]])</span><br></pre></td></tr></table></figure>
<p>的两层嵌套,</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x.split(<span class="string">&quot; &quot;</span>))</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">rdd.flatMap(<span class="keyword">lambda</span> x: x.split(<span class="string">&quot; &quot;</span>))</span><br></pre></td></tr></table></figure>
<p>都会报错</p>
<p><code>flapMap（）</code>方法适合将一个个句子拆分为一个个的单词</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"></span><br><span class="line">rdd = sc.parallelize([<span class="string">&quot;hello world fuck you&quot;</span>, <span class="string">&quot;my name is bob&quot;</span>])</span><br><span class="line"><span class="comment">## 使用flapMap方法分割字符串列表</span></span><br><span class="line">rdd1 = rdd.flatMap(<span class="keyword">lambda</span> x: x.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"><span class="comment">## 使用Map方法分割字符串列表</span></span><br><span class="line">rdd2 = rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"><span class="comment">## 打印内容</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;打印rdd1：<span class="subst">&#123;rdd1.collect()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;打印rdd2：<span class="subst">&#123;rdd2.collect()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="comment">## 停止SparkContext对象的运行（停止spark程序）</span></span><br><span class="line">sc.stop()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">打印rdd1：[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;fuck&#x27;, &#x27;you&#x27;, &#x27;my&#x27;, &#x27;name&#x27;, &#x27;is&#x27;, &#x27;bob&#x27;]</span></span><br><span class="line"><span class="string">打印rdd2：[[&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;fuck&#x27;, &#x27;you&#x27;], [&#x27;my&#x27;, &#x27;name&#x27;, &#x27;is&#x27;, &#x27;bob&#x27;]]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p><code>map()</code>方法分割字符串是将一个字符串分割后重新组装成一个列表，再将这个列表作为一个元素嵌入输出的列表中</p>
<p><code>flapMap（）</code>方法将一个字符串分割后（由<code>split</code>方法产生一个个列表）产生列表，再对这些列表解除一层的嵌套，形成输出最后的列表</p>
<h3 id="reducebykey方法算子">reduceByKey()方法（算子）</h3>
<p><code>reduceByKey()</code>方法是<code>spark</code>中针对<code>Key-value</code>型(<strong>必须是元组类型的KV数据</strong>)的数据进行分组运算你的一种方法，这个方法首先根据传输的数据中的<code>key</code>进行分类，然后再根据传入的函数，对<code>value</code>进行聚合操作，传入的函数只负责聚合操作，和分类没有关系。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 向sc对象内传入Key-value型（KV型）的数据，返回一个rdd类对象</span></span><br><span class="line">rdd_1 = sc.parallelize([(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">8</span>), (<span class="string">&quot;d&quot;</span>, <span class="number">6</span>)])</span><br><span class="line"><span class="comment">## 调用reduceByKey（）算子</span></span><br><span class="line">rdd_result_1 = rdd_1.reduceByKey(<span class="keyword">lambda</span> x, y: x-y)</span><br><span class="line"><span class="comment">## 停止SparkContext对象的运行（停止spark程序）</span></span><br><span class="line">sc.stop()</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(rdd_result_1.collect())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[(&#x27;c&#x27;, 8), (&#x27;a&#x27;, -6), (&#x27;d&#x27;, 6)]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>注意<code>reduceByKey()</code>方法中传入函数的要求：<code>[v, v] -&gt; v</code>
，要求两个传入参数，返回值类型和传入参数类型相同</strong></p>
<p>由函数进行聚合操作有以下的规则：若分类之后，某一类<code>key</code>对应的<code>value</code>的数值和顺序分别为<code>1，2，3，4，5</code>，这五个数字按照以下方式进行运算</p>
<pre class="mermaid">graph LR
    A[1] --> |a|G["func(a,b)"]
    B[2] --> |b|G
    C[3] --> |b|H["func(a,b)"]
    D[4] --> |b|I["func(a,b)"]
    E[5] --> |b|J["func(a,b)"]

    G --> |a|H
    H --> |a|I
    I --> |a|J
    J --> K[最终输出]</pre>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 向sc对象内传入Key-value型（KV型）的数据，返回一个rdd类对象</span></span><br><span class="line">rdd_1 = sc.parallelize([(<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">8</span>), (<span class="string">&quot;d&quot;</span>, <span class="number">6</span>)])</span><br><span class="line">rdd_2 = sc.parallelize([(<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">1</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">5</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">8</span>), (<span class="string">&quot;d&quot;</span>, <span class="number">6</span>)])</span><br><span class="line"><span class="comment">## 调用reduceByKey（）算子</span></span><br><span class="line">rdd_result_1 = rdd_1.reduceByKey(<span class="keyword">lambda</span> x, y: x-y)</span><br><span class="line">rdd_result_2 = rdd_2.reduceByKey(<span class="keyword">lambda</span> x, y: x-y)</span><br><span class="line"><span class="comment">## 停止SparkContext对象的运行（停止spark程序）</span></span><br><span class="line">sc.stop()</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(rdd_result_1.collect())</span><br><span class="line"><span class="built_in">print</span>(rdd_result_2.collect())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[(&#x27;c&#x27;, 8), (&#x27;a&#x27;, -6), (&#x27;d&#x27;, 6)]</span></span><br><span class="line"><span class="string">[(&#x27;c&#x27;, 8), (&#x27;a&#x27;, -4), (&#x27;d&#x27;, 6)]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>上述不同的结果是由于聚合函数的操作顺序不一致导致的，<code>rdd_1</code>和<code>rdd_2</code>都将kv类型的数据分为<code>“a”</code>和<code>“c”</code>两类，但是再<code>rdd_1</code>和<code>rdd_2</code>中同样的<code>ke</code>y所对应的<code>value</code>顺序是不同的，<code>rdd_1</code>进行的操作是（<code>'a', (1-2)-5=-6）</code>，<code>rdd_2</code>进行的操作是（<code>'a', (2-1)-5=-4）</code>，最终他们的<code>key=‘a’</code>所计算出来的值是不一样的。</p>
<h3 id="filter算子">filter()算子</h3>
<p><code>rdd.filter()</code>算子可以用来对<code>rdd</code>中的数据进行过滤，<code>func为[T] -&gt; bool</code>
,传入一个参数，返回值为<code>boo</code>l，<code>rdd.filter()</code>算子中的函数<strong>挨个</strong>对数据进行计算，如果返回值为<code>True</code>则保留该数据，<code>False</code>则过滤掉该数据</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 输入数据并创建rdd对象</span></span><br><span class="line">rdd = sc.parallelize(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>))</span><br><span class="line"><span class="comment">## 通过filter算子山选出数据中的偶数</span></span><br><span class="line">rdd_result = rdd.<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: <span class="literal">True</span> <span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> <span class="literal">False</span>) <span class="comment"># 使用a if condition else b表达式</span></span><br><span class="line"><span class="comment">## 或者直接这样：rdd_result = rdd.filter(lambda x: x % 2 == 0)</span></span><br><span class="line"><span class="comment">## 打印删选过后的数据</span></span><br><span class="line"><span class="built_in">print</span>(rdd_result.collect())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">## 关闭进程</span></span><br><span class="line">sc.stop()</span><br></pre></td></tr></table></figure>
<h3 id="distinc算子">distinc（）算子</h3>
<p><code>rdd.distinc（）</code>算子用来对<code>rdd</code>中的数据进行去重（传入<code>rdd</code>的列表中的元素），括号中无需传入参数（除了<code>numPartitions</code>，涉及分布式的知识，先不考虑）</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 输入数据并创建rdd对象</span></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"><span class="comment">## 通过distinct算子对数据进行去重</span></span><br><span class="line">rdd_result = rdd.distinct()</span><br><span class="line"><span class="comment">## 打印去重后的数据</span></span><br><span class="line"><span class="built_in">print</span>(rdd_result.collect())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[4, 1, 5, 2, 6, 3]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">## 关闭进程</span></span><br><span class="line">sc.stop()</span><br></pre></td></tr></table></figure>
<h3 id="sortby算子">sortBy（）算子</h3>
<p><code>sortBy（）</code>算子可以用来对rdd中的数据进行排序，他有三个参数，分别是<code>func：[T] -&gt;U</code>，<code>ascnding</code>，和<code>numPartition</code>s。<code>func：[T] -&gt;U</code>指的是<code>sortBy（）</code>算子的依据函数的返回值进行排序，函数传入一个参数，计算得到不同类型的返回值，依据返回值进行排序，<code>ascnding</code>表示的是是否升序排列，可选<code>Ture</code>和<code>False</code>，<code>numPartitions</code>为分布式的知识，一般令其为1</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 传入数据(姓名，年龄， 成绩)且生成rdd对象</span></span><br><span class="line">rdd = sc.parallelize([(<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;7岁&quot;</span>, <span class="number">99</span>), (<span class="string">&quot;小张&quot;</span>, <span class="string">&quot;8岁&quot;</span>, <span class="number">87</span>), (<span class="string">&quot;小红&quot;</span>, <span class="string">&quot;6岁&quot;</span>, <span class="number">100</span>)])</span><br><span class="line"><span class="comment">## 使用sortBy算子对年龄进行降序排序</span></span><br><span class="line">rdd_age_result = rdd.sortBy(<span class="keyword">lambda</span> x: x[<span class="number">1</span>][<span class="number">0</span>], ascending=<span class="literal">False</span>, numPartitions=<span class="number">1</span>)</span><br><span class="line"><span class="comment">## 使用sortBy算子对成绩进行降序排序</span></span><br><span class="line">rdd_mark_result = rdd.sortBy(<span class="keyword">lambda</span> x: x[<span class="number">2</span>], ascending=<span class="literal">False</span>, numPartitions=<span class="number">1</span>)</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;按年龄排序：<span class="subst">&#123;rdd_age_result.collect()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;按成绩排序：<span class="subst">&#123;rdd_mark_result.collect()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">按年龄排序：[(&#x27;小张&#x27;, &#x27;8岁&#x27;, 87), (&#x27;小明&#x27;, &#x27;7岁&#x27;, 99), (&#x27;小红&#x27;, &#x27;6岁&#x27;, 100)]</span></span><br><span class="line"><span class="string">按成绩排序：[(&#x27;小红&#x27;, &#x27;6岁&#x27;, 100), (&#x27;小明&#x27;, &#x27;7岁&#x27;, 99), (&#x27;小张&#x27;, &#x27;8岁&#x27;, 87)]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">## 关闭进程</span></span><br><span class="line">sc.stop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr />
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 读取文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;hello.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">    data.append(i.strip())</span><br><span class="line"><span class="comment">## 输入数据并使用flapMap算子将数据转换进行分词处理</span></span><br><span class="line">rdd = sc.parallelize(data).flatMap(<span class="keyword">lambda</span> x: x.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"><span class="comment">## 使用map算子将数据转换转化为key—value类型</span></span><br><span class="line">rdd_tuple = rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: (x, <span class="number">1</span>))</span><br><span class="line"><span class="comment">## 使用reduceByKey算子将统计单词个数</span></span><br><span class="line">rdd_result = rdd_tuple.reduceByKey(<span class="keyword">lambda</span> x, y: x+y)</span><br><span class="line"><span class="comment">## 使用sortBy算子对统计到的单词个数进行排序</span></span><br><span class="line">rdd_sortBy_result = rdd_result.sortBy(<span class="keyword">lambda</span> x: x[<span class="number">1</span>],ascending=<span class="literal">False</span>, numPartitions=<span class="number">1</span>)</span><br><span class="line"><span class="comment">## 单词个数进行降序排序打印结果</span></span><br><span class="line"><span class="built_in">print</span>(rdd_sortBy_result.collect())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[(&#x27;world&#x27;, 6), (&#x27;fuck&#x27;, 6), (&#x27;member&#x27;, 6), (&#x27;hello&#x27;, 2), (&#x27;you&#x27;, 2), (&#x27;kiki&#x27;, 2), (&#x27;haha&#x27;, 1)]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">## 关闭进程</span></span><br><span class="line">sc.stop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="pyspark案例">pySpark案例</h2>
<h3 id="单词计数案例">单词计数案例</h3>
<p>第一种方法：将数据在建立<code>rdd</code>对象之间处理好，之后再传给<code>sc</code>生成<code>rdd</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 读取文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;hello.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line"><span class="comment">## 读取文件创建KV元组列表</span></span><br><span class="line">kv_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">    k = i.strip().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> k:</span><br><span class="line">        kv_list.append((j, <span class="number">1</span>)) <span class="comment"># 将分割后的每个单词组成（单词（key），1（value））的元组，方便在后面用函数计数</span></span><br><span class="line"><span class="comment">## 关闭文件</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">## 传输数据</span></span><br><span class="line">rdd = sc.parallelize(kv_list)</span><br><span class="line"><span class="comment">## 使用reduceByKey算子统计单词个数</span></span><br><span class="line">rdd_result = rdd.reduceByKey(<span class="keyword">lambda</span> x, y: x+y)</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(rdd_result.collect())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[(&#x27;hello&#x27;, 2), (&#x27;you&#x27;, 2), (&#x27;kiki&#x27;, 2), (&#x27;world&#x27;, 6), (&#x27;fuck&#x27;, 6), (&#x27;haha&#x27;, 1), (&#x27;member&#x27;, 6)]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">## 停止SparkContext对象的运行（停止spark程序）</span></span><br><span class="line">sc.stop()</span><br></pre></td></tr></table></figure>
<p>另一种使用方法：将数据直接传给<code>rdd</code>对象，让数据在<code>rdd</code>对象之中，使用<code>flapMap</code>和<code>map</code>算子对数据处理成合适的格式，最后用r<code>educeByKey</code>算子对数据进行统计</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 读取文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;hello.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">data = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> f.readlines():</span><br><span class="line">    data.append(i.strip())</span><br><span class="line"><span class="comment">## 输入数据并使用flapmap算子将数据转换进行分词处理</span></span><br><span class="line">rdd = sc.parallelize(data).flatMap(<span class="keyword">lambda</span> x: x.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"><span class="comment">## 使用map算子将数据转换转化为key—value类型</span></span><br><span class="line">rdd_tuple = rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: (x, <span class="number">1</span>))</span><br><span class="line"><span class="comment">## 使用reduceByKey算子将统计单词个数</span></span><br><span class="line">rdd_result = rdd_tuple.reduceByKey(<span class="keyword">lambda</span> x, y: x+y)</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(rdd_result.collect())</span><br><span class="line"><span class="comment">## 关闭进程</span></span><br><span class="line">sc.stop()</span><br></pre></td></tr></table></figure>
<h3 id="商品销售情况统计">商品销售情况统计</h3>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 直接读取文件直接创建rdd对象（和f.readlines相似，也是一行一行读取）</span></span><br><span class="line">rdd = sc.textFile(<span class="string">&quot;orders.txt&quot;</span>)</span><br><span class="line"><span class="comment">## 有些行有两个json数据，用flapMap解嵌套形成两个元素，若用Map则两个json会两个元素组成一个列表。再将他们用json转化为字典</span></span><br><span class="line">rdd_dict = rdd.flatMap(<span class="keyword">lambda</span> x: x.split(<span class="string">&quot;|&quot;</span>)).<span class="built_in">map</span>(<span class="keyword">lambda</span> x: json.loads(x))</span><br><span class="line"></span><br><span class="line"><span class="comment">## TODO 各个城市的销售排名，从大到小</span></span><br><span class="line"><span class="comment">## 使用map进行数据处理，不能用flapMap，元组、字符串等也会解嵌套</span></span><br><span class="line">rdd_1_map = rdd_dict.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: (x[<span class="string">&quot;areaName&quot;</span>], <span class="built_in">int</span>(x[<span class="string">&quot;money&quot;</span>])))</span><br><span class="line"><span class="comment">## 使用reduceByKey进行计算</span></span><br><span class="line">rdd_1_reduceByKey = rdd_1_map.reduceByKey(<span class="keyword">lambda</span> x, y:  x+y)</span><br><span class="line"><span class="comment">## 使用sortBy进行排序</span></span><br><span class="line">rdd_1_result = rdd_1_reduceByKey.sortBy(<span class="keyword">lambda</span> x: x[<span class="number">1</span>], ascending=<span class="literal">False</span>, numPartitions=<span class="number">1</span>)</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;各城市的销售额从大到小排序：<span class="subst">&#123;rdd_1_result.collect()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## TODO 有那些商品在售卖</span></span><br><span class="line"><span class="comment">## 传输数据生成rdd,处理数据和去重</span></span><br><span class="line">rdd_2 = rdd_dict.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x[<span class="string">&quot;category&quot;</span>]).distinct()</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;有那些商品在售卖:<span class="subst">&#123;rdd_2.collect()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## TODO 北京有那些商品在售卖</span></span><br><span class="line"><span class="comment">## 传输数据生成rdd,选取北京相关的数据，取出类别并去重</span></span><br><span class="line">rdd_3 = rdd_dict.<span class="built_in">filter</span>(</span><br><span class="line">    <span class="keyword">lambda</span> x: <span class="literal">True</span> <span class="keyword">if</span> x[<span class="string">&quot;areaName&quot;</span>] == <span class="string">&quot;北京&quot;</span> <span class="keyword">else</span> <span class="literal">False</span>).<span class="built_in">map</span>(</span><br><span class="line">    <span class="keyword">lambda</span> x: x[<span class="string">&quot;category&quot;</span>]</span><br><span class="line">).distinct()</span><br><span class="line"><span class="comment">##  lambda x: True if x[&quot;areaName&quot;] == &quot;北京&quot; else False可以换成lambda x: x[&quot;areaName&quot;] == &quot;北京&quot;</span></span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;北京售卖的商品有：<span class="subst">&#123;rdd_3.collect()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 关闭进程</span></span><br><span class="line">sc.stop()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">各城市的销售额从大到小排序：[(&#x27;北京&#x27;, 91556), (&#x27;杭州&#x27;, 28831), (&#x27;天津&#x27;, 12260), (&#x27;上海&#x27;, 1513), (&#x27;郑州&#x27;, 1120)]</span></span><br><span class="line"><span class="string">有那些商品在售卖:[&#x27;平板电脑&#x27;, &#x27;家电&#x27;, &#x27;书籍&#x27;, &#x27;手机&#x27;, &#x27;电脑&#x27;, &#x27;家具&#x27;, &#x27;食品&#x27;, &#x27;服饰&#x27;]</span></span><br><span class="line"><span class="string">北京售卖的商品有：[&#x27;平板电脑&#x27;, &#x27;家电&#x27;, &#x27;书籍&#x27;, &#x27;手机&#x27;, &#x27;电脑&#x27;, &#x27;家具&#x27;, &#x27;食品&#x27;, &#x27;服饰&#x27;]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="rdd结果输出为python对象">RDD结果输出为python对象</h2>
<p>RDD的数据输出流程</p>
<pre class="mermaid">flowchart LR
  subgraph RDD输出流程
  A[Python对象或文件]-->I((输入))
  I((输入))-->B[RDD]
  B-->D((计算))
  D-->E((输出))
  E--> C[Python对象或文件]
  end
B -..-> RDD计算的返回值还是RDD
C -..-> RDD的输出的返回值不是RDD
I -..-> G[数据输入方法<br>sc.parallelize<br>sc.textFile等]
D -..-> H[数据计算方法<br>rdd.Map<br>rdd.flapMap<br>rdd.reduceByKey等]
E -..-> J[数据输出方法<br>rdd.collect<br>rdd.reduce<br>rdd.take<br>rdd.count等]</pre>
<h3 id="collect算子">collect（）算子</h3>
<p><code>RDD</code>对象没法被直接打印出来，<code>collect</code>算子将<code>RDD</code>各分区中的数据集中统一到<code>Drive</code>中，形成一个<code>list</code>列表，返回这个列表</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 输入数据并创建rdd对象</span></span><br><span class="line">rdd = sc.parallelize([<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line"><span class="comment">## 使用collect算子得到RDD的结果</span></span><br><span class="line">rdd_result = rdd.collect()</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(rdd_result)</span><br><span class="line"><span class="comment">## 结束进程</span></span><br><span class="line">sc.stop</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1, 1, 3, 3, 5, 5, 7, 8, 8, 9, 10]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="reduce算子">reduce()算子</h3>
<p><code>reduce()</code>算子需要传入<code>func：[T, T] -&gt; T</code>，要求传入两个类型相同的参数，函数也返回一个类型相同的返回值，<code>reduce()算子</code>可以更具数据的传输逻辑，通过函数进行聚合计算</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 输入数据并创建rdd对象</span></span><br><span class="line">rdd = sc.parallelize(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line"><span class="comment">## 使用reduce算子计算1加到10的结果，并返回结果</span></span><br><span class="line">rdd_result = rdd.reduce(<span class="keyword">lambda</span> x, y: x+y)</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(rdd_result)</span><br><span class="line"><span class="comment">## 结束进程</span></span><br><span class="line">sc.stop</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">55</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>集合计算的逻辑为：</p>
<pre class="mermaid">graph LR
    A[A] --> |a|G["func(a,b)"]
    B[B] --> |b|G
    C[C] --> |b|H["func(a,b)"]
    D[D] --> |b|I["func(a,b)"]
    E[E] --> |b|J["func(a,b)"]

G --> |a|H
H --> |a|I
I --> |a|J
J --> K[最终输出]</pre>
<h3 id="take算子">take()算子</h3>
<p><code>take()</code>算子需要输入一个整数<code>N</code>，可以取出数据的前<code>N</code>个元素，并将这些元素组成一个列表返回</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 输入数据并创建rdd对象</span></span><br><span class="line">rdd = sc.parallelize(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line"><span class="comment">## 使用take算子取出数据的前五个元素组成列表，并返回列表</span></span><br><span class="line">rdd_result = rdd.take(<span class="number">5</span>)</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(rdd_result)</span><br><span class="line"><span class="comment">## 结束进程</span></span><br><span class="line">sc.stop</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="count算子">count()算子</h3>
<p><code>count()</code>算子可以计算<code>RDD</code>数据中有多少个元素，返回一个整数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 输入数据并创建rdd对象</span></span><br><span class="line">rdd = sc.parallelize(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line"><span class="comment">## 使用count算子计算数据中有多少个元素，返回一个整数</span></span><br><span class="line">rdd_result = rdd.count()</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(rdd_result)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="将rdd输出到文件中">将RDD输出到文件中</h2>
<h3 id="saveastextflie算子">saveAsTextFlie（）算子</h3>
<p><code>saveAsTextFlie（）</code>算子可将<code>rdd</code>中的数据输出为一个文件夹，需要填写一个输出的文件夹地址，算子会自动创建这个文件夹并吧数据放到文件夹里面</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logConf&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.logLevel&quot;</span>, <span class="string">&quot;ERROR&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 输入数据并创建rdd对象</span></span><br><span class="line">rdd = sc.parallelize(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line"><span class="comment">## 使用saveAsTextFile算子将数据保存为文本文件</span></span><br><span class="line">rdd.saveAsTextFile(<span class="string">&quot;hahah&quot;</span>) <span class="comment"># 这里也可以写详细的文件路径，我这里的文件是运行再一个的独立的文件夹中的，可以默认创建在这</span></span><br><span class="line"><span class="comment">## 结束进行</span></span><br><span class="line">sc.stop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>可以发现创建了一个叫<code>hahah</code>的文件夹</p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月10日10时30分55秒-202406131343493.png" /></p>
<p>在<code>RDD</code>中有多个分区，默认个数为CUP内核的个数，上图中以part开头的文件的个数就是<code>RDD</code>中的分区个数。数据就储存在这些分区中，有些分区中有数据，有些分区中没有数据，<code>RDD</code>中所有的数据都是分散在这些文件之中</p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月10日10时31分27秒-202406131344248.png" /></p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月10日10时31分41秒-202406131344494.png" /></p>
<p>更改<code>conf</code>的设置可以对<code>RDD</code>的分区进行设置，下列代码讲<code>RDD</code>的分区设置为1</p>
<h4
id="方法一设置sparkconf对象的参数">方法一：设置SparkConf对象的参数</h4>
<p>此方法直接设置
<code>SparkConf()</code>类对象的参数<code>"spark.default.parallelism"</code>，使用此类对象生成的<code>SparkContext</code>对象<code>sc</code>生成的所有<code>RDD</code>只会有设置好的分区个数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line"><span class="comment">## 设置SparkConf对象的参数：全局并行度为1</span></span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.default.parallelism&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 输入数据并创建rdd对象</span></span><br><span class="line">rdd = sc.parallelize(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line"><span class="comment">## 使用saveAsTextFile算子将数据保存为文本文件</span></span><br><span class="line">rdd.saveAsTextFile(<span class="string">&quot;hahah&quot;</span>)</span><br><span class="line"><span class="comment">## 结束进行</span></span><br><span class="line">sc.stop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>生成hahah文件夹</p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月10日10时31分54秒-202406131344525.png" /></p>
<p>只有一个part文件，RDD中的数据都在其中</p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月10日10时32分11秒-202406131344771.png" /></p>
<h4
id="方法二在创建rdd时用numslices规定分区数量">方法二：在创建RDD时用numSlices规定分区数量</h4>
<p>此方法可以针对不同的<code>RDD</code>对象，生成不同的分区个数</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 输入数据并创建rdd对象，并规定分区数量</span></span><br><span class="line">rdd = sc.parallelize(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>), numSlices=<span class="number">1</span>)</span><br><span class="line"><span class="comment">## rdd = sc.parallelize(range(1, 11), 1)也可以</span></span><br><span class="line"><span class="comment">## 使用saveAsTextFile算子将数据保存为文本文件</span></span><br><span class="line">rdd.saveAsTextFile(<span class="string">&quot;hahah&quot;</span>)</span><br><span class="line"><span class="comment">## 结束进行</span></span><br><span class="line">sc.stop()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果相同：</p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月10日10时32分38秒-202406131344092.png" /></p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月10日10时33分21秒-202406131345421.png" /></p>
<p>若<code>PySpark</code>有问题，可参考：</p>
<p>https://www.bilibili.com/read/cv34448100/?jump_opus=1</p>
<h2 id="pyspark网站搜索数据案例分析">PySpark网站搜索数据案例分析</h2>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkConf, SparkContext</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&#x27;PYSPARK_PYTHON&#x27;</span>] = <span class="string">r&quot;H:/python-3.10.11/python.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建SparkConf类对象conf（链式调用）</span></span><br><span class="line">conf = SparkConf().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;test_spark_app&quot;</span>)</span><br><span class="line"><span class="comment">## 设置SparkConf对象的参数：全局并行度（分区数量）为1</span></span><br><span class="line">conf.<span class="built_in">set</span>(<span class="string">&quot;spark.default.parallelism&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="comment">## 基于SparkConf类对象创建SparkContext类对象</span></span><br><span class="line">sc = SparkContext(conf=conf)</span><br><span class="line"><span class="comment">## 读取文件</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">.textFile()算子中有三个参数：name（要打开的文件名），最小分区数minPartitions（默认为2）和use_unicode(默认为Ture)</span></span><br><span class="line"><span class="string">最小分区数minPartitions如果没有设置（conf.set中也没有设置分区数量，那么就会默认有两个分区）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">rdd = sc.textFile(<span class="string">&quot;search_log.txt&quot;</span>)</span><br><span class="line"><span class="comment">## 使用Map方法处理每一条数据（不用flapMap方法，因为要把一组数据保留，不需要解开嵌套）</span></span><br><span class="line">rdd_Map = rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x.split(<span class="string">&quot;\t&quot;</span>))</span><br><span class="line"><span class="comment">## TODO 热门搜索时间段，小时精度，TOP3</span></span><br><span class="line"><span class="comment">## 取出时间（小时）</span></span><br><span class="line">rdd_time = rdd_Map.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: (x[<span class="number">0</span>][:<span class="number">5</span>], <span class="number">1</span>))</span><br><span class="line"><span class="comment">## 计算各个小时的出现次数，并进行排序,取前三</span></span><br><span class="line">rdd_1_result = rdd_time.reduceByKey(<span class="keyword">lambda</span> x, y: x+y).\</span><br><span class="line">    sortBy(<span class="keyword">lambda</span> x: x[<span class="number">1</span>], ascending=<span class="literal">False</span>, numPartitions=<span class="number">1</span>).\</span><br><span class="line">    take(<span class="number">3</span>)</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;热门搜索时间段TOP3：<span class="subst">&#123;rdd_1_result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## TODO 热门搜索词TOP3</span></span><br><span class="line">rdd_word = rdd_Map.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: (x[<span class="number">2</span>], <span class="number">1</span>))</span><br><span class="line"><span class="comment">## 搜索词频数计算，排序，取前三</span></span><br><span class="line">rdd_2_result = rdd_word.reduceByKey(<span class="keyword">lambda</span> x, y: x+y).\</span><br><span class="line">    sortBy(<span class="keyword">lambda</span> x: x[<span class="number">1</span>], ascending=<span class="literal">False</span>, numPartitions=<span class="number">1</span>).\</span><br><span class="line">    take(<span class="number">3</span>)</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;热门搜索词TOP3：<span class="subst">&#123;rdd_2_result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## TODO 统计黑马程序员关键字在那个时间段被搜索的最多</span></span><br><span class="line"><span class="comment">## 删选出关键字为黑马程序员的元素</span></span><br><span class="line">rdd_heima = rdd_Map.<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x[<span class="number">2</span>] == <span class="string">&quot;黑马程序员&quot;</span>)</span><br><span class="line"><span class="comment">## 取出小时，进行计数，排序，取第一</span></span><br><span class="line"><span class="comment">## 在链式调用中可以用 \+回车 来换行，程序运行时仍识别为一行，增强可读性</span></span><br><span class="line">rdd_3_result = rdd_heima.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: (x[<span class="number">0</span>][:<span class="number">5</span>], <span class="number">1</span>)).\</span><br><span class="line">    reduceByKey(<span class="keyword">lambda</span> x, y: x+y).\</span><br><span class="line">    sortBy(<span class="keyword">lambda</span> x: x[<span class="number">1</span>], ascending=<span class="literal">False</span>, numPartitions=<span class="number">1</span>).\</span><br><span class="line">    take(<span class="number">1</span>)</span><br><span class="line"><span class="comment">## 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;黑马程序员关键字在以下时间段被搜索的最多：<span class="subst">&#123;rdd_3_result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## TODO 将文件转化为json格式，写出文件</span></span><br><span class="line"><span class="comment">## 制作json格式文件</span></span><br><span class="line"><span class="comment">## 方法一</span></span><br><span class="line">json_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> rdd_Map.collect():</span><br><span class="line">    json_list.append(</span><br><span class="line">        &#123;<span class="string">&quot;date&quot;</span>: i[<span class="number">0</span>],</span><br><span class="line">         <span class="string">&quot;ID&quot;</span>: i[<span class="number">1</span>],</span><br><span class="line">         <span class="string">&quot;key_word&quot;</span>: i[<span class="number">2</span>],</span><br><span class="line">         <span class="string">&quot;num_1&quot;</span>: i[<span class="number">3</span>],</span><br><span class="line">         <span class="string">&quot;num_2&quot;</span>: i[<span class="number">4</span>],</span><br><span class="line">         <span class="string">&quot;website&quot;</span>: i[<span class="number">5</span>]&#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment">## 将json格式文件转化为字符串</span></span><br><span class="line">json_str = json.dumps(json_list)</span><br><span class="line"><span class="comment">## 写入文件</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;json_search_log.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">f.write(json_str)  <span class="comment"># 这里写入的txt文件是乱码，可能是因为sc.textFile的原因</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">## 方法二</span></span><br><span class="line"><span class="comment">## 直接使用map方法构造字典</span></span><br><span class="line">rdd_dict = rdd.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x.split(<span class="string">&quot;\t&quot;</span>)).<span class="built_in">map</span>(<span class="keyword">lambda</span> k: &#123;</span><br><span class="line">    <span class="string">&quot;date&quot;</span>: k[<span class="number">0</span>],</span><br><span class="line">    <span class="string">&quot;ID&quot;</span>: k[<span class="number">1</span>],</span><br><span class="line">    <span class="string">&quot;key_word&quot;</span>: k[<span class="number">2</span>],</span><br><span class="line">    <span class="string">&quot;num_1&quot;</span>: k[<span class="number">3</span>],</span><br><span class="line">    <span class="string">&quot;num_2&quot;</span>: k[<span class="number">4</span>],</span><br><span class="line">    <span class="string">&quot;website&quot;</span>: k[<span class="number">5</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">## 输出文件夹</span></span><br><span class="line"><span class="comment">## 会按照列表中的各个元素，一个元素为一行生成文本</span></span><br><span class="line">rdd_dict.saveAsTextFile(<span class="string">&quot;json_search_data&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 进程停止</span></span><br><span class="line">sc.stop()</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">热门搜索时间段TOP3：[(&#x27;20:00&#x27;, 3479), (&#x27;23:00&#x27;, 3087), (&#x27;21:00&#x27;, 2989)]</span></span><br><span class="line"><span class="string">热门搜索词TOP3：[(&#x27;scala&#x27;, 2310), (&#x27;hadoop&#x27;, 2268), (&#x27;博学谷&#x27;, 2002)]</span></span><br><span class="line"><span class="string">黑马程序员关键字在以下时间段被搜索的最多：[(&#x27;22:00&#x27;, 245)]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出文件夹和文件</p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/202406131345581.png"
alt="image-20240531123904305" />
<figcaption aria-hidden="true">image-20240531123904305</figcaption>
</figure>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/202406131345568.png"
alt="image-20240531123930021" />
<figcaption aria-hidden="true">image-20240531123930021</figcaption>
</figure>
<p>注意：</p>
<ul>
<li>如果不进行<code>conf.set("spark.default.parallelism", "1")</code>，那么<code>sc.textFile</code>默认让最小分区数量为2</li>
<li>代码的换行:<code>\\\+回车</code>, 增强代码的可读性</li>
<li>由于rdd的算子的仍返回<code>rdd</code>对象，所以可以进行链式调用</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL基础</title>
    <url>/2024/08/25/SQL%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="mysql概述">MySql概述</h1>
<h2 id="数据库相关概念">数据库相关概念</h2>
<table>
<colgroup>
<col style="width: 13%" />
<col style="width: 56%" />
<col style="width: 30%" />
</colgroup>
<thead>
<tr class="header">
<th>名称</th>
<th>全称</th>
<th>简称</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>数据库</td>
<td>存储数据的仓库，数据是有组织的进行存储</td>
<td>DataBase(DB)</td>
</tr>
<tr class="even">
<td>数据库管理系统</td>
<td>操纵和管理数据库的大型软件，如Mysql</td>
<td>DataBase Management System(DBMS)</td>
</tr>
<tr class="odd">
<td>SQL</td>
<td>操作关系型数据库的编程语言,定义了一套操作关系型数据库统一标准</td>
<td>Structured Query Language(SQL)</td>
</tr>
</tbody>
</table>
<p>通过sql语句来控制数据库管理系统，进而控制数据库中的数据</p>
<h2 id="mysql下载与安装">Mysql下载与安装</h2>
<p>进入Mysql数据库管理系统<a
href="https://dev.mysql.com/downloads/installer/">windows安装器官网</a>下载界面，下载打开安装全部选项，其他全选默认</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月25日22时41分28秒-image-20240825224128308.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月25日22时41分41秒-image-20240825224141911.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>设置密码</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月25日22时41分55秒-image-20240825224155313.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月25日22时43分46秒-image-20240825224346152.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>这里也可以不用设置，MySql80服务开机自启，每次开机可以通过管理者权限的CMD输入以下命令进行启动（不区分大小写）</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> mysql80</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日11时11分51秒-image-20240826111144110.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>输入以下命令停止</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> stop mysql80</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日11时12分44秒-image-20240826111244202.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>详细看<a
href="https://www.cnblogs.com/qicaide/p/10884608.html">这里</a>，然后直接next完成完成安装</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月25日22时45分38秒-image-20240825224538194.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>测试连接</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月25日22时46分30秒-image-20240825224630694.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>这里我选择这个，不知道这个是干嘛的，等有问题再说</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月25日22时48分02秒-image-20240825224802057.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>至此安装完毕</p>
<h2 id="客户端连接">客户端连接</h2>
<h3 id="mysql自带的命令行客户端连接">mysql自带的命令行客户端连接</h3>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月25日22时51分21秒-image-20240825225121590.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>输入之前设置的密码</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月25日22时51分39秒-image-20240825225139922.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>连接成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月25日22时51分55秒-image-20240825225155043.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="系统命令行工具连接mysql">系统命令行工具连接mysql</h3>
<p>cmd输入</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">mysql [-h <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>] [-p <span class="number">3306</span>] -u root -p</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>
<p>其中[]中的可以省略，<code>[-h 127.0.0.1]</code>代表IP，
<code>[-p 3306]</code>代表的端口</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月25日22时55分10秒-image-20240825225510859.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h2 id="mysql环境变量的配置">Mysql环境变量的配置</h2>
<p>在系统环境变量的path中加入mysql文件夹的<code>bin</code>文件夹的目录：<code>C:\Program Files\MySQL\MySQL Server 8.0\bin</code></p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月25日22时58分37秒-image-20240825225837588.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h2 id="mysql数据库模型">Mysql数据库模型</h2>
<pre class="mermaid">%%{ init: { 'flowchart': { 'curve': 'linear' } } }%%
flowchart LR

    A("客户端") ---> B("DMBS（软件）")
    
    subgraph "MySql数据库服务器 "
        style tip1 fill:#f9f,stroke:#333,stroke-width:4px
    tip1("表才是存储数据的最终单元
    在一个服务器中可以创建多个数据库
    在一个数据库中可以创建多个表")
    B ---> D["数据库1"]
    B ---> E["数据库2"]
    
    D --->F["表1"]
    D --->G["表2"]
    
    E --->H["表3"]
    E --->I["表4"]
    end</pre>
<h2 id="关系型数据库">关系型数据库</h2>
<p>关系型数据库是一种以关系模型为理论基础的数据库系统，它通过二维表的形式存储数据，并且这些表之间通过关系进行连接。</p>
<p>表一：</p>
<table>
<thead>
<tr class="header">
<th>id</th>
<th>name</th>
<th>job</th>
<th>dept_id</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>金庸</td>
<td>总裁</td>
<td>2</td>
</tr>
<tr class="even">
<td>2</td>
<td>张无忌</td>
<td>项目经理</td>
<td>1</td>
</tr>
<tr class="odd">
<td>3</td>
<td>杨逍</td>
<td>开发</td>
<td>3</td>
</tr>
</tbody>
</table>
<p>表二：</p>
<table>
<thead>
<tr class="header">
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>研发部</td>
</tr>
<tr class="even">
<td>2</td>
<td>总经办</td>
</tr>
<tr class="odd">
<td>3</td>
<td>财务部</td>
</tr>
</tbody>
</table>
<p>表一和表二为两张二维表格，且两张表格通过dept_id连接起来，两张表可以相互查找，这些表就称为关系型数据库表。</p>
<p>关系型数据库表有以下特点：</p>
<ul>
<li><p>使用表存储数据，格式统一，便于维护。</p></li>
<li><p>使用SQL语言操作，标准统一，使用方便。</p></li>
</ul>
<blockquote>
<p>通过表结构存贮数据的数据库称为<strong>关系型数据库</strong>，不通过表结构存贮数据的称为<strong>非关系型数据库</strong></p>
</blockquote>
<h1 id="sql">SQL</h1>
<h2 id="sql通用语法">SQL通用语法</h2>
<ul>
<li><p>SQL语句可以单行或多行书写，以<strong>分号</strong>结尾。</p></li>
<li><p>SQL语句可以使用<strong>空格/缩进</strong>（可以多个空格/缩进）来增强语句的可读性。</p></li>
<li><p>MySQL数据库的SQL语句<strong>不区分大小写</strong>，关键字<strong>建议</strong>使用大写。</p></li>
<li><p>注释：</p></li>
</ul>
<blockquote>
<p>单行注释：<code>--注释内容</code> 或
<code>#注释内容</code>（MySQL特有）</p>
<p>多行注释：<code>/*注释内容*/</code></p>
</blockquote>
<h2 id="sql的分类">SQL的分类</h2>
<table>
<colgroup>
<col style="width: 4%" />
<col style="width: 35%" />
<col style="width: 60%" />
</colgroup>
<thead>
<tr class="header">
<th>分类</th>
<th>全称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>DDL</td>
<td>Data Definition Language (DDL)</td>
<td>数据定义语言，用来定义数据库对象（数据库、表、字段）</td>
</tr>
<tr class="even">
<td>DML</td>
<td>Data Manipulation Language (DML)</td>
<td>数据操作语言，用来对数据库表中的数据进行增删改</td>
</tr>
<tr class="odd">
<td>DQL</td>
<td>Data Query Language (DQL)</td>
<td>数据查询语言，用来查询数据库中表的记录</td>
</tr>
<tr class="even">
<td>DCL</td>
<td>Data Control Language (DCL)</td>
<td>数据控制语言，用来创建数据库用户、控制数据库的访问权限</td>
</tr>
</tbody>
</table>
<h2 id="data-definition-language-ddl">Data Definition Language
(DDL)</h2>
<h3 id="数据库操作">数据库操作</h3>
<h4 id="查询">查询</h4>
<ul>
<li>查询所有数据库</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure>
<hr />
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日11时14分34秒-image-20240826111433962.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li><p>查询当前选中的数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATABASE();</span><br></pre></td></tr></table></figure></li>
</ul>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日15时27分36秒-image-20240826152736804.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>注意后面需要加一个括号</p>
</blockquote>
<h4 id="创建">创建</h4>
<ul>
<li><p>创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] 数据库名 [<span class="keyword">DEFAULT</span> CHARSET 字符集] [<span class="keyword">COLLATE</span> 排序规则];</span><br><span class="line"># []中代表可以省略</span><br><span class="line"># [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>]表示如果数据库存在，则不创建；不存在则创建</span><br></pre></td></tr></table></figure></li>
</ul>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日11时19分35秒-image-20240826111935076.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>再次输入同样的创建数据库的命令，会报错</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日11时20分54秒-image-20240826112054601.png"  width="45%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>添加<code>[IF NOT EXISTS]</code>可以略过这个错误</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日11时27分31秒-image-20240826112731868.png"  width="45%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>看到没有错误，只有警告。</p>
<p>创建不存在的数据库，直接创建成功。</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日15时15分02秒-image-20240826151455514.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>使用<code>[DEFAULT CHARSET 字符集]</code>创建<code>uft9mb4</code>编码的数据库</p>
<blockquote>
<p>不建议使用<code>uft8</code>编码，因为<code>utf8</code>只支持每个汉字占三个字节的文字，但是有些汉字是占4个字节，所以<code>uft8mb4</code>更为合适</p>
</blockquote>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日15时18分10秒-image-20240826151810277.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h4 id="删除">删除</h4>
<ul>
<li><p>删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] 数据库名;</span><br></pre></td></tr></table></figure></li>
</ul>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日15时22分11秒-image-20240826152211498.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>删除不存在的数据库会报错</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日15时23分00秒-image-20240826152300095.png"  width="45%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>使用<code>[IF EXISTS]</code>避免错误：如果数据库存在则删除，不存在则不删除</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日15时24分20秒-image-20240826152420167.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h4 id="使用">使用</h4>
<ul>
<li><p>使用数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure></li>
</ul>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日15时26分41秒-image-20240826152641238.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="表操作">表操作</h3>
<h4 id="查询表">查询表</h4>
<h5 id="查询当前数据库所有表">查询当前数据库所有表</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> TABLES;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日15时36分15秒-image-20240826153615093.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h5 id="查询表结构">查询表结构</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DESC</span> 表名;</span><br></pre></td></tr></table></figure>
<p>查看创建的表结构</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日15时53分05秒-image-20240826155305769.png"  width="45%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>查看系统自带的数据库的表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use world;</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">desc</span> country;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日15时55分29秒-image-20240826155528983.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h5 id="查询指定表的建表语句">查询指定表的建表语句</h5>
<p>在使用<code>desc 表名;</code>查看表结构时，并不能看到创建表时写的注释，这时就要使用<code>SHOW CREATE TABLE 表名;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure>
<p>查看创建表的建表语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_user;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日16时01分26秒-image-20240826160125966.png"  width="65%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>在上述信息上可以看到我们创建表的注释，而且可以看到</p>
<ul>
<li><code>ENGINE=InnoDB</code>表示数据存贮引擎</li>
<li><code>DEFAULT CHARSET=utf8mb4</code>表示默认编码格式为<code>utf8mb4</code></li>
<li><code>COLLATE=utf8mb4_0900_ai_ci</code>表示排序规则</li>
</ul>
<h4 id="创建表">创建表</h4>
<p>创建表的SQL语句格式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">    字段<span class="number">1</span> 字段<span class="number">1</span>类型 [COMMENT 字段<span class="number">1</span>注释],</span><br><span class="line">    字段<span class="number">2</span> 字段<span class="number">2</span>类型 [COMMENT 字段<span class="number">2</span>注释],</span><br><span class="line">    字段<span class="number">3</span> 字段<span class="number">3</span>类型 [COMMENT 字段<span class="number">3</span>注释],</span><br><span class="line">    ...</span><br><span class="line">    字段n 字段n类型 [COMMENT 字段n注释]</span><br><span class="line">) [COMMENT 表注释];</span><br><span class="line"># 注意最后的定义的字段类型的末尾不要加分号;</span><br><span class="line"># 最后结尾要加上分号;</span><br><span class="line"># 中文注释要用引号括起来</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日15时51分55秒-image-20240826155154972.png"  width="45%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h4 id="约束的设置">约束的设置</h4>
<p>在创建表时，可以对字段下的数据设置规则进行约束，只能输入符合规范的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">（<span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>该列所需约束<span class="operator">&gt;</span>，</span><br><span class="line"><span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>该列所需约束<span class="operator">&gt;</span>，</span><br><span class="line"><span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>该列所需约束<span class="operator">&gt;</span>，</span><br><span class="line"><span class="operator">&lt;</span>列名<span class="number">4</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>该列所需约束<span class="operator">&gt;</span>，</span><br><span class="line"><span class="operator">&lt;</span>该表的约束<span class="number">1</span><span class="operator">&gt;</span>， <span class="operator">&lt;</span>该表的约束<span class="number">2</span><span class="operator">&gt;</span>，……）；</span><br></pre></td></tr></table></figure>
<p>设置约束有两种方法</p>
<h5 id="创建表时在字段后加上约束">创建表时在字段后加上约束</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Students (</span><br><span class="line">    S_Id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    S_StuNo <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    S_Name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    S_Sex <span class="type">CHAR</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    S_Height <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    S_BirthDate <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    C_S_Id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>上述除<code>S_Id</code>外所有的字段都为为非空，<code>S_Id</code>设置为主键，主键是每一行数据或每一列数据的<strong>唯一</strong>标识，也就是说通过<code>S_Id</code>字段可以取出特定的学生的信息。</p>
<p>主键有以下几个特性：</p>
<ul>
<li>唯一性：主键值在表中必须是唯一的。</li>
<li>非空性：主键列不允许为 NULL。</li>
<li>不可修改性：一旦定义了主键，就不应该修改它的值</li>
</ul>
<p>若是想添加不符合规则的数据，会报错</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Students (S_Id, S_StuNo, S_Name, S_Sex, S_Height, S_BirthDate, C_S_Id) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;002&#x27;</span>, <span class="string">&#x27;刘邦&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">170</span>, <span class="string">&#x27;2017-01-01&#x27;</span>, <span class="keyword">NULL</span>)</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024/10/image-20241009152405345-995a82.png"  width="40%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h5 id="创建表时在末尾加上约束">创建表时在末尾加上约束</h5>
<h4 id="数据类型及案例">数据类型及案例</h4>
<h5 id="mysql数值类型范围和描述">MySQL数值类型范围和描述</h5>
<table>
<colgroup>
<col style="width: 5%" />
<col style="width: 7%" />
<col style="width: 4%" />
<col style="width: 37%" />
<col style="width: 34%" />
<col style="width: 11%" />
</colgroup>
<thead>
<tr class="header">
<th>分类</th>
<th>类型</th>
<th>大小</th>
<th>有符号(SIGNED)范围</th>
<th>无符号(UNSIGNED)范围</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>数值类型</td>
<td>TINYINT</td>
<td>1 byte</td>
<td>(-128, 127)</td>
<td>(0, 255)</td>
<td>小整数值</td>
</tr>
<tr class="even">
<td>数值类型</td>
<td>SMALLINT</td>
<td>2 bytes</td>
<td>(-32768, 32767)</td>
<td>(0, 65535)</td>
<td>大整数值</td>
</tr>
<tr class="odd">
<td>数值类型</td>
<td>MEDIUMINT</td>
<td>3 bytes</td>
<td>(-8388608, 8388607)</td>
<td>(0, 16777215)</td>
<td>大整数值</td>
</tr>
<tr class="even">
<td>数值类型</td>
<td>INT或INTEGER</td>
<td>4 bytes</td>
<td>(-2147483648, 2147483647)</td>
<td>(0, 4294967295)</td>
<td>大整数值</td>
</tr>
<tr class="odd">
<td>数值类型</td>
<td>BIGINT</td>
<td>8 bytes</td>
<td>(-2^63, 2^63-1)</td>
<td>(0, 2^64-1)</td>
<td>极大整数值</td>
</tr>
<tr class="even">
<td>数值类型</td>
<td>FLOAT(M, N)</td>
<td>4 bytes</td>
<td>(-3.402823466 E+38, 3.402823466 E+38)</td>
<td>0和(1.175494351 E-38, 3.402823466 E+38)</td>
<td>单精度浮点数值</td>
</tr>
<tr class="odd">
<td>数值类型</td>
<td>DOUBLE(M, N)</td>
<td>8 bytes</td>
<td>(-1.7976931348623157 E+308, 1.7976931348623157 E+308)</td>
<td>0和(2.2250738585072014 E-308, 1.7976931348623157 E+308)</td>
<td>双精度浮点数值</td>
</tr>
<tr class="even">
<td>数值类型</td>
<td>DECIMAL</td>
<td></td>
<td>依赖于M(精度)和D(标度)的值[如123.45的精度（总位数）为5，标度（小数点后位数）为2]</td>
<td>依赖于M(精度)和D(标度)的值</td>
<td>小数值(精确定点数)</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>浮点数类型说明</strong></p>
<table>
<colgroup>
<col style="width: 16%" />
<col style="width: 83%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">类型</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">FLOAT(M, D)</td>
<td
style="text-align: center;">浮点数（单精度），M为总位数，D为小数位数。若M和D省略，根据硬件允许的限制来保存值。单精度浮点数精确到大约7位小数位。</td>
</tr>
<tr class="even">
<td style="text-align: center;">DOUBLE(M, D)</td>
<td
style="text-align: center;">双精度浮点数。M为总位数，D为小数位数。若M和D省略，根据硬件允许的限制来保存值。双精度浮点数精确到大约15位小数位。</td>
</tr>
</tbody>
</table>
</blockquote>
<p>如年龄age，在创建表的时候就可以使用<code>INT</code>类型，但是<code>INT</code>类型占用了4个字节，而且<code>INT</code>类型的包括范围远远超过一般的年龄范围，这时候就可以使用<code>TINYINT</code>来创建：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">age TINYINT;</span><br></pre></td></tr></table></figure>
<p>但是这样负数的年龄也是合法的，这时就可以使用无符号(UNSIGNED)的<code>TINYINT</code>来创建age的类型：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">age TINYINT UNSIGNED;</span><br></pre></td></tr></table></figure>
<p>再例如分数，最高分为100，我们需要输入分数保留小数点后一位，就需要控制精度和标度，可以使用无符号的<code>DOUBLE</code>类型来控制，</p>
<p>使用<code>DOUBLE(4, 1)</code>来控制精度和标度：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">score <span class="keyword">DOUBLE</span>(<span class="number">4</span>, <span class="number">1</span>) UNSIGNED;</span><br></pre></td></tr></table></figure>
<h5 id="mysql字符串类型及其描述">MySQL字符串类型及其描述</h5>
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 14%" />
<col style="width: 30%" />
<col style="width: 40%" />
</colgroup>
<thead>
<tr class="header">
<th>分类</th>
<th>类型</th>
<th>大小</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>字符串类型</td>
<td>CHAR</td>
<td>0-255 bytes</td>
<td>定长字符串</td>
</tr>
<tr class="even">
<td>字符串类型</td>
<td>VARCHAR</td>
<td>0-65535 bytes</td>
<td>变长字符串</td>
</tr>
<tr class="odd">
<td>字符串类型</td>
<td>TINYBLOB</td>
<td>0-255 bytes</td>
<td>不超过255个字节的二进制数据</td>
</tr>
<tr class="even">
<td>字符串类型</td>
<td>TINYTEXT</td>
<td>0-255 bytes</td>
<td>短文本字符串</td>
</tr>
<tr class="odd">
<td>字符串类型</td>
<td>BLOB</td>
<td>0-65535 bytes</td>
<td>二进制形式的长文本数据</td>
</tr>
<tr class="even">
<td>字符串类型</td>
<td>TEXT</td>
<td>0-65,535 bytes</td>
<td>长文本数据</td>
</tr>
<tr class="odd">
<td>字符串类型</td>
<td>MEDIUMBLOB</td>
<td>0-16,777,215 bytes</td>
<td>二进制形式的中等长度文本数据</td>
</tr>
<tr class="even">
<td>字符串类型</td>
<td>MEDIUMTEXT</td>
<td>0-16,777,215</td>
<td>中等长度文本数据</td>
</tr>
<tr class="odd">
<td>字符串类型</td>
<td>LONGBLOB</td>
<td>0-2,147,483,647 bytes</td>
<td>二进制形式的极大文本数据</td>
</tr>
<tr class="even">
<td>字符串类型</td>
<td>LONGTEXT</td>
<td>0-4,294,967,295 bytes</td>
<td>极大文本数据</td>
</tr>
</tbody>
</table>
<blockquote>
<ul>
<li><p>二进制形式数据指的是一些音频或者安装包等数据</p></li>
<li><p>CHAR和VARCHAR后面都要添添加（），写入需要储存字符的个数，如果超过这个个数就会报错。CHAR(10)和VARCHAR(10)的区别是如果存储了2个字符，CHAR（10）的剩余八个字符会用空格补位，共占10个字符。而VARCHAR(10)会灵活的调整所存贮的字符个数，再10以内的范围内变化，输入几个字符就存储几个字符。所以CHAR和VARCHAR相比性能更加优越，因为VARCHAR在使用的时候要计算字符占用的空间。</p></li>
</ul>
</blockquote>
<p>例如最长50个字符的用户名，因为每个人的用户名长度不同，若使用<code>char</code>，那么剩余的空间将是多余的，所以使用<code>varchar(50)</code>更好</p>
<p>再例如性别，使用性能较高的<code>char(1)</code>即可。</p>
<h5 id="mysql日期和时间类型及其描述">MySQL日期和时间类型及其描述</h5>
<table style="width:100%;">
<colgroup>
<col style="width: 8%" />
<col style="width: 9%" />
<col style="width: 4%" />
<col style="width: 42%" />
<col style="width: 19%" />
<col style="width: 16%" />
</colgroup>
<thead>
<tr class="header">
<th>分类</th>
<th>类型</th>
<th>大小</th>
<th>范围</th>
<th>格式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>日期类型</td>
<td>DATE</td>
<td>3</td>
<td>1000-01-01 至 9999-12-31</td>
<td>YYYY-MM-DD</td>
<td>日期值</td>
</tr>
<tr class="even">
<td>日期类型</td>
<td>TIME</td>
<td>3</td>
<td>-838:59:59 至 838:59:59</td>
<td>HH:MM:SS</td>
<td>时间值或持续时间</td>
</tr>
<tr class="odd">
<td>日期类型</td>
<td>YEAR</td>
<td>1</td>
<td>1901至2155</td>
<td>YYYY</td>
<td>年份值</td>
</tr>
<tr class="even">
<td>日期类型</td>
<td>DATETIME</td>
<td>8</td>
<td>1000-01-01 00:00:00至 9999-12-31 23:59:59</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>混合日期和时间值</td>
</tr>
<tr class="odd">
<td>日期类型</td>
<td>TIMESTAMP</td>
<td>4</td>
<td>1970-01-01 00:00:01至2038-01-19 03:14:07</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>时间戳</td>
</tr>
</tbody>
</table>
<p>注意<code>TIMESTAMP</code>类型时间最晚到<code>2038-01-19 03:14:07</code></p>
<p>例如生日的类型，只需记录年月日，这时候就可以使用<code>data</code>类型。</p>
<h5 id="案例">案例</h5>
<p>设计一张员工信息表，员工信息表设计要求如下：</p>
<ol type="1">
<li>编号 (纯数字)</li>
<li>员工工号 (字符串类型，长度不超过10位)</li>
<li>员工姓名 (字符串类型，长度不超过10位)</li>
<li>性别 (男/女，存储一个汉字)</li>
<li>年龄 (正常人年龄，不可能存储负数)</li>
<li>身份证号 (二代身份证号均为18位，身份证中有X这样的字符)</li>
<li>入职时间 (取值年月日即可)</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> EMP (</span><br><span class="line">	id <span class="type">INT</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    workid <span class="type">VARCHAR</span>(<span class="number">10</span>) comment <span class="string">&#x27;员工工号&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">10</span>) comment <span class="string">&#x27;员工姓名&#x27;</span>,</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    age TINYINT UNSIGNED comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    id_num <span class="type">CHAR</span>(<span class="number">18</span>) comment <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line">    entry_data <span class="type">DATE</span>  comment <span class="string">&#x27;入职时间&#x27;</span></span><br><span class="line">)  comment <span class="string">&#x27;员工信息表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日21时37分09秒-image-20240826213709822.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h4 id="修改">修改</h4>
<p>修改表(对表进行个别修改)要用到<code>ALTER TABLE</code>，具体操作总结如下：</p>
<pre class="mermaid">flowchart LR
    B("ALTER TABLE <b>表名</b>")
    
    B --->|添加字段| A["<b>ADD</b> 字段名 类型(长度) [COMMENT 注释] [约束];"]
    B --->|修改字段类型| C["<b>MODIFY</b> 字段名 新数据类型(长度);"]
    B --->|修改字段名称类型| D["<b>CHANGE</b> 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];"]
    B --->|重命名表名| E["<b>RENAME TO</b> 新表名;"]
    B --->|删除字段| F["<b>drop</b> 字段名;"]</pre>
<h5 id="添加字段">添加字段</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段名 类型(长度) [COMMENT 注释] [约束];</span><br></pre></td></tr></table></figure>
<p>在<code>emp</code>表中增加一个名为<code>nickname</code>的新字段，字段类型为<code>varchar(20)</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 进入wufan数据库</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> nikename <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;昵称&#x27;</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日21时44分25秒-image-20240826214424882.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h5 id="修改字段">修改字段</h5>
<h6 id="修改数据类型">修改数据类型</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 新数据类型(长度);</span><br></pre></td></tr></table></figure>
<h6 id="修改字段名和类型">修改字段名和类型</h6>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</span><br></pre></td></tr></table></figure>
<p>案例：修改<code>emp</code>表中的<code>nikename</code>字段名称为<code>username</code>，并将字段类型修改为<code>varchar(30)</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp CHANGE nikename username <span class="type">varchar</span>(<span class="number">30</span>) COMMENT <span class="string">&#x27;修改nikename为username&#x27;</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日21时55分03秒-image-20240826215503457.png"  width="65%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h5 id="修改表名">修改表名</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 RENAME <span class="keyword">TO</span> 新表名;</span><br></pre></td></tr></table></figure>
<p>案例：将<code>emp</code>表修改为<code>employee</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp RENAME <span class="keyword">TO</span> employee;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日22时04分07秒-image-20240826220407369.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h4 id="删除-1">删除</h4>
<h5 id="删除字段">删除字段</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">drop</span> 字段名;</span><br></pre></td></tr></table></figure>
<p>案例：将<code>emp</code>表中的<code>username</code>字段删除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">drop</span> username;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日22时00分32秒-image-20240826220032621.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h5 id="删除表">删除表</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [IF <span class="keyword">EXISTS</span>] 表名;</span><br></pre></td></tr></table></figure>
<p>案例：删除<code>tb_user</code>表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_user;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果存在<code>tb_user</code>表那么删除这个表，加了<code>IF EXISTS</code>后如果不存在也不会报错</p>
</blockquote>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日22时11分56秒-image-20240826221156718.png"  width="45%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h5 id="删除并重新创建表">删除并重新创建表</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure>
<p>案例；清除<code>employee</code>表中的所有数据，重新创建该表，保存原来的表结构</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> employee;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月26日22时13分30秒-image-20240826221330664.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h2 id="mysql图形化界面">MySql图形化界面</h2>
<p>从<a
href="https://www.jetbrains.com/zh-cn/datagrip/download/#section=windows">官网</a>下载datagrip，下载后安装。下载<a
href="/data/Crack.rar">破解包</a>。测试破解包可破解<code>2024.2.1</code>的版本。</p>
<p>解压破解包，将解压出来的<code>Crack</code>文件夹放入DataGrip程序安装目录的<code>bin</code>文件夹中，双击运行<code>Crack</code>文件夹中的<code>安装.bat</code>文件，等待完成后，复制<code>zcode.txt</code>中的激活码即可激活程序。</p>
<p>（不直到为什么上述方法又不行了）</p>
<p>从<a
href="https://www.jetbrains.com/zh-cn/datagrip/download/#section=windows">官网</a>下载datagrip2024.1版本，下载后安装。下载<a
href="/data/Crack.rar">破解包</a>。下载<a
href="/data/DataSpell激活.vbs">破解文件</a>，双击运行即可破解使用</p>
<h3 id="连接mysql">连接MySql</h3>
<p>按照如下所示建立数据库连接</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时07分19秒-image-20240827100712358.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>填写方框中的内容，其他保持默认</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时09分35秒-image-20240827100935004.png"  width="65%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>测试是否连接成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时10分47秒-image-20240827101046916.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>若连接失败可以查看任务管理器中是否有SQL服务，若没有，在管理员权限的CMD中输入：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">net</span> <span class="built_in">start</span> mysql80</span><br></pre></td></tr></table></figure>
<p>开启MySql服务。</p>
<p>打开这些选项即可看到服务器中数据库的内容</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时15分46秒-image-20240827101546683.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="创建数据库">创建数据库</h3>
<p>如图点击</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时33分29秒-image-20240827103329156.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时34分08秒-image-20240827103408650.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>下面会预览所要执行的SQL语句，<code>creat schema</code>和<code>creat database</code>是等效的。</p>
<h3 id="创建表-1">创建表</h3>
<h4 id="图形化界面创建">图形化界面创建</h4>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时43分13秒-image-20240827104312979.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>按照步骤创建表和字段</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时49分11秒-image-20240827104910936.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>创建成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时49分51秒-image-20240827104950961.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h4 id="控制台创建">控制台创建</h4>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时53分15秒-image-20240827105315414.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>输入SQL语句</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时55分11秒-image-20240827105511618.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="修改表">修改表</h3>
<h4 id="图形化界面修改">图形化界面修改</h4>
<p>目标：将<code>user</code>表中的<code>name</code>字段的数据类型改为<code>char(5)</code></p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时52分32秒-image-20240827105231873.png"  width="45%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时57分57秒-image-20240827105757115.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>修改成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时58分27秒-image-20240827105827758.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h4 id="控制台修改">控制台修改</h4>
<p>目标：将<code>user</code>表中的<code>name</code>字段的数据类型改为<code>varchar(5)</code></p>
<p>打开表控制台</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日10时59分47秒-image-20240827105947219.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>输入：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> MODIFY name <span class="type">varchar</span>(<span class="number">50</span>);</span><br></pre></td></tr></table></figure>
<p>修改成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日11时01分24秒-image-20240827110124187.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h2 id="data-manipulation-language-dml">Data Manipulation Language
(DML)</h2>
<p>DML英文全称是Data Manipulation
Language，用来对数据库中表的数据记录进行<strong>增删改</strong>操作。</p>
<h3 id="添加数据">添加数据</h3>
<h4 id="给指定字段添加数据">给指定字段添加数据</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将值1赋值给字段名1，将值2赋值给字段名2，以此类推。</p>
</blockquote>
<p>案例：为<code>wufan</code>数据库中的<code>employee</code>表指定字段添加数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">    employee (id, workid, name, gender, age, id_num, entry_data)</span><br><span class="line">    <span class="keyword">values</span> (</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            &quot;12345&quot;,</span><br><span class="line">            &quot;wufan&quot;,</span><br><span class="line">            &quot;男&quot;,</span><br><span class="line">            <span class="number">24</span>,</span><br><span class="line">            &quot;2131234&quot;,</span><br><span class="line">            &quot;2024-3-1&quot;</span><br><span class="line">             )</span><br></pre></td></tr></table></figure>
<p>查看表中信息，数据添加成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日14时21分35秒-image-20240827142135278.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>若数据不符合规范，则会报错，比如将年龄改为负数，输入：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">    employee (id, workid, name, gender, age, id_num, entry_data)</span><br><span class="line">    <span class="keyword">values</span> (</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            &quot;12345&quot;,</span><br><span class="line">            &quot;wufan&quot;,</span><br><span class="line">            &quot;男&quot;,</span><br><span class="line">            <span class="number">-24</span>,</span><br><span class="line">            &quot;2131234&quot;,</span><br><span class="line">            &quot;2024-3-1&quot;</span><br><span class="line">             )</span><br></pre></td></tr></table></figure>
<p>代码报错</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日14时26分27秒-image-20240827142627413.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
</blockquote>
<h4 id="给全部字段添加数据">给全部字段添加数据</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>给所有的字段添加数据，数据的个数要与字段数相符。</p>
<p>值1为表中第一个字段的值，值2为表中第2个字段的值，以此类推。</p>
</blockquote>
<p>案例：为<code>wufan</code>数据库中的<code>employee</code>表所有字段添加数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">    employee</span><br><span class="line">    <span class="keyword">values</span> (</span><br><span class="line">            <span class="number">3232</span>,</span><br><span class="line">            &quot;213&quot;,</span><br><span class="line">            &quot;lml&quot;,</span><br><span class="line">            &quot;女&quot;,</span><br><span class="line">            <span class="number">18</span>,</span><br><span class="line">            &quot;2132334&quot;,</span><br><span class="line">            &quot;2024-2-1&quot;</span><br><span class="line">             )</span><br></pre></td></tr></table></figure>
<p>插入成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日14时29分44秒-image-20240827142944293.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h4 id="批量添加数据">批量添加数据</h4>
<h5 id="指定字段添加数据">指定字段添加数据</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名(字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, ...),(值<span class="number">1</span>, 值<span class="number">2</span>, ...),(值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第一个(值1, 值2, ...)分别赋值给(字段名1, 字段名2,
...)，再将第二个(值1, 值2, ...)分别赋值给(字段名1, 字段名2, ...)</p>
</blockquote>
<p>案例：为<code>wufan</code>数据库中的<code>employee</code>表中<code>id</code>,
<code>workid</code>, <code>name</code>,
<code>gender</code>字段添加多条数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee (id, workid, name, gender)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">123</span>, &quot;2131&quot;, &quot;Mike&quot;, &quot;男&quot;),</span><br><span class="line">       (<span class="number">1233</span>, &quot;4441&quot;, &quot;John&quot;, &quot;男&quot;);</span><br></pre></td></tr></table></figure>
<p>添加成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日14时40分05秒-image-20240827144004960.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h5 id="全部字段添加数据">全部字段添加数据</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span>(值<span class="number">1</span>, 值<span class="number">2</span>, ...),(值<span class="number">1</span>, 值<span class="number">2</span>, ...),(值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将(值1, 值2,
...)按排列顺序赋值给全部字段，接着进行下一组的赋值，以此类推。</p>
</blockquote>
<p>案例：为<code>wufan</code>数据库中的<code>employee</code>表中全部字段添加多条数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee <span class="keyword">values</span> (<span class="number">2133</span>, &quot;2231&quot;, &quot;Marry&quot;, &quot;女&quot;, <span class="number">24</span>, &quot;2344&quot;, &quot;2008-3-1&quot;),</span><br><span class="line">                            (<span class="number">121233</span>, &quot;4444441&quot;, &quot;House&quot;, &quot;男&quot;, <span class="number">54</span>, &quot;1115&quot;, &quot;2009-1-2&quot;);</span><br></pre></td></tr></table></figure>
<p>添加成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日14时43分09秒-image-20240827144309045.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p><strong>注意事项</strong></p>
<blockquote>
<ul>
<li>字段顺序与值的顺序：插入数据时，指定的字段顺序需要与值的顺序是一一对应的。</li>
<li>字符串和日期型数据：应该<strong>包含在引号</strong>中。</li>
<li>插入的数据大小：应该在字段的规定范围内。</li>
</ul>
</blockquote>
<h3 id="修改数据">修改数据</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span>，字段名<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span>，... [<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong></p>
<ul>
<li>修改语句的条件可以有，也可以没有。</li>
<li>如果没有条件，则会修改整张表的所有数据。</li>
</ul>
</blockquote>
<p>案例：修改<code>wufan</code>数据库中的<code>employee</code>表中<code>id</code>为5的数据，将<code>name</code>修改为<code>Jack</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> name <span class="operator">=</span> &quot;Jack&quot;  <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<p>修改成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日14时57分19秒-image-20240827145719181.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>案例：修改<code>wufan</code>数据库中的<code>employee</code>表中<code>id</code>为<code>123</code>的数据，将<code>name</code>修改为<code>KIKI</code>，<code>gender</code>修改为<code>女</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> name <span class="operator">=</span> &quot;KIKI&quot;, gender <span class="operator">=</span> &quot;女&quot;  <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">123</span>;</span><br></pre></td></tr></table></figure>
<p>修改成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日15时00分07秒-image-20240827150007555.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>案例：修改<code>wufan</code>数据库中的<code>employee</code>表，将所有的员工入职日期修改为<code>2008-01-01</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> entry_data <span class="operator">=</span> &quot;2008-01-01&quot;;</span><br></pre></td></tr></table></figure>
<p>执行语句后DataGrip会提示此操作会更新整张表，点击执行</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日15时06分18秒-image-20240827150618303.png"  width="100%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>修改成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日15时03分41秒-image-20240827150340852.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="删除数据">删除数据</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> 条件];</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong></p>
<blockquote>
<p><code>DELETE</code>
语句可以带有条件，也可以不带条件，如果没有指定条件，将删除整张表的所有数据。</p>
<p><code>DELETE</code>
语句不能用于删除某个字段的值，若要删除或更新字段的值，应使用
<code>UPDATE</code> 语句。</p>
<p>案例：清除<code>wufan</code>数据库中的<code>employee</code>表中<code>id</code>为<code>123</code>的<code>name</code>字段的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> employee <span class="keyword">SET</span> name <span class="operator">=</span> <span class="keyword">null</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">123</span>;</span><br></pre></td></tr></table></figure>
<p>删除成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日15时12分57秒-image-20240827151257761.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
</blockquote>
<p>案例：删除<code>wufan</code>数据库中的<code>employee</code>表中<code>gender</code>为女的员工</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> gender <span class="operator">=</span> &quot;女&quot;;</span><br></pre></td></tr></table></figure>
<p>删除成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日15时15分31秒-image-20240827151531084.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>案例：删除<code>wufan</code>数据库中的<code>employee</code>表中所有员工</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> employee;</span><br></pre></td></tr></table></figure>
<p>执行语句后由警告提示，点击执行</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日15时16分44秒-image-20240827151643871.png"  width="85%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>删除成功</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日15时17分16秒-image-20240827151716586.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h2 id="data-query-language-dql">★ Data Query Language (DQL)</h2>
<p>DQL英文全称是Data Query
Language(数据查询语言)，数据查询语言，用来查询数据库中表的记录。</p>
<p>创建一个名为<code>emp</code>的表格以供练习</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</span><br><span class="line">    id <span class="type">INT</span> COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    workno <span class="type">VARCHAR</span>(<span class="number">10</span>) COMMENT <span class="string">&#x27;工号&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">10</span>) COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    gender <span class="type">CHAR</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">    age TINYINT UNSIGNED COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    idcard <span class="type">CHAR</span>(<span class="number">18</span>) COMMENT <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line">    workaddress <span class="type">VARCHAR</span>(<span class="number">50</span>) COMMENT <span class="string">&#x27;工作地址&#x27;</span>,</span><br><span class="line">    entrydate <span class="type">DATE</span> COMMENT <span class="string">&#x27;入职时间&#x27;</span></span><br><span class="line">) COMMENT <span class="string">&#x27;员工表&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp(id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;柳岩&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;123456789012345678&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;123456789012345670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2005-09-01&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;123456789712345670&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2005-08-01&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;赵敏&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;123456757123845670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2009-12-01&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;小昭&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;123456769012345678&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2007-07-01&#x27;</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;杨逍&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;12345678931234567X&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2006-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">7</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;范瑶&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">40</span>, <span class="string">&#x27;123456789212345670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2005-05-01&#x27;</span>),</span><br><span class="line">(<span class="number">8</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;黛绮丝&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;123456157123645670&#x27;</span>, <span class="string">&#x27;天津&#x27;</span>, <span class="string">&#x27;2015-05-01&#x27;</span>),</span><br><span class="line">(<span class="number">9</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;范凉凉&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">45</span>, <span class="string">&#x27;123156789012345678&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2010-04-01&#x27;</span>),</span><br><span class="line">(<span class="number">10</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;陈友谅&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">53</span>, <span class="string">&#x27;123456789012345670&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2011-01-01&#x27;</span>),</span><br><span class="line">(<span class="number">11</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;张士诚&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">55</span>, <span class="string">&#x27;123567897123465670&#x27;</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;2015-05-01&#x27;</span>),</span><br><span class="line">(<span class="number">12</span>, <span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;常遇春&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;123446757152345670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2004-02-01&#x27;</span>),</span><br><span class="line">(<span class="number">13</span>, <span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;张三丰&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">88</span>, <span class="string">&#x27;123656789012345678&#x27;</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;2020-11-01&#x27;</span>),</span><br><span class="line">(<span class="number">14</span>, <span class="string">&#x27;14&#x27;</span>, <span class="string">&#x27;灭绝&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">65</span>, <span class="string">&#x27;123456719012345670&#x27;</span>, <span class="string">&#x27;西安&#x27;</span>, <span class="string">&#x27;2019-05-01&#x27;</span>),</span><br><span class="line">(<span class="number">15</span>, <span class="string">&#x27;15&#x27;</span>, <span class="string">&#x27;胡青牛&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">70</span>, <span class="string">&#x27;12345674971234567X&#x27;</span>, <span class="string">&#x27;西安&#x27;</span>, <span class="string">&#x27;2018-04-01&#x27;</span>),</span><br><span class="line">(<span class="number">16</span>, <span class="string">&#x27;16&#x27;</span>, <span class="string">&#x27;周芷若&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2012-06-01&#x27;</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时05分33秒-image-20240827160533536.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="基本查询">基本查询</h3>
<h4 id="查询多个字段">查询多个字段</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>, 字段<span class="number">2</span>, 字段<span class="number">3.</span>.. <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>
<p>案例：查询指定字段<code>name</code>,
<code>workno</code>,<code>age</code> 返回。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, workno, age <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时08分32秒-image-20240827160832424.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h4 id="查询全部字段">查询全部字段</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>
<p>案例：查询所有字段返回。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时09分53秒-image-20240827160953433.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>注意在实际开发中一般不会写通配符<code>*</code>，因为不是很直观，要把字段全部写上去。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, workno, name, gender, age, idcard, workaddress, entrydate <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>
</blockquote>
<h4 id="为字段设置别名">为字段设置别名</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [<span class="keyword">AS</span> 别名<span class="number">1</span>], 字段<span class="number">2</span> [<span class="keyword">AS</span> 别名<span class="number">2</span>]... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>
<p>案例：查询指定字段<code>name</code>,
<code>workno</code>,<code>age</code>，设置别名返回。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">as</span> nickname, workno <span class="keyword">as</span> num, age <span class="keyword">as</span> <span class="keyword">old</span> <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时11分24秒-image-20240827161124756.png"  width="65%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>其中<code>AS</code>也是可以省略的</p>
<p>案例：查询所有员工的工作地址，并起别名。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> workaddress &quot;工作地址&quot; <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时19分54秒-image-20240827161953838.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
</blockquote>
<h4 id="去除重复记录">去除重复记录</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>
<p>案例：查询公司员工的上班地址（不要重复）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> workaddress <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时17分31秒-image-20240827161731607.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="条件查询">条件查询</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表;</span><br></pre></td></tr></table></figure>
<h4 id="比较运算符">比较运算符</h4>
<table>
<colgroup>
<col style="width: 30%" />
<col style="width: 69%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">比较运算符</th>
<th style="text-align: center;">功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>&gt;</code></td>
<td style="text-align: center;">大于</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&gt;=</code></td>
<td style="text-align: center;">大于等于</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>&lt;</code></td>
<td style="text-align: center;">小于</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;=</code></td>
<td style="text-align: center;">小于等于</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>=</code></td>
<td style="text-align: center;">等于</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>&lt;&gt;</code> 或
<code>!=</code></td>
<td style="text-align: center;">不等于</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>BETWEEN... AND...</code></td>
<td style="text-align: center;">在某个范围之内(含最小、最大值)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>IN(...)</code></td>
<td style="text-align: center;">在in之后的列表中的值,多选一</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>LIKE</code> 占位符</td>
<td
style="text-align: center;">模糊匹配(<code>_</code>匹配单个字符,<code>%</code>匹配任意个字符)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>IS NULL</code></td>
<td style="text-align: center;">是NULL</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>IS NOT NULL</code></td>
<td style="text-align: center;">不是NULL</td>
</tr>
</tbody>
</table>
<h4 id="逻辑运算符">逻辑运算符</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">逻辑运算符</th>
<th style="text-align: center;">功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>AND</code> 或
<code>&amp;&amp;</code></td>
<td style="text-align: center;">并且(多个条件同时成立)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>OR</code> 或 <code>||</code></td>
<td style="text-align: center;">或者(多个条件任意一个成立)</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>NOT</code> 或 <code>!</code></td>
<td style="text-align: center;">非,不是</td>
</tr>
</tbody>
</table>
<h4 id="条件查询案例">条件查询案例</h4>
<p>在<code>emp</code>表中查询以下信息：</p>
<ul>
<li>查询年龄等于88的员工</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, workno, name, gender, age, idcard, workaddress, entrydate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">88</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时30分36秒-image-20240827163036543.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询年龄小于20的员工信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, workno, name, gender, age, idcard, workaddress, entrydate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">&lt;</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时31分48秒-image-20240827163148682.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询年龄小于等于20的员工信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, workno, name, gender, age, idcard, workaddress, entrydate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">&lt;=</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时32分47秒-image-20240827163247629.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询没有身份证号的员工信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, workno, name, gender, age, idcard, workaddress, entrydate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> idcard <span class="keyword">is</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时34分19秒-image-20240827163419127.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询有身份证号的员工信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, workno, name, gender, age, idcard, workaddress, entrydate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> idcard <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时35分47秒-image-20240827163547290.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询年龄不等于88的员工信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, workno, name, gender, age, idcard, workaddress, entrydate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="operator">!=</span> <span class="number">88</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时38分01秒-image-20240827163801322.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询年龄在15岁(包含)到20岁(包含)之间的员工信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, workno, name, gender, age, idcard, workaddress, entrydate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">15</span> <span class="keyword">AND</span> <span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时39分07秒-image-20240827163907697.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询性别为女且年龄小于25岁的员工信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, workno, name, gender, age, idcard, workaddress, entrydate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> gender <span class="operator">=</span> &quot;女&quot; <span class="keyword">AND</span> age <span class="operator">&lt;</span> <span class="number">25</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时40分46秒-image-20240827164046381.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询年龄等于18或20或40的员工信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, workno, name, gender, age, idcard, workaddress, entrydate <span class="keyword">FROM</span> emp </span><br><span class="line"><span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">18</span> <span class="keyword">OR</span> age <span class="operator">=</span> <span class="number">20</span> <span class="keyword">OR</span> age <span class="operator">=</span> <span class="number">40</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时42分40秒-image-20240827164240381.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询姓名为两个字的员工信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, workno, name, gender, age, idcard, workaddress, entrydate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> &quot;__&quot;;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时47分12秒-image-20240827164712748.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询身份证号最后一位是X的员工信息</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, workno, name, gender, age, idcard, workaddress, entrydate <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> idcard <span class="keyword">LIKE</span> &quot;%X&quot;;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日16时49分57秒-image-20240827164957248.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="聚合函数">聚合函数</h3>
<p>聚合函数可以将<strong>一列数据</strong>作为一个整体，进行<strong>纵向计算</strong>。</p>
<h4 id="常见聚合函数">常见聚合函数</h4>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">函数</th>
<th style="text-align: center;">功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">count</td>
<td style="text-align: center;">统计数量</td>
</tr>
<tr class="even">
<td style="text-align: center;">max</td>
<td style="text-align: center;">最大值</td>
</tr>
<tr class="odd">
<td style="text-align: center;">min</td>
<td style="text-align: center;">最小值</td>
</tr>
<tr class="even">
<td style="text-align: center;">avg</td>
<td style="text-align: center;">平均值</td>
</tr>
<tr class="odd">
<td style="text-align: center;">sum</td>
<td style="text-align: center;">求和</td>
</tr>
</tbody>
</table>
<h4 id="聚合函数语法">聚合函数语法</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 聚合函数(字段列表) <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure>
<h4 id="聚合函数案例">聚合函数案例</h4>
<p>在<code>emp</code>表中通过聚合函数查询以下信息：</p>
<ul>
<li>统计该企业员工数量</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日17时08分35秒-image-20240827170835373.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p><code>null</code>值不参与聚合函数的运算！</p>
<p>这里如果计算<code>idcard</code>字段的数据个数那么就会出现错误</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(idcard) <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日17时13分55秒-image-20240827171355175.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>因为在<code>idcard</code>字段的数据中由有一个为空。</p>
</blockquote>
<ul>
<li>统计该企业员工的平均年龄</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">avg</span>(age) <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日17时09分53秒-image-20240827170953158.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>统计该企业员工的最大年龄</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">max</span>(age) <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日17时10分49秒-image-20240827171049302.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>统计该企业员工的最小年龄</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">min</span>(age) <span class="keyword">FROM</span> emp;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日17时11分37秒-image-20240827171137514.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>统计西安地区员工的年龄之和</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(age) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> workaddress <span class="operator">=</span> <span class="string">&#x27;西安&#x27;</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月27日17时19分23秒-image-20240827171923304.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="窗口函数">窗口函数</h3>
<p>窗口函数，也叫OLAP函数（Online Anallytical
Processing，联机分析处理），可以对数据库数据进行进行复杂分析。</p>
<h4 id="窗口函数语法">窗口函数语法</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">窗口函数([参数]) OVER (</span><br><span class="line">  [PARTITION BY &lt;分组列&gt;] </span><br><span class="line">  [ORDER BY &lt;排序列 ASC/DESC&gt;]</span><br><span class="line">  [ROWS BETWEEN 开始行 AND 结束行]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><窗口函数>的位置，可以放以下两种函数：</p>
<ul>
<li>专用窗口函数：rank， dense_rank, row_number等专用窗口函数。</li>
<li>聚合函数，如sum. avg, count, max, min等</li>
</ul>
<p>为什么叫“窗口”函数呢？这是因为over()后结果称为“窗口”，表示“范围”的意思，然后通过窗口函数对窗口中的内容的<strong>每一行</strong>进行操作。</p>
<h4 id="partition-by">PARTITION BY</h4>
<p><code>partition by 字段</code>用来对表根据字段分组</p>
<p>创建下面的班级表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> class_table (</span><br><span class="line">    student_id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    class_id <span class="type">INT</span>,</span><br><span class="line">    score <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> class_table (student_id, class_id, score) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">1</span>, <span class="number">86</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="number">1</span>, <span class="number">95</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>, <span class="number">89</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="number">1</span>, <span class="number">83</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="number">2</span>, <span class="number">86</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="number">3</span>, <span class="number">92</span>),</span><br><span class="line">(<span class="number">7</span>, <span class="number">3</span>, <span class="number">86</span>),</span><br><span class="line">(<span class="number">8</span>, <span class="number">1</span>, <span class="number">88</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250314154932764-4268a2.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>现在我需要根据班级分类，对每个班同学的分数进行排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>, <span class="built_in">rank</span>() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> class_id <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) 班级排名 <span class="keyword">from</span> class_table</span><br></pre></td></tr></table></figure>
<p>上面的语句就是说：<code>partition by</code>依照<code>class_id</code>将表中的所有数据分为几类；再分别将这几类分别按照分数降序进行展示，最后<code>rank()</code>函数将按照<code>score</code>对每一组类的分数进行排名，展示再结果中；</p>
<h5 id="partition-by-与order-by的区别">PARTITION BY 与ORDER
BY的区别</h5>
<ul>
<li>PARTITION BY 可以对表按照字段进行分组而不减少表中的数据行数</li>
<li>ORDER BY对表中的数据进行去重，会减少数据的行数</li>
</ul>
<h4 id="排序函数">排序函数</h4>
<p>排序函数有以下几种，可以通过<code>sql</code>观察他们的效果</p>
<table>
<colgroup>
<col style="width: 14%" />
<col style="width: 11%" />
<col style="width: 74%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">函数名</th>
<th style="text-align: center;">分类</th>
<th style="text-align: center;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">RANK</td>
<td style="text-align: center;">排序函数</td>
<td
style="text-align: center;">类似于排名，并列的结果序号可以重复，序号不连续</td>
</tr>
<tr class="even">
<td style="text-align: center;">DENSE_RANK</td>
<td style="text-align: center;">排序函数</td>
<td
style="text-align: center;">类似于排名，并列的结果序号可以重复，序号连续</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ROW_NUMBER</td>
<td style="text-align: center;">排序函数</td>
<td
style="text-align: center;">对该分组下的所有结果作一个排序，基于该分组给一个行数</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>, <span class="built_in">rank</span>()  <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) <span class="string">&#x27;rank&#x27;</span>,</span><br><span class="line">       <span class="built_in">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) <span class="string">&#x27;dense_rank&#x27;</span>,</span><br><span class="line">       <span class="built_in">row_number</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>)<span class="string">&#x27;row_number&#x27;</span> <span class="keyword">from</span> class_table</span><br></pre></td></tr></table></figure>
<p>不按照班级分组，将分数直接降序排列，由三个窗口函数进行排序，观察结果</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250314161612946-035b23.png"  width="95%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li><code>rank</code>的特点就是相同的分数排名相同，而且占用排名位；</li>
<li><code>dense_rank</code>的特点是相同分数排名相同，但是不占用排名位；</li>
<li><code>row_number</code>的特点是分数相同，排名按照排序递增，排序规则也符合这个函数名字，也就是按照行数从上往下增加；</li>
</ul>
<h4 id="聚合函数作为窗口函数">聚合函数作为窗口函数</h4>
<p>窗口函数的特点就是可以对每一行的数据进行操作，将<a
href="#聚合函数">聚合函数</a>当作窗口函数使用即可以更加灵活的统计数据；</p>
<p>要注意聚合函数作为窗口函数，他们的功能是依次作用在<strong>每一条</strong>数据中的，要观察最后的统计结果只需观察<code>PARTITION BY</code>分组后，每组的最后一条数据中的聚合函数字段即可；</p>
<h5 id="案例-1">案例</h5>
<p>按照班级分类统计全班的：人数，分数最大值，分数最小值，分数平均值，分数总和；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> ,<span class="built_in">COUNT</span>(score) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;COUNT&#x27;</span>,</span><br><span class="line">            <span class="built_in">MAX</span>(score) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;MAX&#x27;</span>,</span><br><span class="line">            <span class="built_in">MIN</span>(score) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;MIN&#x27;</span>,</span><br><span class="line">             <span class="built_in">AVG</span>(score) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;AVG&#x27;</span>,</span><br><span class="line">       <span class="built_in">SUM</span>(score) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;SUM&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> class_table;</span><br></pre></td></tr></table></figure>
<p>结果为：</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250314164123549-5a199a.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>可以看到，<code>PARTITION BY</code>按照<code>class_id</code>将数据分类，又按照成绩降序排列；几个聚合函数在每一行数据的作用范围都是不同的；比如<code>MAX()</code>函数在班级为1的图中的第一行数据，统计的就是当前行的分数最大值，第二行的<code>MAX()</code>函数显示的是第一行和第二行分数中的最大值，一直到第四行，也就是1班的最后一个学生，统计的是1班所有学生分数的最大值；其他的聚合函数也是同理。</p>
<h4 id="专用窗口函数">专用窗口函数</h4>
<table>
<colgroup>
<col style="width: 13%" />
<col style="width: 26%" />
<col style="width: 59%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">函数名</th>
<th style="text-align: center;">参数</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">cume_dist()</td>
<td style="text-align: center;">否</td>
<td
style="text-align: center;">累计分布值。即分组值小于等于当前值的行数与分组总行数的比值。取值范围为(0,1]。</td>
</tr>
<tr class="even">
<td style="text-align: center;">first_value()</td>
<td style="text-align: center;">是；first_value(expr)</td>
<td style="text-align: center;">返回分组内截止当前行的第一个值。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">lag()</td>
<td style="text-align: center;">是,lag(expr,[N],<a
href="#default">default</a>)</td>
<td
style="text-align: center;">从当前行开始往前取第N行，如果N缺失默认为1。若没有则默认返回default，default默认值为NULL</td>
</tr>
<tr class="even">
<td style="text-align: center;">last_value()</td>
<td style="text-align: center;">是,last_value(expr)</td>
<td style="text-align: center;">返回分组内截止当前行的最后一个值。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">lead()</td>
<td style="text-align: center;">是,lead(expr,[N],<a
href="#default">default</a>)</td>
<td
style="text-align: center;">从当前行开始往后取第N行。函数功能与lag()相反，其余与lag()相同。</td>
</tr>
<tr class="even">
<td style="text-align: center;">nth_value()</td>
<td style="text-align: center;">是,nth_value(expr,N)</td>
<td
style="text-align: center;">返回分组内截止当前行的第N行。first_value、last_value、nth_value函数功能相似，只是返回分组内截止当前行的不同行号的数据。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ntile()</td>
<td style="text-align: center;">是,ntile(N)</td>
<td
style="text-align: center;">返回当前行在分组内的分桶号。在计算时要先将改分组内的所有数据划分成N个桶，之后返回每个记录所在的分桶号。返回范围从1到N</td>
</tr>
<tr class="even">
<td style="text-align: center;">percent_rank()</td>
<td style="text-align: center;">否</td>
<td
style="text-align: center;">累计百分比。该函数的计算结果为：小于该条记录值的所有记录的行数/该分组的总行数-1.所以改记录的返回值为[0,1]</td>
</tr>
</tbody>
</table>
<p>因为窗口函数是对where或者group
by子句处理后的结果进行操作，所以<strong>窗口函数原则上只能写在select子句中</strong>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> class_id,score ,<span class="built_in">cume_dist</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;cume_dist&#x27;</span>,</span><br><span class="line">            <span class="built_in">first_value</span>(score) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;first_value&#x27;</span>,</span><br><span class="line">             <span class="built_in">last_value</span>(score) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;last_value&#x27;</span>,</span><br><span class="line">            <span class="built_in">lag</span>(score,<span class="number">1</span>,<span class="string">&#x27;前1个数据无记录&#x27;</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;lag&#x27;</span>,</span><br><span class="line">            <span class="built_in">lead</span>(score,<span class="number">1</span>,<span class="string">&#x27;后1个数据无记录&#x27;</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;lead&#x27;</span>,</span><br><span class="line">       <span class="built_in">nth_value</span>(score,<span class="number">2</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;nth_value&#x27;</span>,</span><br><span class="line">       <span class="built_in">ntile</span>(<span class="number">2</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;ntile()&#x27;</span>,</span><br><span class="line">        <span class="built_in">percent_rank</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;percent_rank&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> class_table;</span><br></pre></td></tr></table></figure>
<p>结果为：</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250314171958872-c98f08.png"  width="105%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h5 id="cume_dist">cume_dist()</h5>
<p>返回的是每个分组的累积百分比</p>
<h5 id="first_value">first_value</h5>
<p>返回分组内截止当前行的第一个值</p>
<h5 id="last_value">last_value</h5>
<p>返回分组内截止当前行的最后一个值</p>
<h5 id="lagexprndefault">lag(expr,[N],<a
href="#default">default</a>)</h5>
<p><code>lag</code>表示延后，指的是延后显示之前行的某个数据；<code>expr</code>为表中的字段；<code>N</code>为当前行之前第<code>N</code>个数据，默认为<code>1</code>；<code>default</code>为查询不到数据返回的值，默认为<code>NULL</code>；</p>
<p>图中表示的是显示在该分组内，当前行前一行的成绩的数据，若没有则返回<code>'前1个数据无记录'</code></p>
<h5 id="leadexprndefault">lead(expr,[N],<a
href="#default">default</a>)</h5>
<p><code>lead</code>表示提前，指的是提前显示之后行的某个数据；<code>expr</code>为表中的字段；<code>N</code>为当前行之前第<code>N</code>个数据，默认为<code>1</code>；<code>default</code>为查询不到数据返回的值，默认为<code>NULL</code>；</p>
<p>图中表示的是显示在该分组内，当前行后一行的成绩的数据，若没有则返回<code>'后1个数据无记录'</code></p>
<h5 id="nth_valueexprn">nth_value(expr,N)</h5>
<p>返回分组内，<code>expr</code>字段的截至当前行的第<code>N</code>行的数据，<code>first_value</code>与<code>last_value</code>是它的特例；图中返回的是每组第二个数据，若没有则返回<code>NULL</code></p>
<h5 id="ntilen">ntile(N)</h5>
<p>将分组内的数据分为<code>N</code>个桶,尽量<code>N</code>等分数据，若数据条数不能整除<code>N</code>，那么将默认增加第一个桶的数据数量；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> class_id,score ,<span class="built_in">ntile</span>(<span class="number">3</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> class_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;ntile()&#x27;</span> <span class="keyword">FROM</span> class_table;</span><br></pre></td></tr></table></figure>
<p>若将分桶数量定为3，班级id为1的共有4行数据，无法整除3，那么就会自动增加1个数据到第一个分组（桶），如图所示</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250314173723089-9a88a9.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h5 id="percent_rank">percent_rank()</h5>
<p>返回数据的行在本组中的百分位排名；它的计算公式为 <span
class="math inline">\((rank - 1) / (total\_rows - 1)\)</span>，其中
<em>rank</em> 是当前行的排序位置，<em>total_rows</em>
是总行数;公式中的rank为相同的分数排名相同，而且占用排名位，与rank函数相同；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> class_id,score ,<span class="built_in">percent_rank</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>) <span class="string">&#x27;ntile()&#x27;</span> <span class="keyword">FROM</span> class_table;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250314174800599-356c75.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="分组查询">分组查询</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span>条件] <span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组字段名 [<span class="keyword">HAVING</span>分组后过滤条件];</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>where</code>与<code>having</code>的区别</p>
<p>执行时机不同:<code>where</code>是分组之前进行过滤，不满足<code>where</code>条件，不参与分组;而<code>having</code>是分组之后对结果进行过滤。</p>
<p>判断条件不同:<code>where</code>不能对聚合函数进行判断，而<code>having</code>可以。</p>
</blockquote>
<h4 id="分组查询案例">分组查询案例</h4>
<p>在<code>emp</code>表中通过分组查询以下信息：</p>
<ul>
<li>根据性别分组,统计男性员工和女性员工的数量</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure>
<p>首先使用<code>count</code>纵向数有多少个数据（选取纵向数据最多的个数），然后再将这些数据按<code>gender</code>中的类别进行分类</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日10时02分52秒-image-20240829100245412.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>但是从图中不能看出男女的员工数量，改进代码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> gender, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure>
<p>首先选出两列：<code>gender</code>和<code>count</code>，再将<code>gender</code>和<code>count</code>按照<code>gender</code>的类别分组</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日10时05分46秒-image-20240829100546348.png"  width="45%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>根据性别分组,统计男性员工和女性员工的平均年龄</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> gender, <span class="built_in">avg</span>(age) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日10时07分38秒-image-20240829100738582.png"  width="45%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询年龄小于45的员工,并根据工作地址分组，获取员工数量大于等于3的工作地址</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> workaddress, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">group</span> <span class="keyword">by</span> workaddress;</span><br></pre></td></tr></table></figure>
<p>首先满足<code>age &lt; 45</code>的员工的作地址和人数，
再将人数按照工作地址进行划分</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日10时17分11秒-image-20240829101711484.png"  width="45%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>再将划分过后的数据在进行筛选，满足的条件是<strong>工作地址的员工数量大于等于3</strong>，使用<code>having</code>进行分组后的过滤</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> workaddress, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">group</span> <span class="keyword">by</span> workaddress <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日10时18分41秒-image-20240829101841811.png"  width="45%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>还可以设置别名让结果更易读</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> workaddress 工作地址, <span class="built_in">count</span>(<span class="operator">*</span>) 员工人数 <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">45</span> <span class="keyword">group</span> <span class="keyword">by</span> workaddress <span class="keyword">having</span> 员工人数 <span class="operator">&gt;=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日10时22分04秒-image-20240829102204387.png"  width="45%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>注意</p>
<p>执行顺序:<code>where</code>&gt;聚合函数&gt;<code>having</code>。</p>
<p>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。也就是说只有在<code>select</code>之后的字段或者聚合函数，才能进行<code>group by</code>，因为只有从表中选出字段，才能对这些字段进行分组。</p>
</blockquote>
<h3 id="排序查询">排序查询</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 字段<span class="number">1</span> 排序方式<span class="number">1</span>, 字段<span class="number">2</span> 排序方式<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>排序方式</strong> <code>ASC</code>: 升序(默认值)
<code>DESC</code>: 降序 <strong>注意:
如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序。</strong></p>
</blockquote>
<h4 id="排序查询案例">排序查询案例</h4>
<p>在<code>emp</code>表中通过排序查询，查询以下信息：</p>
<ul>
<li>根据年龄对公司的员工进行升序排序</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age;</span><br></pre></td></tr></table></figure>
<p><code>order by age</code>默认为升序排列</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日10时55分33秒-image-20240829105533379.png"  width="65%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>根据入职时间，对员工进行降序排序</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> entrydate <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日10时57分08秒-image-20240829105707944.png"  width="65%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>根据年龄对公司的员工进行升序排序，年龄相同，再按照入职时间进行降序排序</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> age, entrydate <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日11时03分01秒-image-20240829110301559.png"  width="65%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>图中看出年龄升序排列，若年龄相等，则按照入职时间降序排列。</p>
<h3 id="分页查询">分页查询</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 LIMIT 起始索引, 查询记录数;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意</p>
<ul>
<li><p>起始索引从 0 开始，起始索引 = (查询页码 - 1) *
每页显示记录数。</p></li>
<li><p>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。</p></li>
<li><p>如果查询的是第一页数据，起始索引可以省略，直接简写为limit
10。</p></li>
</ul>
</blockquote>
<h4 id="分页查询案例">分页查询案例</h4>
<p>在<code>emp</code>表中通过分页查询，查询以下信息：</p>
<ul>
<li>查询第1页员工数据，每页展示10条记录</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">0</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日11时12分11秒-image-20240829111211642.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询第2页员工数据，每页展示10条记录</li>
</ul>
<p>计算起始索引：<code>起始索引</code>= <code>(查询页码 - 1)</code> *
<code>每页显示记录数</code>。计算起始索引=10。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> emp limit <span class="number">10</span>, <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日11时14分02秒-image-20240829111402551.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="dql语句案例">DQL语句案例</h3>
<p>在<code>emp</code>表中通过DQL语句，查询以下信息：</p>
<ul>
<li>查询年龄为20,21,22,23岁的员工信息。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">=</span> <span class="number">20</span> <span class="keyword">or</span> age <span class="operator">=</span><span class="number">21</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">22</span> <span class="keyword">or</span> age <span class="operator">=</span> <span class="number">23</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日11时19分19秒-image-20240829111919354.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询性别为男，并且年龄在20-40岁(含)以内的姓名为三个字的员工。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">20</span> <span class="keyword">and</span> <span class="number">40</span> <span class="keyword">and</span> name <span class="keyword">like</span> &quot;___&quot;;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日11时24分15秒-image-20240829112415616.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>统计员工表中，年龄小于60岁的，男性员工和女性员工的人数。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> gender, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">60</span> <span class="keyword">group</span> <span class="keyword">by</span> gender;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日11时27分21秒-image-20240829112721476.png"  width="65%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询所有年龄小于等于35岁员工的姓名和年龄，并对查询结果按年龄升序排序，如果年龄相同按入职时间降序排序。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name, age <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&lt;</span> <span class="number">35</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> age, entrydate <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日11时30分20秒-image-20240829113020688.png"  width="45%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询性别为男，且年龄在20-40岁(含)以内的前5个员工信息，对查询的结果按年龄升序排序，年龄相同按入职时间升序排序。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">40</span> <span class="keyword">and</span> gender <span class="operator">=</span> &quot;男&quot; <span class="keyword">ORDER</span> <span class="keyword">BY</span> age, entrydate LIMIT <span class="number">0</span>, <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月29日11时36分17秒-image-20240829113617065.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="dql的执行顺序">DQL的执行顺序</h3>
<p>DQL的规范编写顺序为：</p>
<pre class="mermaid">flowchart LR
    A["SELECT
    字段列表"] -->B["FROM
    表名列表"] -->C["WHERE
    条件列表"] --> D["GROUP BY
    分组字段列表"] --> E["HAVING
    分组后的条件列表"] --> F["ORDER BY
    排序字段列表"] --> G["LIMIT
    分页参数"]</pre>
<p>DQL语句的执行顺序为：</p>
<pre class="mermaid">flowchart LR
A["FROM
表名列表"] --> B["WHERE
    条件列表"] --> C["GROUP BY
    分组字段列表"] --> D["HAVING
    分组后的条件列表"] --> E["SELECT
    字段列表"] --> F["ORDER BY
    排序字段列表"] --> G["LIMIT
    分页参数"]</pre>
<h2 id="data-control-languagedcl">Data Control Language(DCL)</h2>
<p>DCL全称为Data Control
Language，是用来管理数据库用户、控制数据库访问权限。</p>
<h3 id="用户管理">用户管理</h3>
<h4 id="查询用户">查询用户</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<p>在系统的mysql数据库中有一张用户表，上面有主机名和用户的信息</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311135706850-a26b19.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h4 id="创建用户">创建用户</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>创建用户吴凡，只能够在当前主机localhost访问，密码123456;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;wufan&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311140012903-453cf6.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>可以看到wufan这个用户无权限（右边全是N）</p>
<p>使用命令行登录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u wufan -p</span><br><span class="line">123456</span><br></pre></td></tr></table></figure>
<p>查看数据库，发现这个用户只能查看到两个数据库，说明用户没有权限。</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311140327201-8022bc.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>创建用户wufan2，可以在任意主机访问该数据库，密码123456 ;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;wufan&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>使用<strong>百分号</strong>代替主机名即代表任意主机</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311140630084-53c9d5.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h4 id="修改用户密码">修改用户密码</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>修改用户wufan的访问密码为 1234 ;</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;wufan&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;1234&#x27;</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311140941372-e14941.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>使用命令行验证，修改成功</p>
<h4 id="删除用户">删除用户</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>删除吴凡@localhost用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;wufan&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311141204789-0bcd75.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>删除成功</p>
<h3 id="权限控制">权限控制</h3>
<table>
<thead>
<tr class="header">
<th>权限</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ALL, ALL PRIVILEGES</td>
<td>所有权限</td>
</tr>
<tr class="even">
<td>SELECT</td>
<td>查询数据</td>
</tr>
<tr class="odd">
<td>INSERT</td>
<td>插入数据</td>
</tr>
<tr class="even">
<td>UPDATE</td>
<td>修改数据</td>
</tr>
<tr class="odd">
<td>DELETE</td>
<td>删除数据</td>
</tr>
<tr class="even">
<td>ALTER</td>
<td>修改表</td>
</tr>
<tr class="odd">
<td>DROP</td>
<td>删除数据库/表/视图</td>
</tr>
<tr class="even">
<td>CREATE</td>
<td>创建数据库/表</td>
</tr>
</tbody>
</table>
<h4 id="查询权限">查询权限</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;wufan1&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311143054818-fe5700.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>结果如下，表示仅仅能够连接sql，无其他权限</p>
<h4 id="授予权限">授予权限</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">TO</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>授予wufan1@%有关wufan数据库的所有权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span>  <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> wufan.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;wufan1&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311143439781-f78d47.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>可以看到用户wufan1已经有了对wufan数据库的所有权限</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311143643958-a6e337.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>使用cmd登录wufan1，可以看到wufan数据库。</p>
<h4 id="撤销权限">撤销权限</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> 权限列表 <span class="keyword">ON</span> 数据库名.表名 <span class="keyword">FROM</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>撤销wufan1@%有关wufan数据库的所有权限</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> wufan.<span class="operator">*</span> <span class="keyword">from</span> <span class="string">&#x27;wufan1&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311143855105-6418d1.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>撤销之后发现只有连接权限了，cmd登录进行验证</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311143948513-a36f2a.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>发现权限已经消失</p>
<p><strong>注意：</strong></p>
<ul>
<li><p>多个权限之间，使用逗号分隔</p></li>
<li><p>授权时，数据库名和表名可以使用 * 进行通配，代表所有。</p></li>
<li><blockquote>
<p>比如要给一个用户所有数据库的所有权限：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span>  <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> 用户;</span><br></pre></td></tr></table></figure>
</blockquote></li>
</ul>
<h1 id="函数">函数</h1>
<p>函数是指一段可以直接被另一段程序调用的程序或代码。、</p>
<h2 id="字符串函数">字符串函数</h2>
<table>
<colgroup>
<col style="width: 29%" />
<col style="width: 70%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">函数</th>
<th style="text-align: left;">功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">CONCAT(S1,S2,...Sn)</td>
<td style="text-align: left;">字符串拼接，将S1，S2，...
Sn拼接成一个字符串</td>
</tr>
<tr class="even">
<td style="text-align: left;">LOWER(str)</td>
<td style="text-align: left;">将字符串str全部转为小写</td>
</tr>
<tr class="odd">
<td style="text-align: left;">UPPER(str)</td>
<td style="text-align: left;">将字符串str全部转为大写</td>
</tr>
<tr class="even">
<td style="text-align: left;">LPAD(str,n,pad)</td>
<td
style="text-align: left;">左填充，用字符串pad对str的左边进行填充，达到n个字符串长度</td>
</tr>
<tr class="odd">
<td style="text-align: left;">RPAD(str,n,pad)</td>
<td
style="text-align: left;">右填充，用字符串pad对str的右边进行填充，达到n个字符串长度</td>
</tr>
<tr class="even">
<td style="text-align: left;">TRIM(str)</td>
<td style="text-align: left;">去掉字符串头部和尾部的空格</td>
</tr>
<tr class="odd">
<td style="text-align: left;">SUBSTRING(str,start,len)</td>
<td
style="text-align: left;">返回从字符串str从start位置起的len个长度的字符串</td>
</tr>
</tbody>
</table>
<h3 id="concats1s2...sn">CONCAT(S1,S2,...Sn)</h3>
<p>连接</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> concat(<span class="string">&#x27;hello&#x27;</span>,<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;fuck you&#x27;</span>)</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311145112777-c785aa.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="lowerstrupperstr">LOWER(str)&amp;UPPER(str)</h3>
<p>转换为小写、大写</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">lower</span>(<span class="string">&#x27;QDWEDF&#x27;</span>),<span class="built_in">upper</span>(<span class="string">&#x27;abcdefg&#x27;</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311145346649-c7a47a.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="lpadstrnpadrpadstrnpad">LPAD(str,n,pad)&amp;RPAD(str,n,pad)</h3>
<p>注意这两个函数使用的都是字符串类型，<code>pad</code>也需要是字符串类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> LPAD(<span class="string">&#x27;hello&#x27;</span>,<span class="number">9</span>,<span class="string">&#x27;-&#x27;</span>),RPAD(<span class="string">&#x27;hello&#x27;</span>,<span class="number">9</span>,<span class="string">&#x27;-&#x27;</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311145754860-dc1d0f.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>这两个函数中的<code>(str,n,pad)</code>意思是将<code>str</code>用<code>pad</code>填充至<code>n</code>个字符那么长，填充的方向为<code>str</code>的左边和右边。</p>
<p>如果<code>n&gt;len(str)</code>，则只会显示<code>str</code>的前<code>n</code>个字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> LPAD(<span class="string">&#x27;hello&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;hi&#x27;</span>),RPAD(<span class="string">&#x27;hello&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;-&#x27;</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311150230708-f13a10.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="trimstr">TRIM(str)</h3>
<p>去除头尾空格，中间的不去</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">TRIM</span>(&quot;   he he   &quot;);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311150407757-7f315e.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="substringstrstartlen">※SUBSTRING(str,start,len)</h3>
<p>去出一个字符串中的一段,<code>start</code>从<code>1</code>开始，截取<code>len</code>个字符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">SUBSTRING</span>(<span class="string">&#x27;20100908 23:55&#x27;</span>,<span class="number">1</span>,<span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311150604847-81d995.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="案例-2">案例</h3>
<p>由于业务需求变更，企业员工的工号，统一为5位数，目前不足5位数的全部在前面补0。比如：1号员工的工号应该为00001。在<code>emp</code>表中操作，按要求修改员工的工号。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> workno <span class="operator">=</span> lpad(workno,<span class="number">5</span>,<span class="string">&#x27;0&#x27;</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311151548805-658cd1.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>注意，这里workno是varchar，所以要用字符串类型'0'左填充</p>
</blockquote>
<h2 id="数值函数">数值函数</h2>
<p>常见的数值函数如下</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">函数</th>
<th style="text-align: center;">功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">CEIL(x)</td>
<td style="text-align: center;">向上取整</td>
</tr>
<tr class="even">
<td style="text-align: center;">FLOOR(x)</td>
<td style="text-align: center;">向下取整</td>
</tr>
<tr class="odd">
<td style="text-align: center;">MOD(x,y)</td>
<td style="text-align: center;">返回x/y的模</td>
</tr>
<tr class="even">
<td style="text-align: center;">RAND()</td>
<td style="text-align: center;">返回0~1内的随机数</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ROUND(x,y)</td>
<td style="text-align: center;">求参数x的四舍五入的值，保留y位小数</td>
</tr>
</tbody>
</table>
<h3 id="ceilx">CEIL(x)</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">CEIL</span>(<span class="number">4.1</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311153707066-2a6476.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="floorx">FLOOR(x)</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">FLOOR</span>(<span class="number">4.1</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311153738253-9e7523.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="modxy">MOD(x,y)</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">MOD</span>(<span class="number">8</span>,<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311153948149-95fbd5.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="rand">RAND()</h3>
<p>0~1之间取随机数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> RAND();</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311154105091-9992e7.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="roundxy">ROUND(x,y)</h3>
<p>数x进行保留小数位数y的四舍五入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> round(<span class="number">2.223</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311154307762-448376.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="案例-3">案例</h3>
<p>通过数据库的函数，生成一个六位数的验证码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> round(rand()<span class="operator">*</span><span class="number">1000000</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>然而这样做有bug，比如可能出现下列这种情况</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311154707393-fac0fb.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>是因为rand()生成了以0.0？？开头的小数，这样乘以1000000后放大、四舍五入后只是变成了五位数。</p>
<p>可以通过补位的方式满足要求</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> lpad(round(rand()<span class="operator">*</span><span class="number">1000000</span>,<span class="number">0</span>),<span class="number">6</span>,<span class="string">&#x27;0&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>这种写法通过补0的方式满足了要求</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311154934707-ee8f8a.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h2 id="日期函数">日期函数</h2>
<p>常见的日期函数</p>
<table>
<colgroup>
<col style="width: 40%" />
<col style="width: 59%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">函数</th>
<th style="text-align: center;">功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">CURDATE()</td>
<td style="text-align: center;">返回当前日期</td>
</tr>
<tr class="even">
<td style="text-align: center;">CURTIME()</td>
<td style="text-align: center;">返回当前时间</td>
</tr>
<tr class="odd">
<td style="text-align: center;">NOW()</td>
<td style="text-align: center;">返回当前日期和时间</td>
</tr>
<tr class="even">
<td style="text-align: center;">YEAR(date)</td>
<td style="text-align: center;">获取指定date的年份</td>
</tr>
<tr class="odd">
<td style="text-align: center;">MONTH(date)</td>
<td style="text-align: center;">获取指定date的月份</td>
</tr>
<tr class="even">
<td style="text-align: center;">DAY(date)</td>
<td style="text-align: center;">获取指定date的日期</td>
</tr>
<tr class="odd">
<td style="text-align: center;">DATE_ADD(date, INTERVAL expr type)</td>
<td
style="text-align: center;">返回一个日期/时间值加上一个时间间隔expr后的时间值</td>
</tr>
<tr class="even">
<td style="text-align: center;">DATEDIFF(date1, date2)</td>
<td
style="text-align: center;">返回起始时间date1和结束时间date2之间的天数</td>
</tr>
</tbody>
</table>
<h3 id="curdate">CURDATE()</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  CURDATE();</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311160043423-912d0a.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="curtime">CURTIME()</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  CURTIME() ;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311160124735-ef1896.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="now">NOW()</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  NOW() ;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311160203618-a73513.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="yearmonthday">YEAR()&amp;MONTH()&amp;DAY()</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="keyword">YEAR</span>(NOW()), <span class="keyword">MONTH</span>(NOW()),<span class="keyword">DAY</span>(NOW()) ;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311160347758-1df57b.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="date_adddate-interval-expr-type">DATE_ADD(date, INTERVAL expr
type)</h3>
<p>返回日期类型之后加上时间间隔的日期，type要标明expr的类型</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_ADD(NOW(), <span class="type">INTERVAL</span> <span class="number">770</span> <span class="keyword">DAY</span> );</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311160725549-e35245.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="datediffdate1-date2">DATEDIFF(date1, date2)</h3>
<p>第一个时间减去第二个时间，只能填写DATE类型数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> DATEDIFF(<span class="string">&#x27;2021-12-08&#x27;</span>,<span class="string">&#x27;2021-12-05&#x27;</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311161201754-39fe5f.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>反过来会变成负值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> DATEDIFF(<span class="string">&#x27;2021-12-05&#x27;</span>,<span class="string">&#x27;2021-12-08&#x27;</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311161247806-6509cf.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="案例-4">案例</h3>
<p>在<code>emp</code>表中，查询所有员工的入职天数，并根据入职天数倒序排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name,datediff(curdate(),entrydate) 入职天数 <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> 入职天数 <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311161717147-00634b.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h2 id="流程函数">流程函数</h2>
<p>流程函数也是很常用的一类函数，可以在SQL语句中实现条件筛选，从而提高语句的效率，常用函数如下：</p>
<table>
<colgroup>
<col style="width: 50%" />
<col style="width: 49%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">函数</th>
<th style="text-align: center;">功能</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">IF(value , t , f)</td>
<td style="text-align: center;">如果value为true，则返回t，否则返回f</td>
</tr>
<tr class="even">
<td style="text-align: center;">IFNULL(value1 , value2)</td>
<td
style="text-align: center;">如果value1不为空，返回value1，否则返回value2</td>
</tr>
<tr class="odd">
<td style="text-align: center;">CASE WHEN [val1] THEN [res1] ... ELSE <a
href="#default">default</a> END</td>
<td style="text-align: center;">如果val1为true，返回res1，...
否则返回default默认值</td>
</tr>
<tr class="even">
<td style="text-align: center;">CASE [expr] WHEN [val1] THEN [res1] ...
ELSE <a href="#default">default</a> END</td>
<td style="text-align: center;">如果expr的值等于val1，返回res1，...
否则返回default默认值</td>
</tr>
</tbody>
</table>
<h3 id="ifvalue-t-f">IF(value , t , f)</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> if(判断条件,<span class="string">&#x27;ok&#x27;</span>,<span class="string">&#x27;fuck&#x27;</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> if(<span class="literal">true</span>,<span class="string">&#x27;ok&#x27;</span>,<span class="string">&#x27;fuck&#x27;</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311221353871-f6e885.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311221631272-456b48.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> emp.name, if(emp.name <span class="operator">=</span> <span class="string">&#x27;柳岩&#x27;</span>,<span class="string">&#x27;yes&#x27;</span>,<span class="string">&#x27;no&#x27;</span>) <span class="keyword">as</span> 是否为柳岩 <span class="keyword">from</span> emp <span class="keyword">where</span> emp.workno <span class="operator">=</span> <span class="string">&#x27;00002&#x27;</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311221844871-39443e.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>id为00002的人的名字不是柳岩，所以为no</p>
<h3 id="ifnullvalue1-value2">IFNULL(value1 , value2)</h3>
<p>判断一个值是否为null（只有为null时成立，空的字符串也不看作null），如果不为null，返回这个值（value1）;如果为空返回value2；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ifnull(<span class="keyword">null</span>,<span class="string">&#x27;这个值为空&#x27;</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311222214548-b5959b.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ifnull(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;这个值为空&#x27;</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311222241909-4ac06b.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="case-when-val1-then-res1-...-else-default-end">CASE WHEN [val1]
THEN [res1] ... ELSE <a href="#default">default</a> END</h3>
<p>如果val1为true，返回res1，...
否则返回default默认值；可以添加多个条件，全部用WHEN [val] THEN
[res]写，中间不加逗号；</p>
<p><strong>注意：这里的判断条件是从左到右俺顺序判断的，第一个不满足匹配第二个，其他的都不满足匹配else的；</strong></p>
<p>需求：查询emp表的员工姓名和工作地址（北京/上海 ---&gt; 一线城市 ，
其他 ---&gt; 二线城市）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name, <span class="keyword">CASE</span> <span class="keyword">when</span> emp.workaddress <span class="operator">=</span> <span class="string">&#x27;北京&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;一线城市&#x27;</span> <span class="keyword">when</span> emp.workaddress <span class="operator">=</span> <span class="string">&#x27;上海&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;一线城市&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;二线城市&#x27;</span> <span class="keyword">end</span> 城市</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> 城市</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">select</span> emp.name, <span class="keyword">CASE</span> <span class="keyword">when</span> (emp.workaddress <span class="operator">=</span> <span class="string">&#x27;北京&#x27;</span> <span class="keyword">or</span> emp.workaddress <span class="operator">=</span> <span class="string">&#x27;上海&#x27;</span>) <span class="keyword">THEN</span> <span class="string">&#x27;一线城市&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;二线城市&#x27;</span> <span class="keyword">end</span> 城市</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> 城市</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">select</span> name, IF((emp.workaddress <span class="operator">=</span> <span class="string">&#x27;北京&#x27;</span> <span class="keyword">or</span> emp.workaddress <span class="operator">=</span> <span class="string">&#x27;上海&#x27;</span>), <span class="string">&#x27;一线城市&#x27;</span>, <span class="string">&#x27;二线城市&#x27;</span>) 城市</span><br><span class="line"><span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> 城市</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311222838199-501cdb.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="case-expr-when-val1-then-res1-...-else-default-end">CASE [expr]
WHEN [val1] THEN [res1] ... ELSE <a href="#default">default</a> END</h3>
<p>这个和上面的差不多，只不过可以把判断条件分开写</p>
<p>案例：找出张三丰</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将name进行判断，检查是否等于&#x27;张三丰&#x27;，如果是，则返回&#x27;这是张三丰&#x27;，如果不是则返回&#x27;这不是张三丰&#x27;</span></span><br><span class="line"><span class="keyword">select</span> name, <span class="keyword">CASE</span> name <span class="keyword">when</span> <span class="string">&#x27;张三丰&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;这是张三丰&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;这不是张三丰&#x27;</span> <span class="keyword">end</span> <span class="keyword">as</span> 是否是张三丰 <span class="keyword">from</span> emp</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311223825111-a944ef.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="案例-5">案例</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(</span><br><span class="line">    id <span class="type">int</span> comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    math <span class="type">int</span> comment <span class="string">&#x27;数学&#x27;</span>,</span><br><span class="line">    english <span class="type">int</span> comment <span class="string">&#x27;英语&#x27;</span>,</span><br><span class="line">    chinese <span class="type">int</span> comment <span class="string">&#x27;语文&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;学员成绩表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> score(id, name, math, english, chinese)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">67</span>, <span class="number">88</span>, <span class="number">95</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;Rose&#x27;</span>, <span class="number">23</span>, <span class="number">66</span>, <span class="number">90</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">56</span>, <span class="number">98</span>, <span class="number">76</span>);</span><br></pre></td></tr></table></figure>
<p>根据上述创建的<code>score</code>表，统计班级各个学员的成绩，展示的规则如下：
- &gt;= 85，展示优秀 - &gt;= 60，展示及格 - 否则，展示不及格</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">       score.id,</span><br><span class="line">       score.name,</span><br><span class="line">       score.math,</span><br><span class="line">       (<span class="keyword">case</span> <span class="keyword">when</span> score.math <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> score.math <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">end</span>) 数学,</span><br><span class="line">        score.chinese,</span><br><span class="line">       (<span class="keyword">case</span> <span class="keyword">when</span> score.chinese <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> score.chinese <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">end</span>) 语文,</span><br><span class="line">       score.english,</span><br><span class="line">       (<span class="keyword">case</span> <span class="keyword">when</span> score.english <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span> <span class="keyword">when</span> score.english <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">end</span>) 英语</span><br><span class="line"><span class="keyword">from</span> score</span><br></pre></td></tr></table></figure>
<p>注意这里的判别顺序不能弄错，如果先判别是否及格，那么优秀的就会被排除</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">       score.id,</span><br><span class="line">       score.name,</span><br><span class="line">       score.chinese,</span><br><span class="line">  <span class="comment">-- 判断顺序错误</span></span><br><span class="line">       (<span class="keyword">case</span> <span class="keyword">when</span> score.chinese <span class="operator">&gt;=</span> <span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;及格&#x27;</span><span class="keyword">when</span> score.chinese <span class="operator">&gt;=</span> <span class="number">85</span> <span class="keyword">then</span> <span class="string">&#x27;优秀&#x27;</span>  <span class="keyword">else</span> <span class="string">&#x27;不及格&#x27;</span> <span class="keyword">end</span>) 数学</span><br><span class="line"><span class="keyword">from</span> score</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250311225357866-1d1b03.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h1 id="约束">约束</h1>
<h2 id="约束的概念">约束的概念</h2>
<p>约束是作用在表中字段上的规则，用于限制存储在表中的数据；目的是保证数据库中数据的正确性、游戏性和完整性。</p>
<blockquote>
<p>约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束</p>
</blockquote>
<p>常见的约束有以下几种：</p>
<table>
<colgroup>
<col style="width: 26%" />
<col style="width: 61%" />
<col style="width: 12%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">约束</th>
<th style="text-align: left;">描述</th>
<th style="text-align: left;">关键字</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">非空约束</td>
<td style="text-align: left;">限制该字段的数据不能为null</td>
<td style="text-align: left;">NOT NULL</td>
</tr>
<tr class="even">
<td style="text-align: left;">唯一约束</td>
<td
style="text-align: left;">保证该字段的所有数据都是唯一、不重复的</td>
<td style="text-align: left;">UNIQUE</td>
</tr>
<tr class="odd">
<td style="text-align: left;">主键约束</td>
<td
style="text-align: left;">主键是一行数据的唯一标识，要求非空且唯一</td>
<td style="text-align: left;">PRIMARY KEY</td>
</tr>
<tr class="even">
<td style="text-align: left;">默认约束</td>
<td
style="text-align: left;">保存数据时，如果未指定该字段的值，则采用默认值</td>
<td style="text-align: left;">DEFAULT</td>
</tr>
<tr class="odd">
<td style="text-align: left;">检查约束(8.0.16版本之后)</td>
<td style="text-align: left;">保证字段值满足某一个条件</td>
<td style="text-align: left;">CHECK</td>
</tr>
<tr class="even">
<td style="text-align: left;">外键约束</td>
<td
style="text-align: left;">用来让两张表的数据之间建立连接，保证数据的一致性和完整性</td>
<td style="text-align: left;">FOREIGN KEY</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注：如有多个约束关键字，关键字之间不能加上逗号</p>
</blockquote>
<h2 id="约束演示">约束演示</h2>
<p>根据需求，完成表结构的创建</p>
<table>
<colgroup>
<col style="width: 7%" />
<col style="width: 12%" />
<col style="width: 13%" />
<col style="width: 31%" />
<col style="width: 34%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">字段名</th>
<th style="text-align: center;">字段含义</th>
<th style="text-align: center;">字段类型</th>
<th style="text-align: center;">约束条件</th>
<th style="text-align: center;">约束关键字</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">id</td>
<td style="text-align: center;">ID唯一标识</td>
<td style="text-align: center;">int</td>
<td style="text-align: center;">主键，并且自动增长</td>
<td style="text-align: center;">PRIMARY KEY, AUTO_INCREMENT</td>
</tr>
<tr class="even">
<td style="text-align: center;">name</td>
<td style="text-align: center;">姓名</td>
<td style="text-align: center;">varchar(10)</td>
<td style="text-align: center;">不为空，并且唯一</td>
<td style="text-align: center;">NOT NULL, UNIQUE</td>
</tr>
<tr class="odd">
<td style="text-align: center;">age</td>
<td style="text-align: center;">年龄</td>
<td style="text-align: center;">int</td>
<td style="text-align: center;">大于0，并且小于等于120</td>
<td style="text-align: center;">CHECK</td>
</tr>
<tr class="even">
<td style="text-align: center;">status</td>
<td style="text-align: center;">状态</td>
<td style="text-align: center;">char(1)</td>
<td style="text-align: center;">如果没有指定该值，默认为1</td>
<td style="text-align: center;">DEFAULT</td>
</tr>
<tr class="odd">
<td style="text-align: center;">gender</td>
<td style="text-align: center;">性别</td>
<td style="text-align: center;">char(1)</td>
<td style="text-align: center;">无</td>
<td style="text-align: center;">无</td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    id <span class="type">int</span>  AUTO_INCREMENT <span class="keyword">PRIMARY</span> KEY comment <span class="string">&#x27;ID唯一标识&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">UNIQUE</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">int</span> <span class="keyword">check</span> (<span class="number">120</span><span class="operator">&gt;=</span>age<span class="operator">&gt;</span><span class="number">0</span>) comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    status <span class="type">char</span>(<span class="number">1</span>) <span class="keyword">default</span> <span class="string">&#x27;1&#x27;</span> comment <span class="string">&#x27;状态&#x27;</span>,</span><br><span class="line">    gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户表&#x27;</span></span><br></pre></td></tr></table></figure>
<p>注意<code>status</code>
是<code>char(1)</code>类型，所以默认状态为<code>‘1’</code></p>
<h3 id="primary-key">PRIMARY KEY</h3>
<p>接下来插入数据，尝试约束的限制</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> wufan.user(name, age, status, gender)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;TOM2&#x27;</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="string">&#x27;男&#x27;</span> )</span><br></pre></td></tr></table></figure>
<p>插入数据，不用写id，因为id是主键，系统会自动维护；<strong>主键只能有一个，代表唯一标识一条记录，不能有重复的，不允许为空</strong>；</p>
<p>当然主键也可以自己添加和修改（只要满足主键的条件）：</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250313150552942-e9ca3a.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250313150610201-79d37c.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>注意：就算有数据没有被添加入表中，因为设置了AUTO_INCREMENT，主键也会相应增加；</p>
</blockquote>
<h3 id="auto_increment">AUTO_INCREMENT</h3>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250313151038809-5a1437.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="not-null">NOT NULL</h3>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250313150820041-993999.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="unique">UNIQUE</h3>
<p>如果插入相同名字的数据，那么会报错，因为名字有约束<code>UNIQUE</code>；</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250313145336298-7a207c.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="check">CHECK</h3>
<p>不符合age的check约束条件会报错</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250313145813586-2bd04a.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="default">DEFAULT</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> wufan.user(name, age,  gender)</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;TOM9&#x27;</span>, <span class="number">22</span>, <span class="string">&#x27;男&#x27;</span> );</span><br></pre></td></tr></table></figure>
<p>只输入<code>name</code>,<code>age</code>,
<code>gender</code>，三个信息，由于<code>id</code>为主键，会自动填写；<code>status</code>由于设置了<code>default '1'</code>，所以不填写就默认为<code>'1'</code>，结果如下所示:</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250313150310617-483a2e.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h2 id="外键约束">外键约束</h2>
<p>外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250313151731234-185aad.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>比如图中的两张表，员工表中存有部门id信息，而部门表中存有部门id所对应的部门名称，这两张表有相互对应的逻辑关系；如果部门表中出现了变化，比如说部门被删除了，那么员工表的对应的部门信息就不完整了；</p>
<p>拥有外键的表称为子表，另一张表称为父表；</p>
<p>创建表<code>dept</code>，并插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">    id <span class="type">int</span> auto_increment comment <span class="string">&#x27;ID&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;部门名称&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;部门表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept (id, name) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;研发部&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;市场部&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;财务部&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;销售部&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;总经办&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>创建表<code>emp</code>，并插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">    id <span class="type">int</span> auto_increment comment <span class="string">&#x27;ID&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    job <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;职位&#x27;</span>,</span><br><span class="line">    salary <span class="type">int</span> comment <span class="string">&#x27;薪资&#x27;</span>,</span><br><span class="line">    entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">    managerid <span class="type">int</span> comment <span class="string">&#x27;直属领导ID&#x27;</span>,</span><br><span class="line">    dept_id <span class="type">int</span> comment <span class="string">&#x27;部门ID&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, name, age, job, salary, entrydate, managerid, dept_id) <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">1</span>, <span class="string">&#x27;金庸&#x27;</span>, <span class="number">66</span>, <span class="string">&#x27;总裁&#x27;</span>, <span class="number">20000</span>, <span class="string">&#x27;2000-01-01&#x27;</span>, <span class="keyword">null</span>, <span class="number">5</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;项目经理&#x27;</span>, <span class="number">12500</span>, <span class="string">&#x27;2005-12-05&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">&#x27;杨逍&#x27;</span>, <span class="number">33</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">8400</span>, <span class="string">&#x27;2000-11-03&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">    (<span class="number">4</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="number">48</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">11000</span>, <span class="string">&#x27;2002-02-05&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">    (<span class="number">5</span>, <span class="string">&#x27;常遇春&#x27;</span>, <span class="number">43</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">10500</span>, <span class="string">&#x27;2004-09-07&#x27;</span>, <span class="number">3</span>, <span class="number">1</span>),</span><br><span class="line">    (<span class="number">6</span>, <span class="string">&#x27;小昭&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;程序员鼓励师&#x27;</span>, <span class="number">6600</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>如果dept表变动，emp中dept_id这一数据肯定不会变动，需要添加外键保证数据的完整性和一致性</p>
<h3 id="添加外键">添加外键</h3>
<p>在创建表的时候添加外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">    字段名 数据类型,</span><br><span class="line">    ...,</span><br><span class="line">    [<span class="keyword">CONSTRAINT</span>] [外键名称] <span class="keyword">FOREIGN</span> KEY(外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>使用<code>ALTER TABLE</code>修改表字段，在创建好的表中添加外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY(外键字段名) <span class="keyword">REFERENCES</span> 主表(主表列名);</span><br></pre></td></tr></table></figure>
<p>接下来使用<code>ALTER TABLE</code>来添加外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key (dept_id) <span class="keyword">REFERENCES</span> dept (id);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250314101454914-1e5fb2.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>注意：这里的外键链接的字段之间要相互对应，否则会报错</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250314101737025-544358.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
</blockquote>
<h3 id="外键保证数据完整性">外键保证数据完整性</h3>
<p>删除主表中的数据，发现报错，因为有外键的约束，无法删除，保证了数据的完整性；</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250314102111603-c110d1.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="删除外键">删除外键</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY 外键名称;</span><br></pre></td></tr></table></figure>
<p>删除<code>fk_emp_dept_id</code>外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> KEY fk_emp_dept_id;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250314102556879-c08655.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>外键已删除</p>
<h3 id="外键的删除更新行为">外键的删除/更新行为</h3>
<table>
<colgroup>
<col style="width: 17%" />
<col style="width: 82%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">行为</th>
<th style="text-align: center;">说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">NO ACTION</td>
<td
style="text-align: center;">当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。（与RESTRICT一致）</td>
</tr>
<tr class="even">
<td style="text-align: center;">RESTRICT</td>
<td
style="text-align: center;">当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。（与NO
ACTION一致）</td>
</tr>
<tr class="odd">
<td style="text-align: center;">CASCADE(级联)</td>
<td
style="text-align: center;">当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除/更新外键在子表中的记录。</td>
</tr>
<tr class="even">
<td style="text-align: center;">SET NULL</td>
<td
style="text-align: center;">当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（这就要求该外键允许取null）。</td>
</tr>
<tr class="odd">
<td style="text-align: center;">SET DEFAULT</td>
<td
style="text-align: center;">父表有变更时，子表将外键列设置成一个默认的值（Innodb不支持）</td>
</tr>
</tbody>
</table>
<h4 id="语法">语法</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> 外键名称 <span class="keyword">FOREIGN</span> KEY (外键字段名) <span class="keyword">REFERENCES</span> 主表名(主表字段名) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> 更新行为规则 <span class="keyword">ON</span> <span class="keyword">DELETE</span> 删除行为规则;</span><br></pre></td></tr></table></figure>
<h4 id="添加新的级联更新删除操作">添加新的级联更新/删除操作</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span>  fk_name_dept_id  <span class="keyword">foreign</span> key (dept_id) <span class="keyword">references</span> dept (id)</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">update</span> cascade <span class="keyword">on</span> <span class="keyword">delete</span>  cascade ;</span><br></pre></td></tr></table></figure>
<h5 id="cascade更新">CASCADE更新</h5>
<p>在父表中添加或者修改数据，观察子表中的变化</p>
<p>修改父表中的<code>id</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> dept <span class="keyword">set</span> id <span class="operator">=</span> <span class="number">6</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250314103932071-d33044.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>由于<code>cascade</code>级联的更新规则，子表中的数据也更新了</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250314104005936-6c9109.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h5 id="setnull删除">SETNULL删除</h5>
<p>删除之前的外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_name_dept_id</span><br></pre></td></tr></table></figure>
<p>添加SETNULL规则的外键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> <span class="keyword">foreign</span> key fk_id_dept_id (dept_id) <span class="keyword">references</span> dept (id) <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">set</span> <span class="keyword">null</span> <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="keyword">null</span> ;</span><br></pre></td></tr></table></figure>
<p>删除父表中<code>id</code>为6的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">6</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250314104609225-bf7279.png"  width="45%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>发现子表中<code>id</code>为6的数据被设置为null</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250314104645860-f792d9.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h1 id="多表查询">多表查询</h1>
<h2 id="多表关系介绍">多表关系介绍</h2>
<p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：</p>
<ul>
<li>一对多(多对一)</li>
<li>多对多</li>
<li>一对一</li>
</ul>
<h3 id="一对多多对一">一对多(多对一)</h3>
<p>案例: 部门 与 员工的关系</p>
<p>关系: 一个部门对应多个员工，一个员工对应一个部门</p>
<p>实现: 在多的一方建立外键，指向一的一方的主键</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250316102613921-f6c0a2.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="多对多">多对多</h3>
<p>➤ 案例: 学生 与 课程的关系</p>
<p>➤ 关系: 一个学生可以选修多门课程，一门课程也可以供多个学生选择</p>
<p>➤ 实现:
建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250316102806527-531ee5.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>创建三张表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    <span class="keyword">no</span> <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;学号&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;学生表&#x27;</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student (id, name, <span class="keyword">no</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;黛绮丝&#x27;</span>, <span class="string">&#x27;2000100101&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;谢逊&#x27;</span>, <span class="string">&#x27;2000100102&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;殷天正&#x27;</span>, <span class="string">&#x27;2000100103&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="string">&#x27;2000100104&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course(</span><br><span class="line">    id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;课程名称&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;课程表&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> course <span class="keyword">values</span> (<span class="keyword">null</span>, <span class="string">&#x27;Java&#x27;</span>), (<span class="keyword">null</span>, <span class="string">&#x27;PHP&#x27;</span>), (<span class="keyword">null</span>, <span class="string">&#x27;MySQL&#x27;</span>), (<span class="keyword">null</span>, <span class="string">&#x27;Hadoop&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student_course(</span><br><span class="line">    id <span class="type">int</span> auto_increment comment <span class="string">&#x27;主键&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">    studentid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;学生ID&#x27;</span>,</span><br><span class="line">    courseid <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;课程ID&#x27;</span>,</span><br><span class="line">    <span class="keyword">constraint</span> fk_courseid <span class="keyword">foreign</span> key (courseid) <span class="keyword">references</span> course (id),</span><br><span class="line">    <span class="keyword">constraint</span> fk_studentid <span class="keyword">foreign</span> key (studentid) <span class="keyword">references</span> student (id)</span><br><span class="line">) comment <span class="string">&#x27;学生课程中间表&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student_course <span class="keyword">values</span> (<span class="keyword">null</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="keyword">null</span>,<span class="number">1</span>,<span class="number">2</span>),(<span class="keyword">null</span>,<span class="number">1</span>,<span class="number">3</span>),(<span class="keyword">null</span>,<span class="number">2</span>,<span class="number">2</span>),(<span class="keyword">null</span>,<span class="number">2</span>,<span class="number">3</span>),(<span class="keyword">null</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<p><code>student</code>表</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250316103327323-76c806.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p><code>course</code>表</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250316103531985-7387d1.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p><code>student_course</code>表</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250316103613347-c32316.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>在<code>student_course</code>主表中，添加了两个外键，分别关联另外两个表的主键，更新/删除规则为<code>no action</code>，这样就可以维护表的完整性；</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250316104839437-def2f7.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="一对一">一对一</h3>
<p>➤ 案例: 用户 与 用户详情的关系</p>
<p>➤ 关系:
一对一关系，<strong>多用于单表拆分</strong>，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率</p>
<p>➤ 实现:
在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250316105202310-ec9837.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line">id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;1: 男 , 2: 女&#x27;</span>,</span><br><span class="line">phone <span class="type">char</span>(<span class="number">11</span>) comment <span class="string">&#x27;手机号&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户基本信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user_edu(</span><br><span class="line">id <span class="type">int</span> auto_increment <span class="keyword">primary</span> key comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">degree <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;学历&#x27;</span>,</span><br><span class="line">major <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;专业&#x27;</span>,</span><br><span class="line">primaryschool <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;小学&#x27;</span>,</span><br><span class="line">middleschool <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;中学&#x27;</span>,</span><br><span class="line">university <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;大学&#x27;</span>,</span><br><span class="line">userid <span class="type">int</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户ID&#x27;</span>,</span><br><span class="line"><span class="keyword">constraint</span> fk_userid <span class="keyword">foreign</span> key (userid) <span class="keyword">references</span> tb_user(id)</span><br><span class="line">) comment <span class="string">&#x27;用户教育信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(id, name, age, gender, phone) <span class="keyword">values</span></span><br><span class="line">(<span class="keyword">null</span>,<span class="string">&#x27;黄渤&#x27;</span>,<span class="number">45</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;18800001111&#x27;</span>),</span><br><span class="line">(<span class="keyword">null</span>,<span class="string">&#x27;冰冰&#x27;</span>,<span class="number">35</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;18800002222&#x27;</span>),</span><br><span class="line">(<span class="keyword">null</span>,<span class="string">&#x27;码云&#x27;</span>,<span class="number">55</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;18800008888&#x27;</span>),</span><br><span class="line">(<span class="keyword">null</span>,<span class="string">&#x27;李彦宏&#x27;</span>,<span class="number">50</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;18800009999&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user_edu(id, degree, major, primaryschool, middleschool,</span><br><span class="line">university, userid) <span class="keyword">values</span></span><br><span class="line">(<span class="keyword">null</span>,<span class="string">&#x27;本科&#x27;</span>,<span class="string">&#x27;舞蹈&#x27;</span>,<span class="string">&#x27;静安区第一小学&#x27;</span>,<span class="string">&#x27;静安区第一中学&#x27;</span>,<span class="string">&#x27;北京舞蹈学院&#x27;</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="keyword">null</span>,<span class="string">&#x27;硕士&#x27;</span>,<span class="string">&#x27;表演&#x27;</span>,<span class="string">&#x27;朝阳区第一小学&#x27;</span>,<span class="string">&#x27;朝阳区第一中学&#x27;</span>,<span class="string">&#x27;北京电影学院&#x27;</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="keyword">null</span>,<span class="string">&#x27;本科&#x27;</span>,<span class="string">&#x27;英语&#x27;</span>,<span class="string">&#x27;杭州市第一小学&#x27;</span>,<span class="string">&#x27;杭州市第一中学&#x27;</span>,<span class="string">&#x27;杭州师范大学&#x27;</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="keyword">null</span>,<span class="string">&#x27;本科&#x27;</span>,<span class="string">&#x27;应用数学&#x27;</span>,<span class="string">&#x27;阳泉第一小学&#x27;</span>,<span class="string">&#x27;阳泉区第一中学&#x27;</span>,<span class="string">&#x27;清华大学&#x27;</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<p>由于在主表的字段<code>userid</code>设置了<code>unique</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">userid <span class="type">int</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户ID&#x27;</span></span><br></pre></td></tr></table></figure>
<p>而从表的<code>id</code>为主键，唯一；所以主表和从表之间的数据可以一一对应；</p>
<h2 id="多表查询概述">多表查询概述</h2>
<h3 id="数据准备">数据准备</h3>
<p>删除之前 emp,
dept表的测试数据，执行如下脚本，创建emp表与dept表并插入测试数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建dept表，并插入数据</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept(</span><br><span class="line">id <span class="type">int</span> auto_increment comment <span class="string">&#x27;ID&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;部门名称&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;部门表&#x27;</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> dept (id, name) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;研发部&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;市场部&#x27;</span>),(<span class="number">3</span>, <span class="string">&#x27;财务部&#x27;</span>), (<span class="number">4</span>,</span><br><span class="line"><span class="string">&#x27;销售部&#x27;</span>), (<span class="number">5</span>, <span class="string">&#x27;总经办&#x27;</span>), (<span class="number">6</span>, <span class="string">&#x27;人事部&#x27;</span>);</span><br><span class="line"><span class="comment">-- 创建emp表，并插入数据</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">id <span class="type">int</span> auto_increment comment <span class="string">&#x27;ID&#x27;</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">job <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;职位&#x27;</span>,</span><br><span class="line">salary <span class="type">int</span> comment <span class="string">&#x27;薪资&#x27;</span>,</span><br><span class="line">entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">managerid <span class="type">int</span> comment <span class="string">&#x27;直属领导ID&#x27;</span>,</span><br><span class="line">dept_id <span class="type">int</span> comment <span class="string">&#x27;部门ID&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"><span class="comment">-- 添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp <span class="keyword">add</span> <span class="keyword">constraint</span> fk_emp_dept_id <span class="keyword">foreign</span> key (dept_id) <span class="keyword">references</span></span><br><span class="line">dept(id);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, name, age, job,salary, entrydate, managerid, dept_id)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;金庸&#x27;</span>, <span class="number">66</span>, <span class="string">&#x27;总裁&#x27;</span>,<span class="number">20000</span>, <span class="string">&#x27;2000-01-01&#x27;</span>, <span class="keyword">null</span>,<span class="number">5</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;项目经理&#x27;</span>,<span class="number">12500</span>, <span class="string">&#x27;2005-12-05&#x27;</span>, <span class="number">1</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;杨逍&#x27;</span>, <span class="number">33</span>, <span class="string">&#x27;开发&#x27;</span>, <span class="number">8400</span>,<span class="string">&#x27;2000-11-03&#x27;</span>, <span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="number">48</span>, <span class="string">&#x27;开发&#x27;</span>,<span class="number">11000</span>, <span class="string">&#x27;2002-02-05&#x27;</span>, <span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;常遇春&#x27;</span>, <span class="number">43</span>, <span class="string">&#x27;开发&#x27;</span>,<span class="number">10500</span>, <span class="string">&#x27;2004-09-07&#x27;</span>, <span class="number">3</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;小昭&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;程序员鼓励师&#x27;</span>,<span class="number">6600</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">2</span>,<span class="number">1</span>),</span><br><span class="line">(<span class="number">7</span>, <span class="string">&#x27;灭绝&#x27;</span>, <span class="number">60</span>, <span class="string">&#x27;财务总监&#x27;</span>,<span class="number">8500</span>, <span class="string">&#x27;2002-09-12&#x27;</span>, <span class="number">1</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">8</span>, <span class="string">&#x27;周芷若&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;会计&#x27;</span>,<span class="number">48000</span>, <span class="string">&#x27;2006-06-02&#x27;</span>, <span class="number">7</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">9</span>, <span class="string">&#x27;丁敏君&#x27;</span>, <span class="number">23</span>, <span class="string">&#x27;出纳&#x27;</span>,<span class="number">5250</span>, <span class="string">&#x27;2009-05-13&#x27;</span>, <span class="number">7</span>,<span class="number">3</span>),</span><br><span class="line">(<span class="number">10</span>, <span class="string">&#x27;赵敏&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;市场部总监&#x27;</span>,<span class="number">12500</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">11</span>, <span class="string">&#x27;鹿杖客&#x27;</span>, <span class="number">56</span>, <span class="string">&#x27;职员&#x27;</span>,<span class="number">3750</span>, <span class="string">&#x27;2006-10-03&#x27;</span>, <span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">12</span>, <span class="string">&#x27;鹤笔翁&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;职员&#x27;</span>,<span class="number">3750</span>, <span class="string">&#x27;2007-05-09&#x27;</span>, <span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">13</span>, <span class="string">&#x27;方东白&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;职员&#x27;</span>,<span class="number">5500</span>, <span class="string">&#x27;2009-02-12&#x27;</span>, <span class="number">10</span>,<span class="number">2</span>),</span><br><span class="line">(<span class="number">14</span>, <span class="string">&#x27;张三丰&#x27;</span>, <span class="number">88</span>, <span class="string">&#x27;销售总监&#x27;</span>,<span class="number">14000</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">1</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">15</span>, <span class="string">&#x27;俞莲舟&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;销售&#x27;</span>,<span class="number">4600</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">14</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">16</span>, <span class="string">&#x27;宋远桥&#x27;</span>, <span class="number">40</span>, <span class="string">&#x27;销售&#x27;</span>,<span class="number">4600</span>, <span class="string">&#x27;2004-10-12&#x27;</span>, <span class="number">14</span>,<span class="number">4</span>),</span><br><span class="line">(<span class="number">17</span>, <span class="string">&#x27;陈友谅&#x27;</span>, <span class="number">42</span>, <span class="keyword">null</span>,<span class="number">2000</span>, <span class="string">&#x27;2011-10-12&#x27;</span>, <span class="number">1</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<h3 id="多表查询-1">多表查询</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段 <span class="keyword">from</span> 表<span class="number">1</span>,表<span class="number">2</span>,...</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250317102302020-7f07ef.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>发现结果很奇怪，每个<code>emp</code>的每条数据与<code>dept</code>中的每条数据都组合了一遍，形成最后的查询结果；这种现象称之为笛卡尔积</p>
<p>笛卡尔积: 笛卡尔乘积是指在数学中，两个集合A集合 和
B集合的所有组合情况。</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250317102546246-b45e29.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>而在多表查询中，我们是需要消除无效的笛卡尔积的，只保留两张表关联部分的数据。</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250317102653319-5317a1.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250317102800955-31d583.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="连接条件">连接条件</h3>
<p>如何去除无效的笛卡尔积的，只保留两张表关联部分的数据；只需要在多表查询DQL语句中和添加上我们<strong>需要两个表中的那些字段匹配的条件</strong>，即连接查询的条件即可；</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp , dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250317103022479-3a9320.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>可以发现员工<code>id</code>为17的人不在最终的结果中，是因为这个人没有部门id，无法匹配<code>dept</code>表</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250317103231585-aeeea3.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="多表查询的分类">多表查询的分类</h3>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250317103750869-2b1ed3.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h4 id="内连接">内连接</h4>
<p>相当于查询A、B交集部分数据</p>
<h4 id="外连接">外连接</h4>
<ul>
<li>左外连接</li>
</ul>
<p>查询左表所有数据，以及两张表交集部分数据</p>
<ul>
<li>右外连接</li>
</ul>
<p>查询右表所有数据，以及两张表交集部分数据</p>
<h4 id="自连接">自连接</h4>
<p>当前表与自身的连接查询，自连接必须使用表别名</p>
<h4 id="子查询">子查询</h4>
<p>子查询，也称为嵌套查询或子选择，是SELECT嵌入在另一个SQL查询的 WHERE
或 HAVING子句中的查询</p>
<h2 id="内连接-1">内连接</h2>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250317103750869-2b1ed3.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>内连接查询的是两张表交集部分的数据。(也就是绿色部分的数据)</p>
<h3 id="隐式内连接">隐式内连接</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> , 表<span class="number">1</span>  <span class="keyword">WHERE</span> 条件 ... ;</span><br></pre></td></tr></table></figure>
<h3 id="显式内连接">显式内连接</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> [ <span class="keyword">INNER</span> ] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 连接条件 ... ;</span><br></pre></td></tr></table></figure>
<h3 id="案例-6">案例</h3>
<p>查询每一个员工的姓名 , 及关联的部门的名称 (隐式内连接实现)</p>
<ul>
<li>表结构: emp, dept</li>
<li>连接条件: emp.dept_id = dept.id</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.name, d.name <span class="keyword">from</span> emp e, dept d <span class="keyword">where</span> e.dept_id <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250317104402617-02e17a.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>一旦为表起了别名，就不能再使用表名来指定对应的字段了，此时只能够使用别名来指定字段。</p>
</blockquote>
<p>查询每一个员工的姓名 , 及关联的部门的名称 (显式内连接实现)</p>
<ul>
<li>表结构: emp, dept</li>
<li>连接条件: emp.dept_id = dept.id</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.name, d.name <span class="keyword">from</span> (emp e <span class="keyword">inner</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id);</span><br><span class="line"><span class="comment">-- 或者省略inner</span></span><br><span class="line"><span class="keyword">select</span> e.name, d.name <span class="keyword">from</span> (emp e <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250317104402617-02e17a.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>这种显示连接的方法，可以看作是先通过内连接和连接条件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">emp e <span class="keyword">inner</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id</span><br></pre></td></tr></table></figure>
<p>制作一张表，然后再在这张表中选取出<code>e.name, d.name</code>；</p>
<h2 id="外连接-1">外连接</h2>
<h3 id="左外连接">左外连接</h3>
<p>左外连接相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">LEFT</span> [ <span class="keyword">OUTER</span> ] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件 ... ;</span><br></pre></td></tr></table></figure>
<h3 id="右外连接">右外连接</h3>
<p>右外连接相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">RIGHT</span> [ <span class="keyword">OUTER</span> ] <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 条件 ... ;</span><br></pre></td></tr></table></figure>
<h3 id="案例-7">案例</h3>
<p>查询emp表的所有数据, 和对应的部门信息（左外连接）</p>
<ul>
<li>表结构: emp, dept</li>
<li>连接条件: emp.dept_id = dept.id</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.name <span class="keyword">from</span> emp e <span class="keyword">left</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250317114035466-16550f.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p><code>emp</code>表中的所有数据都有，包括最后一个没有<code>dept_id</code>的员工；这个语句的意思是，保留emp表（左边）的所有数据,查询右表中满足相应数据行<code>e.dept_id = d.id</code>的数据，将其与左表相应行拼接，形成一个新的表；再通过<code>select</code>选出相应的字段；总是左连接是基于左表去查找的；</p>
<p>比如最后一行的数据，使用最后一个数据的<code>dept_id:null</code>去右表中寻找是否有<code>dept_id</code>为<code>nul</code>l的部门,结果没有找到，所以用dept_name=null与这条数据拼接；</p>
<p>查询dept表的所有数据, 和对应的员工信息(右外连接)</p>
<ul>
<li>表结构: emp, dept</li>
<li>连接条件: emp.dept_id = dept.id</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span>, d.<span class="operator">*</span> <span class="keyword">from</span> emp e <span class="keyword">right</span> <span class="keyword">join</span> dept d <span class="keyword">on</span> e.dept_id <span class="operator">=</span> d.id;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250317115153406-aa1e42.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>上述语句以左表<code>dept</code>为基准，按照条件<code>e.dept_id = d.id</code>来查找左表的信息并完成拼接；最后一条数据中，在<code>dept</code>表中没有找到<code>id</code>为<code>null</code>的部门，所以查找不到左表的数据，就将<code>null</code>值赋给相应的左表数据；</p>
<blockquote>
<p>左外连接和右外连接是可以相互替换的，只需要调整在连接查询时SQL中，表结构的先后顺序就可以了。而我们在日常开发使用时，更偏向于左外连接。</p>
</blockquote>
<h2 id="自连接-1">自连接</h2>
<p>自连接查询，顾名思义，就是自己连接自己，也就是把一张表连接查询多次</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表A 别名A <span class="keyword">JOIN</span> 表A 别名B <span class="keyword">ON</span> 条件 ... ;</span><br></pre></td></tr></table></figure>
<p>对于自连接查询，可以是内连接查询，也可以是外连接查询，但是表<strong>必须取别名</strong>。</p>
<h3 id="案例-8">案例</h3>
<p>查询员工及其所属领导的名字</p>
<ul>
<li>表结构: emp</li>
<li>连接条件: 领导id= 员工id</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e1.name,e2.name <span class="keyword">from</span> emp e1 <span class="keyword">join</span> emp e2 <span class="keyword">on</span> e1.id <span class="operator">=</span> e2.managerid;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250318162627524-99da44.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>结果中没有金庸的信息，是因为金庸没有领导id这一数据</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250318162800487-a2f947.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>查询所有员工 及其领导的名字 如果员工没有领导, 也需要查询出来</p>
<ul>
<li>表结构: emp</li>
<li>连接条件: 领导id= 员工id</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.name ,b.name <span class="keyword">from</span> emp a <span class="keyword">left</span> <span class="keyword">join</span> emp b <span class="keyword">on</span> a.managerid <span class="operator">=</span> b.id</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250318163748274-1e5432.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>注意不要把<code>on</code>后的比较顺序写反，写成</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.name ,b.name <span class="keyword">from</span> emp a <span class="keyword">left</span> <span class="keyword">join</span> emp b <span class="keyword">on</span> a.id <span class="operator">=</span> b.managerid</span><br></pre></td></tr></table></figure>
<p>这样的结果不对：</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250318165622796-a4d0af.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.name ,b.name <span class="keyword">from</span> emp a <span class="keyword">left</span> <span class="keyword">join</span> emp b <span class="keyword">on</span> a.managerid <span class="operator">=</span> b.id</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> a.name ,b.name <span class="keyword">from</span> emp a <span class="keyword">left</span> <span class="keyword">join</span> emp b <span class="keyword">on</span> </span><br><span class="line">a.id <span class="operator">=</span> b.managerid</span><br></pre></td></tr></table></figure>
<p>这两种有上面的差异，为什么？没有找到相关资料，只在<a
href="https://bbs.csdn.net/topics/370145185">这里</a>发现也有人问，</p>
<p>可以这样理解，<code>a.managerid = b.id</code>是以<code>manager</code>为中心查询员工；<code>a.id = b.managerid</code>是以员工<code>id</code>为中心查询<code>manager</code>；以哪个为中心，哪个就不会重复出现。</p>
<h3 id="联合查询">联合查询</h3>
<p>对于union查询，就是把多次查询的结果合并起来，形成一个新的查询结果集</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表A ...</span><br><span class="line"><span class="keyword">UNION</span> [ <span class="keyword">ALL</span> ]</span><br><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表B ....;</span><br></pre></td></tr></table></figure>
<h4 id="案例-9">案例</h4>
<p>使用联合查询，将薪资低于 5000 的员工和年龄大于 50
岁的员工信息全部查询出来</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&lt;</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">50</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250318191600125-843204.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>可以发现<code>union all</code>仅仅是将两个查询的结果合并起来，并且允许重复的数据行出现</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&lt;</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">50</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250318191729166-141103.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>如果去掉<code>all</code>，发现对数据行进行了去重的操作</p>
<p>试合并两个字段数量不同的查询结果</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&lt;</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">50</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250318191842263-b82628.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>试合并两个字段类型不同，字段数量相同的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> age,salary <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&lt;</span> <span class="number">5000</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> name,age <span class="keyword">from</span> emp <span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">50</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250318192013529-e91b10.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>可以合并，但结果无意义；</p>
<ul>
<li>对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。</li>
<li><code>union all</code>
会将全部的数据直接合并在一起，<code>union</code>
会对合并之后的数据去重。</li>
</ul>
<h2 id="子查询-1">子查询</h2>
<h3 id="概念">概念</h3>
<p>SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> column1 <span class="operator">=</span> ( <span class="keyword">SELECT</span> column1 <span class="number">1</span> <span class="keyword">FROM</span> t2 );</span><br></pre></td></tr></table></figure>
<p>子查询外部的语句可以是INSERT / UPDATE / DELETE / SELECT
的任何一个。</p>
<p>根据子查询结果不同，分为：</p>
<ul>
<li>标量子查询（子查询结果为单个值）</li>
<li>列子查询(子查询结果为一列)</li>
<li>行子查询(子查询结果为一行)</li>
<li>表子查询(子查询结果为多行多列)</li>
</ul>
<p>根据子查询位置，分为：</p>
<ul>
<li>WHERE之后</li>
<li>FROM之后</li>
<li>SELECT之后</li>
</ul>
<h3 id="标量子查询">标量子查询</h3>
<p>子查询返回的结果是单个值（数字、字符串、日期等），最简单的形式，这种子查询称为标量子查询。常用的操作符：=
&lt;&gt; &gt; &gt;= &lt; &lt;=</p>
<h4 id="案例-10">案例</h4>
<p>查询 "销售部" 的所有员工信息</p>
<p>查询 "销售部" 部门ID</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span></span><br></pre></td></tr></table></figure>
<p>根据 "销售部" 部门ID, 查询员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250318194612847-b543a3.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>查询在 "方东白" 入职之后的员工信息</p>
<p>查询在"方东白" 入职时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> entrydate <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;方东白&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>查询指定入职日期之后入职的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> (<span class="keyword">select</span> entrydate <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;方东白&#x27;</span>);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250318194628358-f926cd.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>注意这里是大于，把日期看成数字就行，数字越大日期越新</p>
</blockquote>
<h3 id="列子查询">列子查询</h3>
<p>子查询返回的结果是一列（可以是多行），这种子查询称为列子查询。</p>
<p>常用的操作符：IN 、NOT IN 、 ANY 、SOME 、 ALL</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">操作符</th>
<th style="text-align: center;">描述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">IN</td>
<td style="text-align: center;">在指定的集合范围之内，多选一</td>
</tr>
<tr class="even">
<td style="text-align: center;">NOT IN</td>
<td style="text-align: center;">不在指定的集合范围之内</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ANY</td>
<td
style="text-align: center;">子查询返回列表中，有任意一个满足即可</td>
</tr>
<tr class="even">
<td style="text-align: center;">SOME</td>
<td
style="text-align: center;">与ANY等同，使用SOME的地方都可以使用ANY</td>
</tr>
<tr class="odd">
<td style="text-align: center;">ALL</td>
<td style="text-align: center;">子查询返回列表的所有值都必须满足</td>
</tr>
</tbody>
</table>
<h4 id="案例-11">案例</h4>
<p>查询 "销售部" 和 "市场部" 的所有员工信息</p>
<p>查询 "销售部" 和 "市场部"的id</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="keyword">in</span>(<span class="string">&#x27;销售部&#x27;</span>,<span class="string">&#x27;市场部&#x27;</span>)</span><br><span class="line"><span class="comment">-- or</span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span> ;</span><br></pre></td></tr></table></figure>
<p>使用id查询 "销售部" 和 "市场部" 的所有员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="keyword">in</span>(<span class="string">&#x27;销售部&#x27;</span>,<span class="string">&#x27;市场部&#x27;</span>))</span><br><span class="line"><span class="comment">-- or</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;销售部&#x27;</span> <span class="keyword">or</span> name <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>)</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250318195622007-7eff8a.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>查询比财务部所有人工资都高的员工信息</p>
<p>查找财务部id</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>查询财务部所有人的工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span>)</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250318200906353-dcc957.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>查找比财务部所有人工资都高的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">all</span>(<span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span>))</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250318200937957-8ca79c.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>all(),表示选中（）中所有的元素</p>
</blockquote>
<p>查询比研发部其中任意一人工资高的员工信息</p>
<p>查询研发部人的工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>查询比研发部其中任意一人工资高的员工信息(不就是比最小的还要高吗)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">any</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>))</span><br><span class="line"><span class="comment">-- or</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> <span class="keyword">some</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> (<span class="keyword">select</span> id <span class="keyword">from</span> dept <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span>))</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250318201222746-b19e53.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>any和some可以替换</p>
</blockquote>
<h3 id="行子查询">行子查询</h3>
<p>子查询返回的结果是一行（可以是多列），这种子查询称为行子查询。</p>
<p>常用的操作符：= 、&lt;&gt; 、IN 、NOT IN</p>
<h4 id="案例-12">案例</h4>
<p>查询与 "张无忌" 的薪资及直属领导相同的员工信息</p>
<p>查询张无忌的薪资和领导</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> salary, managerid <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张无忌&#x27;</span></span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319111110299-77d54a.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>查询与 "张无忌" 的薪资及直属领导相同的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> (salary, managerid) <span class="operator">=</span> (<span class="keyword">select</span> salary, managerid <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张无忌&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- or 因为 (salary, managerid)只有两个字段，后面子查询也只有两个字段一行数据，是相互匹配的，=与in可以互换；</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> (salary, managerid) <span class="keyword">in</span> (<span class="keyword">select</span> salary, managerid <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;张无忌&#x27;</span>)</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319111135675-72924f.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>注意行子查询的写法，要求行数据相同，使用：</p>
<p>(元素1，元素2，...) =（元素A, 元素B，...）</p>
<p>表示元素1=元素A,元素2=元素B,...</p>
</blockquote>
<h3 id="表子查询">表子查询</h3>
<p>子查询返回的结果是多行多列，这种子查询称为表子查询。</p>
<p>常用的操作符：IN</p>
<h4 id="案例-13">案例</h4>
<p><strong>查询与 "鹿杖客" , "宋远桥"
的职位和薪资相同的员工信息</strong></p>
<p>查询 "鹿杖客" , "宋远桥" 的职位和薪资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> job, salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">in</span> (&quot;鹿杖客&quot; , &quot;宋远桥&quot;);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319111042941-3d1e62.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>查询与 "鹿杖客" , "宋远桥" 的职位和薪资相同的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> (job, salary) <span class="keyword">in</span> (<span class="keyword">select</span> job, salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">in</span> (&quot;鹿杖客&quot; , &quot;宋远桥&quot;));</span><br><span class="line"><span class="comment">-- 这里就不能使用=，因为(job, salary)为两字段一行数据，后面子查询为两个字段两行数据，列数不符合，会报错</span></span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319111158288-87c580.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>注意多行或单行都可以用<code>in</code>；单行只能用<code>=</code></p>
</blockquote>
<p><strong>查询入职日期是 "2006-01-01" 之后的员工信息 ,
及其部门信息</strong></p>
<p>查询入职日期是 "2006-01-01" 之后的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span></span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319111539314-b9547f.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>查询其部门信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> entrydate <span class="operator">&gt;</span> <span class="string">&#x27;2006-01-01&#x27;</span>) a <span class="keyword">left</span> <span class="keyword">join</span> dept b <span class="keyword">on</span> a.dept_id <span class="operator">=</span> b.id</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319112032435-6183c9.png"  width="95%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h2 id="练习">练习</h2>
<p>数据准备</p>
<p>在<code>emp</code>，<code>dept</code>表上加入<code>salgrade</code>表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> salgrade(</span><br><span class="line">grade <span class="type">int</span>,</span><br><span class="line">losal <span class="type">int</span>,</span><br><span class="line">hisal <span class="type">int</span></span><br><span class="line">) comment <span class="string">&#x27;薪资等级表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">0</span>,<span class="number">3000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">2</span>,<span class="number">3001</span>,<span class="number">5000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">3</span>,<span class="number">5001</span>,<span class="number">8000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">4</span>,<span class="number">8001</span>,<span class="number">10000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">5</span>,<span class="number">10001</span>,<span class="number">15000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">6</span>,<span class="number">15001</span>,<span class="number">20000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">7</span>,<span class="number">20001</span>,<span class="number">25000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> salgrade <span class="keyword">values</span> (<span class="number">8</span>,<span class="number">25001</span>,<span class="number">30000</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>查询员工的姓名、年龄、职位、部门信息 （隐式内连接）</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319112538866-2de97d.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询年龄小于30岁的员工的姓名、年龄、职位、部门信息（显式内连接）</li>
</ul>
<p>表：emp,dept</p>
<p>连接条件：emp.dept_id = dept.id</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319112828555-8dc43b.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询拥有员工的部门ID、部门名称</li>
</ul>
<p>表：emp,dept</p>
<p>连接条件：emp.dept_id = dept.id</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> (emp.dept_id), dept.name <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dept_id <span class="operator">=</span> dept.id</span><br><span class="line"><span class="keyword">where</span> emp.dept_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>DISTINCT为去重函数</p>
</blockquote>
<ul>
<li>查询所有年龄大于40岁的员工, 及其归属的部门名称;
如果员工没有分配部门, 也需要展示出来(外连接)</li>
</ul>
<p>表：emp,dept</p>
<p>连接条件：emp.dept_id = dept.id</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> emp.<span class="operator">*</span>, dept.name <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dept_id <span class="operator">=</span> dept.id <span class="keyword">where</span> emp.age <span class="operator">&gt;</span> <span class="number">40</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>没有jion就不用on来连接条件；</p>
<p>使用左连接来保证左表数据的完整；</p>
</blockquote>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319114104485-58f8de.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询所有员工的工资等级</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> emp.name, salgrade.grade <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> salgrade <span class="keyword">on</span> emp.salary <span class="keyword">between</span> salgrade.losal <span class="keyword">and</span> salgrade.hisal;</span><br><span class="line"><span class="comment">-- or</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span> , s.grade , s.losal, s.hisal <span class="keyword">from</span> emp e , salgrade s <span class="keyword">where</span> e.salary</span><br><span class="line"><span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br><span class="line"><span class="comment">-- or</span></span><br><span class="line"><span class="keyword">select</span> e.<span class="operator">*</span> , s.grade , s.losal, s.hisal <span class="keyword">from</span> emp e , salgrade s <span class="keyword">where</span> e.salary <span class="operator">&gt;=</span></span><br><span class="line">s.losal <span class="keyword">and</span> e.salary <span class="operator">&lt;=</span> s.hisal;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319115936357-76df16.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>但是为什么下面的是不行的？</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,salgrade <span class="keyword">where</span> salgrade.losal<span class="operator">&lt;=</span>emp.salary<span class="operator">&lt;=</span>salgrade.hisal;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319120840775-4e857d.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>注意这里<code>...BETWEEN ...AND ...</code>并不等于<code>...&lt;=...&lt;=...</code>;在sql中<code>...&lt;=...&lt;=...</code>是错误的；正确的替代应该是：<code>...&gt;=... AND...&lt;=...</code></p>
</blockquote>
<ul>
<li>查询 "研发部" 所有员工的信息及 工资等级</li>
</ul>
<p>表：<code>emp</code>,<code>dept</code>，<code>salgrade</code></p>
<p>连接条件：<code>emp.dept_id = dept.id</code>,<code>emp.salart bewteen salgrade.losal and salgrade.hisal</code></p>
<p>查询条件：dept.name = '研发部'</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> salgrade <span class="keyword">on</span> emp.salary <span class="keyword">between</span> salgrade.losal <span class="keyword">and</span> salgrade.hisal ) a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept b <span class="keyword">on</span> a.dept_id <span class="operator">=</span> b.id <span class="keyword">where</span> b.name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span></span><br><span class="line"><span class="comment">-- or</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept,salgrade</span><br><span class="line"><span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id</span><br><span class="line">  <span class="keyword">and</span> emp.salary <span class="keyword">between</span> salgrade.losal <span class="keyword">and</span> salgrade.hisal</span><br><span class="line">    <span class="keyword">and</span> dept.name <span class="operator">=</span> <span class="string">&#x27;研发部&#x27;</span></span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319140603799-fa147d.png"  width="95%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询 "研发部" 员工的平均工资</li>
</ul>
<p>询 "研发部" 员工的工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> salary <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id <span class="keyword">and</span> dept.name <span class="operator">=</span> &quot;研发部&quot;</span><br></pre></td></tr></table></figure>
<p>查询 "研发部" 员工的平均工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(emp.salary) <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id <span class="keyword">and</span> dept.name <span class="operator">=</span> &quot;研发部&quot;;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319141018223-29c884.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询工资比 "灭绝" 高的员工信息</li>
</ul>
<p>子查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> (<span class="keyword">select</span> salary <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="operator">=</span> &quot;灭绝&quot; ) </span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319141215414-a76116.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询比平均薪资高的员工信息</li>
</ul>
<p>查询平均薪资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(emp.salary) <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure>
<p>查询比平均薪资高的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> salary <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(emp.salary) <span class="keyword">from</span> emp);</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319141518476-b0472c.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>查询低于本部门平均工资的员工信息</p>
<p>查询低于本部门平均工资</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> dept.name,<span class="built_in">avg</span>(emp.salary) <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dept_id <span class="operator">=</span> dept.id <span class="keyword">group</span> <span class="keyword">by</span> dept.name;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319142516299-431117.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>查询低于本部门平均工资的员工信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp,dept,(<span class="keyword">select</span> dept.name,<span class="built_in">avg</span>(emp.salary) dept_avg <span class="keyword">from</span> emp <span class="keyword">left</span> <span class="keyword">join</span> dept <span class="keyword">on</span> emp.dept_id <span class="operator">=</span> dept.id <span class="keyword">group</span> <span class="keyword">by</span> dept.name) a</span><br><span class="line"><span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id</span><br><span class="line">  <span class="keyword">and</span> a.name <span class="operator">=</span> dept.name</span><br><span class="line"><span class="keyword">and</span> emp.salary <span class="operator">&gt;</span> a.dept_avg</span><br><span class="line"><span class="comment">-- or</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp a <span class="keyword">where</span> salary <span class="operator">&lt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(salary) <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> a.dept_id)</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319142539551-dc8b30.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>第二条更好</p>
<p>第二个的逻辑是：首先知道固定部门id下各部门的平均薪资是多少</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(salary) <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<p>接着通过子查询让最后的部门id变动起来</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp a <span class="keyword">where</span> salary <span class="operator">&lt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(salary) <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> a.dept_id)</span><br></pre></td></tr></table></figure>
<p>通过别名为a的emp表来变化a.dept_id，从而控制对不同的部门的平均薪资进行比较；也就是在每个原始的emp数据行之后加入对应部门的平均薪资，并判断是否小于平均薪资，保留符合条件的数据行；</p>
<ul>
<li>查询所有的部门信息, 并统计部门的员工人数</li>
</ul>
<p>查询指定的部门id的部门人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319152652105-0812db.png"  width="35%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>在emp表之后统计相应员工所属部门的人员总数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> a.dept_id) <span class="keyword">from</span> emp a</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319152715365-373c2f.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>通过部门id，找到部门名称，通过distinct去重查找部门人数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> b.name,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> a.dept_id) <span class="keyword">from</span> emp a,dept b <span class="keyword">where</span> a.dept_id <span class="operator">=</span> b.id</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319152732912-602d66.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>由于设置了<code>dept_id = a.dept_id</code>，emp表中没有人事部这个id，所以就不会显示这条数据；</p>
<p>或者简化查找部门id的过程，直接从dept表中查找部门名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> dept.name,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> dept.id) <span class="keyword">from</span> dept</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319153119535-937684.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>或使用窗口函数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> dept.name,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> emp.dept_id) <span class="keyword">from</span> emp,dept <span class="keyword">where</span> emp.dept_id <span class="operator">=</span> dept.id;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319153638501-bcc612.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<ul>
<li>查询所有学生的选课情况, 展示出学生名称, 学号, 课程名称</li>
</ul>
<p>表: student , course , student_course</p>
<p>连接条件: student.id = student_course.studentid , course.id =
student_course.courseid</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s.name,s.no,c.name</span><br><span class="line"><span class="keyword">from</span> course c,student_course sc,student s</span><br><span class="line"><span class="keyword">where</span> sc.studentid <span class="operator">=</span> s.id</span><br><span class="line"><span class="keyword">and</span> sc.courseid <span class="operator">=</span> c.id</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319154435772-6e0764.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h2 id="dql中where和on的区别">DQL中WHERE和ON的区别</h2>
<p>首先创建两张表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建表 main</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> main (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    gender <span class="type">CHAR</span>(<span class="number">1</span>),</span><br><span class="line">    age <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据到表 main</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> main (id, name, gender, age) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">21</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">22</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;翠花&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;如花&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;春花&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表 ext</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ext (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    address <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据到表 ext</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ext (id, address) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;杭州&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;天津&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;南昌&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;合肥&#x27;</span>),</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;上海&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p><code>MAIN</code>表</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319155725783-3d22d7.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p><code>EXT</code>表</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319155815927-2ec433.png"  width="55%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>现在需要查询地址不为杭州的<code>main</code>和<code>ext</code>表中的所有数据,使用on进行筛选</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> main <span class="keyword">left</span> <span class="keyword">join</span>  ext <span class="keyword">on</span> main.id <span class="operator">=</span> ext.id <span class="keyword">and</span> ext.address <span class="operator">&lt;&gt;</span> <span class="string">&#x27;杭州&#x27;</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319160104742-90d11b.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>使用where进行筛选</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> main <span class="keyword">left</span> <span class="keyword">join</span>  ext <span class="keyword">on</span> main.id <span class="operator">=</span> ext.id <span class="keyword">where</span> ext.address <span class="operator">&lt;&gt;</span> <span class="string">&#x27;杭州&#x27;</span>;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319160205053-912446.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>可以发现有关李四的那一条main表中的信息不见了</p>
<p>这里就可以发现where与on的运行逻辑不同，以下为<code>outer join</code>外连接语句的执行顺序：</p>
<ol type="1">
<li>先对两个表执行交叉连接（笛卡尔积）</li>
<li>应用on筛选器</li>
<li>添加外部行</li>
<li>应用where筛选器</li>
</ol>
<p>写出每个顺序的结果展示</p>
<h3 id="笛卡尔积">笛卡尔积</h3>
<p><code>MAIN</code>与<code>EXT</code>表的笛卡尔积</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319160627388-ba449b.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="on筛选">ON筛选</h3>
<p>可以看到我们第一个语句的on筛选条件是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">on</span> main.id <span class="operator">=</span> ext.id <span class="keyword">and</span> ext.address <span class="operator">&lt;&gt;</span> <span class="string">&#x27;杭州&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>那么就筛选出了以下几个数据行</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319160841726-2454c5.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>我们第二个语句的on筛选条件是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">on</span> main.id <span class="operator">=</span> ext.id</span><br></pre></td></tr></table></figure>
<p>筛选出了以下几个数据行</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319161020906-ba5e3f.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="添加外部行">添加外部行</h3>
<p>由于这里是左连接，要保证左表的数据不能丢失</p>
<p>对于第一个语句中，左表<code>main</code>的数据缺失，所以要将其补回，没法匹配到的数据用<code>null</code>补足</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319160104742-90d11b.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>第二个数据，左表数据没有缺失，不用添加外部行，保持原样</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319161020906-ba5e3f.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h3 id="where筛选">WHERE筛选</h3>
<p>第一种语法中没有where筛选，保持原样输出</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319160104742-90d11b.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>第二种语法中，使用where筛选，将地址不属于杭州的数据筛选出来剔除，返回结果为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">where</span> ext.address <span class="operator">&lt;&gt;</span> <span class="string">&#x27;杭州&#x27;</span></span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250319161456215-b2d0ec.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<blockquote>
<p>所以可以看出，where和on的主要区别在于筛选的先后顺序不同；但是这个区别仅仅只存在于outer
jion之中（主要是因为有添加外部行这个步骤），cross join 和 inner
join都没有这个性质</p>
</blockquote>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo设置代码块折叠</title>
    <url>/2025/03/16/hexo%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%A0%81%E5%9D%97%E5%B1%95%E5%BC%80/</url>
    <content><![CDATA[<h1 id="添加-code-unfold.js">添加 code-unfold.js</h1>
<p>按照下面的内容，创建<code>code-unfold.js</code>文件，放置在<code>themes/next/source/js/code-unfold.js</code>中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">CODE_MAX_HEIGHT</span> = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">var</span> containers = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 展开</span></span><br><span class="line">$(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.js_unfold_code_btn&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">closest</span>(<span class="string">&#x27;.js_highlight_container&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 收起</span></span><br><span class="line">$(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="string">&#x27;.js_retract_code_btn&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> $container = $(<span class="variable language_">this</span>).<span class="title function_">closest</span>(<span class="string">&#x27;.js_highlight_container&#x27;</span>).<span class="title function_">removeClass</span>(<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> winTop = $(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>();</span><br><span class="line">  <span class="keyword">var</span> offsetTop = $container.<span class="title function_">offset</span>().<span class="property">top</span>;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&#x27;top&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (winTop &gt; offsetTop) &#123;</span><br><span class="line">    <span class="comment">// 设置滚动条位置</span></span><br><span class="line">    $(<span class="string">&#x27;body, html&#x27;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line">      <span class="attr">scrollTop</span>: $container.<span class="title function_">offset</span>().<span class="property">top</span> - <span class="variable constant_">CODE_MAX_HEIGHT</span></span><br><span class="line">    &#125;, <span class="number">600</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 滚动事件，触发动画效果</span></span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">on</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> scrollTop = $(<span class="variable language_">window</span>).<span class="title function_">scrollTop</span>();</span><br><span class="line">  <span class="keyword">var</span> temp = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; containers.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = containers[i];</span><br><span class="line">    <span class="keyword">var</span> &#123; $container, height, $hide, hasHorizontalScrollbar &#125; = item;</span><br><span class="line">    <span class="keyword">if</span> ($container.<span class="title function_">closest</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果 $container 元素已经不在页面上, 则删除该元素</span></span><br><span class="line">      <span class="comment">// 防止pjax页面跳转之后，元素未删除</span></span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp.<span class="title function_">push</span>(item);</span><br><span class="line">    <span class="keyword">if</span> (!$container.<span class="title function_">hasClass</span>(<span class="string">&#x27;on&#x27;</span>)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> offsetTop = $container.<span class="title function_">offset</span>().<span class="property">top</span>;</span><br><span class="line">    <span class="keyword">var</span> hideBtnHeight = $hide.<span class="title function_">outerHeight</span>();</span><br><span class="line">    <span class="comment">// 减去按钮高度，减去底部滚动条高度</span></span><br><span class="line">    <span class="keyword">var</span> maxTop = <span class="built_in">parseInt</span>(height - (hasHorizontalScrollbar ? <span class="number">17</span> : <span class="number">0</span>) - hideBtnHeight);</span><br><span class="line">    <span class="keyword">let</span> top = <span class="built_in">parseInt</span>(</span><br><span class="line">      <span class="title class_">Math</span>.<span class="title function_">min</span>(</span><br><span class="line">        <span class="title class_">Math</span>.<span class="title function_">max</span>(scrollTop - offsetTop, <span class="number">0</span>), <span class="comment">// 如果小于 0 ，则取 0</span></span><br><span class="line">        maxTop,<span class="comment">// 如果大于 height ，则取 height</span></span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 根据 sin 曲线设置&quot;收起代码&quot;位置</span></span><br><span class="line">    <span class="keyword">var</span> halfHeight = <span class="built_in">parseInt</span>($(<span class="variable language_">window</span>).<span class="title function_">height</span>() / <span class="number">2</span> * <span class="title class_">Math</span>.<span class="title function_">sin</span>((top / maxTop) * <span class="number">90</span> * (<span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>/<span class="number">360</span>)));</span><br><span class="line">    $hide.<span class="title function_">css</span>(<span class="string">&#x27;top&#x27;</span>, <span class="title class_">Math</span>.<span class="title function_">min</span>(top + halfHeight, maxTop));</span><br><span class="line">  &#125;</span><br><span class="line">  containers = temp;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加隐藏容器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addCodeWrap</span>(<span class="params">$node</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> $container = $node.<span class="title function_">wrap</span>(<span class="string">&#x27;&lt;div class=&quot;js_highlight_container highlight-container&quot;&gt;&lt;div class=&quot;highlight-wrap&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>).<span class="title function_">closest</span>(<span class="string">&#x27;.js_highlight_container&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 底部 &quot;展开代码&quot; 与 侧边栏 &quot;收起代码&quot;</span></span><br><span class="line">  <span class="keyword">var</span> $btn = $(<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;highlight-footer&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;a class=&quot;js_unfold_code_btn show-btn&quot; href=&quot;javascript:;&quot;&gt;展开代码&lt;i class=&quot;fa fa-angle-down&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;a class=&quot;js_retract_code_btn hide-btn&quot; href=&quot;javascript:;&quot;&gt;&lt;i class=&quot;fa fa-angle-up&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;收起代码&lt;/a&gt;</span></span><br><span class="line"><span class="string">  `</span>);</span><br><span class="line"></span><br><span class="line">  $container.<span class="title function_">append</span>($btn);</span><br><span class="line">  <span class="keyword">return</span> $container;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">codeUnfold</span> () &#123;</span><br><span class="line">  $(<span class="string">&#x27;.highlight&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 防止重复渲染</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">__render__</span> === <span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">__render__</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> $this = $(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">var</span> height = $(<span class="variable language_">this</span>).<span class="title function_">outerHeight</span>();</span><br><span class="line">    <span class="keyword">if</span> (height &gt; <span class="variable constant_">CODE_MAX_HEIGHT</span>) &#123;</span><br><span class="line">      <span class="comment">// 添加展开&amp;收起容器</span></span><br><span class="line">      <span class="keyword">var</span> $container = <span class="title function_">addCodeWrap</span>($this, height);</span><br><span class="line">      containers.<span class="title function_">push</span>(&#123;</span><br><span class="line">        $container,</span><br><span class="line">        height,</span><br><span class="line">        <span class="attr">$hide</span>: $container.<span class="title function_">find</span>(<span class="string">&#x27;.js_retract_code_btn&#x27;</span>),</span><br><span class="line">        <span class="attr">hasHorizontalScrollbar</span>: <span class="variable language_">this</span>.<span class="property">scrollWidth</span> &gt; <span class="variable language_">this</span>.<span class="property">offsetWidth</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="引用-code-unfold.js">引用 code-unfold.js</h1>
<p>修改文件<code>themes/next/layout/_scripts/index.swig</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 在最后添加  </span><br><span class="line">&#123;&#123;- next_js(<span class="string">&#x27;code-unfold.js&#x27;</span>) &#125;&#125;  </span><br></pre></td></tr></table></figure>
<p>找到文件<code>themes/next/source/js/next-boot.js</code>，添加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">NexT</span>.<span class="property">boot</span>.<span class="property">refresh</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="comment">// 添加一行代码  </span></span><br><span class="line">  <span class="title function_">codeUnfold</span>()  </span><br><span class="line">    </span><br><span class="line">  <span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<h1 id="添加样式">添加样式</h1>
<p>按照以下内容，创建<code>theme/next/source/css/_common/components/highlight.styl</code>文件</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 展开收起效果</span></span><br><span class="line">.highlight<span class="operator">-</span>container</span><br><span class="line">  position: relative</span><br><span class="line">  background<span class="operator">-</span>color: highlight<span class="operator">-</span>background</span><br><span class="line">  <span class="operator">&amp;</span>.on</span><br><span class="line">    .highlight<span class="operator">-</span>footer</span><br><span class="line">      display: none</span><br><span class="line">    .hide<span class="operator">-</span>btn</span><br><span class="line">      display: flex</span><br><span class="line">    .highlight<span class="operator">-</span>wrap</span><br><span class="line">      max<span class="operator">-</span>height: none</span><br><span class="line">  .highlight<span class="operator">-</span>wrap</span><br><span class="line">    overflow: hidden</span><br><span class="line">    max<span class="operator">-</span>height: 200px</span><br><span class="line">  .highlight<span class="operator">-</span>footer</span><br><span class="line">    position absolute</span><br><span class="line">    width: <span class="number">100</span><span class="operator">%</span></span><br><span class="line">    left: <span class="number">0</span></span><br><span class="line">    bottom: <span class="number">0</span></span><br><span class="line">    height: 60px</span><br><span class="line">    background<span class="operator">-</span>image: &#x27;linear<span class="operator">-</span>gradient(<span class="operator">-</span>180deg, rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>) <span class="number">0</span><span class="operator">%</span>, <span class="operator">%</span>s <span class="number">65</span><span class="operator">%</span>)&#x27; <span class="operator">%</span> highlight<span class="operator">-</span>background;</span><br><span class="line">    text<span class="operator">-</span>align: center</span><br><span class="line">  .show<span class="operator">-</span>btn</span><br><span class="line">    font<span class="operator">-</span>size: 12px</span><br><span class="line">    color: #fff</span><br><span class="line">    position: absolute</span><br><span class="line">    left: <span class="number">50</span><span class="operator">%</span></span><br><span class="line">    transform: translateX(<span class="operator">-</span><span class="number">50</span><span class="operator">%</span>)</span><br><span class="line">    bottom: <span class="number">0</span></span><br><span class="line">    line<span class="operator">-</span>height: 2em</span><br><span class="line">    text<span class="operator">-</span>decoration: none</span><br><span class="line">    padding: <span class="number">0</span> <span class="number">0</span>.8em</span><br><span class="line">    text<span class="operator">-</span>align: center</span><br><span class="line">    border<span class="operator">-</span>radius: 4px 4px <span class="number">0</span></span><br><span class="line">    <span class="operator">&amp;</span>:hover</span><br><span class="line">      text<span class="operator">-</span>decoration: none</span><br><span class="line">  .hide<span class="operator">-</span>btn</span><br><span class="line">    color: #fff</span><br><span class="line">    font<span class="operator">-</span>size: 12px</span><br><span class="line">    width: 22px</span><br><span class="line">    position: absolute</span><br><span class="line">    left: <span class="operator">-</span>21px</span><br><span class="line">    top: <span class="number">0</span></span><br><span class="line">    line<span class="operator">-</span>height: 1em</span><br><span class="line">    text<span class="operator">-</span>decoration: none</span><br><span class="line">    text<span class="operator">-</span>align: center</span><br><span class="line">    display: none</span><br><span class="line">    flex<span class="operator">-</span>direction: column</span><br><span class="line">    background<span class="operator">-</span>color: highlight<span class="operator">-</span>background</span><br><span class="line">    border<span class="operator">-</span>radius: 4px <span class="number">0</span> <span class="number">0</span> 4px</span><br><span class="line">    padding: <span class="number">0</span>.1em <span class="number">0</span> <span class="number">0</span>.6em</span><br><span class="line">    transition: top ease <span class="number">0</span>.35s</span><br><span class="line">  .fa<span class="operator">-</span>angle<span class="operator">-</span>up,</span><br><span class="line">  .fa<span class="operator">-</span>angle<span class="operator">-</span>down</span><br><span class="line">    font<span class="operator">-</span>style: normal</span><br><span class="line">    color: #fff</span><br><span class="line">  .fa<span class="operator">-</span>angle<span class="operator">-</span>up:before</span><br><span class="line">    content:<span class="string">&quot;\f106&quot;</span></span><br><span class="line">  .fa<span class="operator">-</span>angle<span class="operator">-</span>down:before</span><br><span class="line">    content:<span class="string">&quot;\f107&quot;</span></span><br><span class="line">    margin<span class="operator">-</span>left: <span class="number">0</span>.5em</span><br><span class="line">  .js_unfold_code_btn, .js_retract_code_btn</span><br><span class="line">    background: rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>)</span><br><span class="line">    border<span class="operator">-</span>bottom: none <span class="operator">!</span>important</span><br><span class="line">    <span class="operator">&amp;</span>:hover</span><br><span class="line">      border<span class="operator">-</span>bottom<span class="operator">-</span>color: none <span class="operator">!</span>important</span><br></pre></td></tr></table></figure>
<h1 id="引用样式">引用样式</h1>
<p>找到文件
<code>themes/next/source/css/_common/components/components.styl</code>修改：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@import</span> <span class="string">&#x27;post&#x27;</span>;</span><br><span class="line"><span class="meta">@import</span> <span class="string">&#x27;pages&#x27;</span>;</span><br><span class="line"><span class="meta">@import</span> <span class="string">&#x27;third-party&#x27;</span>;</span><br><span class="line"><span class="comment">// 添加这一行，不要加分号！！</span></span><br><span class="line"><span class="meta">@import</span> <span class="string">&#x27;highlight&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="打开-jquery">打开 jquery</h1>
<p>文章中或要打开<code>fancybox</code>就可以打开<code>jquery</code>，但是fancybox会和lazyload冲突；所以在vendors中设置打开mediumzoom的同时打开jquery，找到<code>themes\next\layout\_scripts\vendors.swig</code>，添加</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;<span class="operator">%-</span> <span class="keyword">if</span> theme.mediumzoom <span class="operator">%</span>&#125;</span><br><span class="line">  &#123;<span class="operator">%-</span> <span class="keyword">set</span> js_vendors <span class="operator">=</span> js_vendors <span class="operator">|</span> attr(&#x27;mediumzoom&#x27;, &#x27;<span class="regexp">/js/</span>medium<span class="operator">-</span>zoom.min.js&#x27;) <span class="operator">%</span>&#125;</span><br><span class="line"><span class="comment">// 添加</span></span><br><span class="line">  &#123;<span class="operator">%-</span> <span class="keyword">set</span> js_vendors <span class="operator">=</span> js_vendors <span class="operator">|</span> attr(&#x27;jquery&#x27;, &#x27;<span class="regexp">/js/</span>jquery.min.js&#x27;) <span class="operator">%</span>&#125;</span><br><span class="line">&#123;<span class="operator">%-</span> endif <span class="operator">%</span>&#125;</span><br></pre></td></tr></table></figure>
<p>保存文件</p>
<p>接着进行hexo-clean；hexo-g即可成功部署</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/03/image-20250316114934480-3c1ab3.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>可在<code>themes/next/source/js/code-unfold.js</code>中设置<code>CODE_MAX_HEIGHT</code>的大小来决定超过多长的代码块需要进行折叠</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Statistical learning with Python</title>
    <url>/2025/01/15/Statistical-learning-with-Python/</url>
    <content><![CDATA[<h1 id="introduction-to-regression-models">Introduction to Regression
Models</h1>
<p>我们输入的向量由各个特征<span
class="math inline">\(X_{i}\)</span>组成</p>
<p><span class="math display">\[
X=
\begin{bmatrix}
X_{1}\\
X_{2}\\
X_{3}
\end{bmatrix}
\]</span> 现在我们的模型可以写成<span class="math inline">\(Y =
f(x)+\epsilon\)</span></p>
<p><span
class="math inline">\(f(x)\)</span>永远不可能完美的拟合Y，总会有一些误差，这些总的误差我们用<span
class="math inline">\(\epsilon\)</span>来表示</p>
<p>在一个散点图中我们要计算<span
class="math inline">\(f(4)\)</span>，即在<span class="math inline">\(X =
4\)</span>的情况下对y进行预测，我们有以下这种预测方式： <span
class="math display">\[
f(4) = E(Y|X=4)
\]</span> <span class="math inline">\(E(Y|X=4)\)</span>即为<span
class="math inline">\(X = 4\)</span>时所有Y的值的期望</p>
<p>根据以上的定义，<span class="math inline">\(f(x)\)</span>可写为 <span
class="math display">\[
f(x) = f(x_{1},x_{2},x_{3}) = E(Y|X_{1} = x_{1},X_{2} = x_{2},X_{3} =
x_{3}),
\\其中x =\begin{bmatrix}
x_{1}\\
x_{2}\\
x_{3}
\end{bmatrix}
\]</span> 最理想的<span
class="math inline">\(f(x)\)</span>即为可以使得<span
class="math inline">\(E[(Y-g(x))^2|X=x]\)</span>在<span
class="math inline">\(X=x\)</span>最小的函数<span
class="math inline">\(g(x)\)</span></p>
<p><span class="math inline">\(\epsilon=Y-f(x)\)</span>是理想函数<span
class="math inline">\(f(x)\)</span>依然无法捕捉到的误差。</p>
<p>对于任何<span class="math inline">\(f(x)\)</span>的估计<span
class="math inline">\(\hat{f}(x)\)</span>都有： <span
class="math display">\[
\begin{eqnarray}    
E[(Y-\hat{f}(x))^2|X=x]&amp;=&amp;E[(\epsilon+f(x)-\hat{f}(x))^2|X=x]     \\
&amp;=&amp;E(\epsilon^2|X=x)+2E(\epsilon|X=x)E([f(x)-\hat{f}(x)]|X=x)
+E\{[f(x)-\hat{f}(x)]^2|X=x\}\nonumber    \\
&amp;\overset{E(\epsilon)=0}{=}&amp;Var(\epsilon|X=x)+E\{[f(x)-\hat{f}(x)]^2|X=x\}
\end{eqnarray}
\]</span> 其中<span
class="math inline">\(Var(\epsilon^2|X=x)\)</span>是不可减小的，但是我们可以通过减小<span
class="math inline">\(E\{[f(x)-\hat{f}(x)]^2|X=x\}\)</span>来增加预测的准确性</p>
<p>有时在给定的<span
class="math inline">\(X=x\)</span>处不能求平均值，比如不存在<span
class="math inline">\(X=x\)</span>处的某个<span
class="math inline">\(Y\)</span>值，这时可以放松求均值的区间，来求<span
class="math inline">\(X=x\)</span>处的条件期望： <span
class="math display">\[
\hat{f}(x) = Ave(Y|X \in \mathcal{N}(x)),\\where~ \mathcal{N}(x)
~is~some~neighborhood~of~x
\]</span></p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/01/image-20250115150506998-3c5331.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>例如在上图中，在X=4
这点上没有具体的Y的值，这时候可以放松X=4的条件，以左右两条虚线中的值来代替X=4上的Y的值作为<span
class="math inline">\(E(Y|X=4)\)</span>.</p>
<h1 id="dimensionality-and-structured-models">Dimensionality and
Structured Models</h1>
<p>当变量的维数较少，样本量较大时，最近邻法的效果不错，但是当维数增多时，最近邻法就不再适用了，这里有一个Curse
of Dimensionality的说法</p>
<h2 id="curse-of-dimensionality">Curse of Dimensionality</h2>
<p><img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/01/image-20250115155341641-de25bf.png" /></p>
<p>图中可以看到。</p>
<ul>
<li>要对单一的维度（<span
class="math inline">\(X_1\)</span>）取10%的最近邻数据做平均，只要取虚线之间的<span
class="math inline">\(X_1\)</span>数据即可。</li>
<li>要对两个维度：<span
class="math inline">\(X_1、X_2\)</span>做最近邻取10%的数据（就是一个圆），我们需要在左图的圈中求<span
class="math inline">\(X_1、X_2\)</span>的平均，可以看到，当维度增加时，需要取数据的空间面积会增大许多。</li>
<li>右图中表示了当最近邻的取数（Fraction of
volume）增大时，不同维度下的空间半径的变化情况。当Fraction of
volume一定时，比如取10%，若此维度为10，那么半径已经超过了1，而每个数据的范围只在[-1,1]，已经取不到所有的数据，所以对于高维数据来说，最近邻法是不适用的</li>
</ul>
<h1 id="model-selection-and-bias-variance-trand-off">Model Selection and
Bias Variance Trand-off</h1>
<h2 id="measuring-the-quality-of-fit">Measuring the Quality of Fit</h2>
<p>理想的拟合函数<span class="math inline">\(f(x)\)</span>的估计值<span
class="math inline">\(\hat{f}(x)\)</span>的好坏，可以用MSE来表示，公式如下
<span class="math display">\[
\text{MSE} = \frac{1}{n} \sum_{i=1}^{n}(y_i - \hat{f}(x_i))^2
\]</span> 这个式子表示了各个真实的点<span
class="math inline">\((x_i,y_i)\)</span>与估计出的点(<span
class="math inline">\(x_i,\hat{f}(x_i)\)</span>)的平方差之和</p>
<p>对于训练集的MSE，即<span
class="math inline">\(MSE_{tr}\)</span>,我们不是很关心，因为<span
class="math inline">\(MSE_{tr}\)</span>是用我们已知的数据计算出来的，我们想知道的是使用<span
class="math inline">\(\hat{f}(x)\)</span>所计算的我们未知的数据时的MSE。比如我们向通过历史的股票数据来预测将来的股票价格一样，我们感兴趣的是将来的股票价格。</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/01/image-20250116145340211-de1554.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>上图为不同的拟合曲线，和曲线的MSE。左图中黑色为理想的<span
class="math inline">\(f(x)\)</span>，其余均为拟合的曲线<span
class="math inline">\(\hat{f}(x_i)\)</span>;右图红色的为曲线的<span
class="math inline">\(MSE_{te}\)</span>,灰色的为<span
class="math inline">\(MSE_{tr}\)</span>。</p>
<p>从图中可以看出随着Flexibility的增加（这里称之为灵活度，和自由度相关，意味着模型中的参数越多），模型的<span
class="math inline">\(MSE_{tr}\)</span>下降的很快，但这并不代表灵活度越高的模型，或者<span
class="math inline">\(MSE_{tr}\)</span>越低的模型，他们的拟合效果就越好；从<span
class="math inline">\(MSE_{te}\)</span>上可以看出，随着自由度的增加，<span
class="math inline">\(MSE_{te}\)</span>与Flexibility的曲线渐渐变为U字型，意味着灵活度越高的模型在训练集上的表现可能非常优秀，但是在测试集上的表现糟糕。这种情况成为过拟合（overfitting）。</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/01/image-20250116161048304-9fa7bd.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/01/image-20250116161644740-e89b08.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>随着Flexibility的增加，<span
class="math inline">\(MSE_{te}\)</span>总是呈现U形，<span
class="math inline">\(MSE_{tr}\)</span>总是呈下降趋势。这是统计学习的特性，与数据集无关。</p>
<p>在选取最优模型的时候，不能一味地选取<span
class="math inline">\(MSE_{tr}\)</span>小的模型，因为在模型拟合直接或间接的让<span
class="math inline">\(MSE_{tr}\)</span>达到最小，需要使用其他方法，例如交叉验证来选择最优的模型。</p>
<h2 id="the-bias-variance-trade-off">The Bias-Variance Trade-Off</h2>
<p>偏差和方差可以具体解释<span
class="math inline">\(MSE_{te}\)</span>为什么总是呈现U形，<span
class="math inline">\(MSE_{te}\)</span>的期望可以由以下公式计算，假设我们要估计<span
class="math inline">\(\hat{f}(x_0)\)</span> <span
class="math display">\[
\begin{eqnarray}   
E\left(y_{0}-\hat{f}\left(x_{0}\right)\right)^{2}&amp;=&amp;E[(\epsilon+f(x_0)-\hat{f}(x_0))^2]     \\
&amp;=&amp;E(\epsilon^2)+2E(\epsilon)E([f(x_0)-\hat{f}(x_0)])
+E\{[f(x_0)-\hat{f}(x_0)]^2\}\nonumber    \\
&amp;\overset{E(\epsilon)=0}{=}&amp;Var(\epsilon)+E\{[f(x_0)-\hat{f}(x_0)]^2\}\\
&amp;=&amp;Var(\epsilon)+f^2(x_0)-2f(x_0)E[\hat{f}(x_0)]+E[\hat{f}(x_0)^2]
\\
&amp;=&amp;Var(\epsilon)+E[\hat{f}(x_0)^2]-E^2[\hat{f}(x_0)]+E^2[\hat{f}(x_0)]-2f(x_0)E[\hat{f}(x_0)]+f^2(x_0)\\
&amp;=&amp;Var(\epsilon)+VAR(\hat{f}(x_0))+[E(\hat{f}(x_0))-f(x_0)]^2\\
&amp;\overset{E(\hat{f}(x_0))-f(x_0))=Bias(\hat{f}(x_0))}{=}&amp;Var(\epsilon)+VAR(\hat{f}(x_0))+Bias^2[\hat{f}(x_0)]
\end{eqnarray}
\]</span> 可以看到<span
class="math inline">\(MSE_{te}\)</span>的期望分解为三部分,误差的方差，<span
class="math inline">\(\hat{f}(x_0)\)</span>的方差，<span
class="math inline">\(\hat{f}(x_0)\)</span>的偏差平方；</p>
<ul>
<li><span
class="math inline">\(\hat{f}(x_0)\)</span>的方差大意味着如果训练集中的数据有小幅度的变动，那么<span
class="math inline">\(\hat{f}(x_0)\)</span>的变化会很大</li>
<li><span
class="math inline">\(\hat{f}(x_0)\)</span>的偏差平方小意味着模型曲线对训练集中的数据拟合程度较高。</li>
</ul>
<p>通常来说，当模型的灵活度越高，方差就会增加，偏差平方就会变小；这样就可以解释为什么<span
class="math inline">\(MSE_{te}\)</span>总是呈现U形:</p>
<blockquote>
<p>这种<span
class="math inline">\(MSEte\)</span>的U型曲线的升降原因在于<span
class="math inline">\(f\)</span>的估计量<span
class="math inline">\(\hat{f}(x)\)</span>方差和偏差平方的变化；当灵活度增加时，VAR增加，Bias快速减少，根据公式，<span
class="math inline">\(MSEte\)</span>减少；
随着灵活度的再增加，Bias不在急剧减少，VAR增加，<span
class="math inline">\(MSEte\)</span>在某个点达到最小值后开始上升，最终让<span
class="math inline">\(MSEte\)</span>与灵活度的曲线呈U形</p>
</blockquote>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2025/01/image-20250117160422457-8cd788.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>这三个图片就是不同自由度的不同的模型的<span
class="math inline">\(MSE_{te}\)</span>
Bias和VAR的对比图，可以看出随着自由度的增加，Bias总是先减少，VAR总是增加；但对于不同的模型，他们的减少和增加的速率不同，由于<span
class="math inline">\(MSE_{te}\)</span>是Bias的平方和VAR还有误差的方差之和（误差的方差为常数，在图中用水平虚线表示），最终导致他们最优的<span
class="math inline">\(MSE_{te}\)</span>(最小的<span
class="math inline">\(MSE_{te}\)</span>)不同。</p>
]]></content>
      <categories>
        <category>Statistical learning</category>
      </categories>
      <tags>
        <tag>Statistical learning</tag>
      </tags>
  </entry>
  <entry>
    <title>Git中含有大文件导致上传失败的解决方法</title>
    <url>/2025/01/12/Git%E4%B8%AD%E5%90%AB%E6%9C%89%E5%A4%A7%E6%96%87%E4%BB%B6%E5%AF%BC%E8%87%B4%E4%B8%8A%E4%BC%A0%E5%A4%B1%E8%B4%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>在git中上传大文件导致可能会导致上传失败，一般的情况是进行<code>commit</code>操作之后，在<code>push</code>的时候报错。但此时删除本地的大文件，文件还是在本地的工作区中，需要指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br></pre></td></tr></table></figure>
<p>撤销已经commit，但是没有push到远端的文件（仅撤销commit
保留add操作）</p>
<p>之后再次进行add+commit即可成功上传</p>
<p>对于已经push到远端的文件，可以通过：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<p>查看版本号，使用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --hard 版本号</span><br></pre></td></tr></table></figure>
<p>即可退回之前的版本，此命令会删除本地的文件，要慎重使用。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>双网卡使用情况</title>
    <url>/2024/12/10/%E5%8F%8C%E7%BD%91%E5%8D%A1%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<h1 id="双网卡使用情况">双网卡使用情况</h1>
<p>电脑有两个网卡，一个有线网卡一个无线网卡</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024/12/image-20241210114058234-710f67.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>在默认情况下，win11会给每个网卡的ip设置一个跃点数，跃点数越小，就优先使用该ip对应的网卡。</p>
<p>可以在<code>cmd</code>中输入</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">route <span class="built_in">print</span></span><br></pre></td></tr></table></figure>
<p>查看路由表，查看其中的ipv4路由表，可以看到最后一列的跃点数</p>
<p><img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024/12/image-20241210114604113-35afce.png" /></p>
<p>如果在默认情况下，系统会根据网速来自动调整跃点数</p>
<p><img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024/12/image-20241210114718465-140b99.png" /></p>
<p>昨天晚上我给电脑在连接wifi的情况下插上网线，右下角的网络图标显示宽带连接，但是没过一会，就又变成了wifi，我想系统不都是默认有线连接优先吗？，除非是当时有线连接的网络速度不如无线连接，这种优先级策略才导致了这种情况。</p>
<p>回头去尝试</p>
<ul>
<li>首先关闭wifi连接无线网络，试一试网速怎么样</li>
<li>若网速不正常（校园网有很多奇葩的设定，很可能会出现这种情况），那就万事大吉了</li>
<li>若网速正常，同时连接wifi和有线网络，看看是不是当时出现了什么错误，如果还是wifi优先，尝试调整优先级，方法如下</li>
</ul>
<p>打开控制面板-网络和internet-网络共享中心-更改适配器设置（左侧）</p>
<p><img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024/12/image-20241210115316619-d548f3.png" /></p>
<p>可以看到自己的网络连接情况</p>
<p>进入路由表查看有线网卡和无线网卡对应的优先级（网卡IP可以直接从设置连界面看到），然后右击设备-属性-internet协议版本4或（若支持ipv6）internet协议版本6-属性-高级-取消自动跃点-添加自己想要的跃点数</p>
<blockquote>
<p>网络是否支持ipv6，可以通过点击连接internet的设备-查看此连接状态</p>
<p><img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024/12/%E5%8A%A8%E7%94%BB2-70cd36.gif" /></p>
</blockquote>
<p>比如把无线网卡的跃点数设置为：80，那么在路由表中的该网卡跃点数就会160.</p>
<p><img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024/12/%E5%8A%A8%E7%94%BB2-d05061.gif" /></p>
<p>跃点数越小，优先等级越高，如果想使用双卡叠加，那么可以将两个网卡的跃点数设置为相同，具体可以参照:<a
href="https://www.zhihu.com/question/294289602/answer/2912972037">如何使用双网卡实现网速叠加？</a></p>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网卡</tag>
      </tags>
  </entry>
  <entry>
    <title>研究生数学建模比赛时间线</title>
    <url>/2024/11/13/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E6%97%B6%E9%97%B4%E7%BA%BF/</url>
    <content><![CDATA[<p>2024数学建模竞赛时间表</p>
<table>
<colgroup>
<col style="width: 18%" />
<col style="width: 8%" />
<col style="width: 3%" />
<col style="width: 3%" />
<col style="width: 3%" />
<col style="width: 3%" />
<col style="width: 4%" />
<col style="width: 23%" />
<col style="width: 32%" />
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">竞赛名称</th>
<th style="text-align: center;">竞赛时间</th>
<th style="text-align: center;">报名费</th>
<th style="text-align: center;">获奖率</th>
<th style="text-align: center;">级别</th>
<th style="text-align: center;">含金量</th>
<th>可否跨校</th>
<th style="text-align: center;">参赛对象</th>
<th style="text-align: center;">奖项设置</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">"华数杯”国际大学生数学建模竞赛</td>
<td style="text-align: center;">2月</td>
<td style="text-align: center;">200元</td>
<td style="text-align: center;">60%</td>
<td style="text-align: center;">省部级</td>
<td style="text-align: center;">★★★</td>
<td>否</td>
<td style="text-align: center;">普通高校全日制在校生</td>
<td
style="text-align: center;">特等奖5%、一等奖15%、二等奖30%、优秀奖若干</td>
</tr>
<tr class="even">
<td style="text-align: center;">美国大学生数学建模竞赛(MCM/ICM)</td>
<td style="text-align: center;">2月初</td>
<td style="text-align: center;">100美元</td>
<td style="text-align: center;">35%</td>
<td style="text-align: center;">国家级</td>
<td style="text-align: center;">★★★★</td>
<td>是</td>
<td style="text-align: center;">普通高校全日制在校生</td>
<td style="text-align: center;">0奖&lt;1%、F奖&lt;1%、M奖6%、H奖26%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">数学中国(认证杯)数学建模网络挑战赛</td>
<td style="text-align: center;">4-5月(两阶段)</td>
<td style="text-align: center;">100元</td>
<td style="text-align: center;">48%</td>
<td style="text-align: center;">省部级</td>
<td style="text-align: center;">★★★</td>
<td>是</td>
<td style="text-align: center;">研究生、本科生、专科生</td>
<td
style="text-align: center;">特等奖前十名、一等奖5%、二等奖15%、三等奖30%</td>
</tr>
<tr class="even">
<td style="text-align: center;">MathorCup高校数学建模挑战赛</td>
<td style="text-align: center;">4.12-4.16</td>
<td style="text-align: center;">200元</td>
<td style="text-align: center;">50%</td>
<td style="text-align: center;">国家级</td>
<td style="text-align: center;">★★★★</td>
<td>否</td>
<td style="text-align: center;">国内外研究生、本科专科生</td>
<td style="text-align: center;">一等奖5%、二等奖15%、三等奖30%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">"泰迪杯”数据挖掘挑战赛</td>
<td style="text-align: center;">4月中下旬</td>
<td style="text-align: center;">200元</td>
<td style="text-align: center;">20%</td>
<td style="text-align: center;">省部级</td>
<td style="text-align: center;">★★★</td>
<td>否</td>
<td style="text-align: center;">研究生、本科生、专科生</td>
<td
style="text-align: center;">特等奖3队(20000元+泰迪杯)、特等奖3队(10000元)、网宿创新奖3队(2000元)</td>
</tr>
<tr class="even">
<td style="text-align: center;">东北三省数学建模联赛</td>
<td style="text-align: center;">4月中旬-5月中旬</td>
<td style="text-align: center;">免费</td>
<td style="text-align: center;">5%</td>
<td style="text-align: center;">省部级</td>
<td style="text-align: center;">★★★</td>
<td>否</td>
<td style="text-align: center;">研究生、本科生、专科生</td>
<td style="text-align: center;">学校选送</td>
</tr>
<tr class="odd">
<td style="text-align: center;">"华中杯”大学生数学建模挑战赛</td>
<td style="text-align: center;">4月底</td>
<td style="text-align: center;">150元</td>
<td style="text-align: center;">45%</td>
<td style="text-align: center;">省部级</td>
<td style="text-align: center;">★★★</td>
<td>否</td>
<td style="text-align: center;">普通高校全日制在校生</td>
<td style="text-align: center;">一等奖2%、二等奖15%、三等奖25%</td>
</tr>
<tr class="even">
<td style="text-align: center;">五一数学建模</td>
<td style="text-align: center;">5.1-5.4</td>
<td style="text-align: center;">100元</td>
<td style="text-align: center;">45%</td>
<td style="text-align: center;">省部级</td>
<td style="text-align: center;">★★★</td>
<td>否</td>
<td
style="text-align: center;">国内外研究生、本科生、专科生和高中生</td>
<td style="text-align: center;">一等奖5%、二等奖15%、三等奖25%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">中青杯数学建模竞赛</td>
<td style="text-align: center;">5月底</td>
<td style="text-align: center;">100元</td>
<td style="text-align: center;">43%</td>
<td style="text-align: center;">省部级</td>
<td style="text-align: center;">★★★</td>
<td>否</td>
<td style="text-align: center;">研究生、本科生、专科生</td>
<td style="text-align: center;">一等奖3%、二等奖15%、三等奖25%</td>
</tr>
<tr class="even">
<td style="text-align: center;">全国大学生统计建模大赛</td>
<td style="text-align: center;">5月底</td>
<td style="text-align: center;">免费</td>
<td style="text-align: center;">60%</td>
<td style="text-align: center;">国家级</td>
<td style="text-align: center;">★★★★★</td>
<td>否</td>
<td
style="text-align: center;">有关高等院校全日制在读本科生、研究生</td>
<td
style="text-align: center;">(国家)一等奖10%、二等奖20%、三等奖70%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">全国大学生电工数学建模竞赛</td>
<td style="text-align: center;">5月中下旬</td>
<td style="text-align: center;">免费</td>
<td style="text-align: center;">45%</td>
<td style="text-align: center;">国家级</td>
<td style="text-align: center;">★★★★</td>
<td>否</td>
<td style="text-align: center;">普通高校全日制在校生</td>
<td style="text-align: center;">一等奖5%、二等奖15%、三等奖25%</td>
</tr>
<tr class="even">
<td style="text-align: center;">辽宁省大学生数学建模竞赛</td>
<td style="text-align: center;">7月初</td>
<td style="text-align: center;">免费</td>
<td style="text-align: center;">45%</td>
<td style="text-align: center;">省部级</td>
<td style="text-align: center;">★★★</td>
<td>否</td>
<td style="text-align: center;">辽宁省教育厅</td>
<td style="text-align: center;">一等奖5%、二等奖15%、三等奖25%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">"深圳杯”数学建模挑战赛</td>
<td style="text-align: center;">7月底</td>
<td style="text-align: center;">免费</td>
<td style="text-align: center;">5%</td>
<td style="text-align: center;">国家级</td>
<td style="text-align: center;">★★★★</td>
<td>否</td>
<td
style="text-align: center;">专科生、本科生、研究生、教师及数学建模爱好者</td>
<td style="text-align: center;">一等奖一项、二等奖两项、三等奖三项</td>
</tr>
<tr class="even">
<td style="text-align: center;">"华数杯”全国大学生数学建模竞赛</td>
<td style="text-align: center;">8月初</td>
<td style="text-align: center;">200元</td>
<td style="text-align: center;">60%</td>
<td style="text-align: center;">省部级</td>
<td style="text-align: center;">★★★</td>
<td>否</td>
<td style="text-align: center;">研究生、本科生、专科生</td>
<td style="text-align: center;">一等奖10%、二等奖20%、三等奖30%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">高教社杯全国大学生数学建模竞赛</td>
<td style="text-align: center;">9月中旬</td>
<td style="text-align: center;">200元</td>
<td style="text-align: center;">3.50%</td>
<td style="text-align: center;">国家级</td>
<td style="text-align: center;">★★★★★</td>
<td>否</td>
<td style="text-align: center;">本科生、专科生</td>
<td
style="text-align: center;">(国家)一等奖二等奖10%左右,各地区省奖比例不等</td>
</tr>
<tr class="even">
<td style="text-align: center;">"华为杯"中国研究生数学建模竞赛</td>
<td style="text-align: center;">9月中旬</td>
<td style="text-align: center;">300元</td>
<td style="text-align: center;">35%</td>
<td style="text-align: center;">国家级</td>
<td style="text-align: center;">★★★★★</td>
<td>否</td>
<td style="text-align: center;">研究生</td>
<td
style="text-align: center;">企业专项奖、冠亚季军、“数模之星”提名奖、一等奖1.5%、二等奖13%、三等奖20%</td>
</tr>
<tr class="odd">
<td style="text-align: center;">亚太地区大学生数学建模竞赛</td>
<td style="text-align: center;">11月底</td>
<td style="text-align: center;">100元</td>
<td style="text-align: center;">45%</td>
<td style="text-align: center;">省部级</td>
<td style="text-align: center;">★★★</td>
<td>是</td>
<td style="text-align: center;">研究生、本科生、专科生</td>
<td
style="text-align: center;">一等奖5%、二等奖15%、三等奖25%、优秀奖55%</td>
</tr>
<tr class="even">
<td style="text-align: center;">数学中国数学建模国际赛</td>
<td style="text-align: center;">12月中下旬</td>
<td style="text-align: center;">200元</td>
<td style="text-align: center;">48.5%</td>
<td style="text-align: center;">省部级</td>
<td style="text-align: center;">★★★</td>
<td>是</td>
<td style="text-align: center;">研究生、本科生、专科生</td>
<td
style="text-align: center;">特等奖3%、特等奖提名奖5%、一等奖10%、二等奖30%、三等奖52%</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title>博客中添加可以缩放的mermaid图表</title>
    <url>/2024/10/23/%E5%8D%9A%E5%AE%A2%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%8F%AF%E4%BB%A5%E7%BC%A9%E6%94%BE%E7%9A%84mermaid%E5%9B%BE%E8%A1%A8/</url>
    <content><![CDATA[<p>有时候mermaid图表太大了,固定浏览图表文字看不起,需要添加可以缩放的mermaid图表</p>
<p>在需要添加mermaid图表的位置添加<code>html</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">     </span></span><br><span class="line"><span class="language-css">       <span class="selector-id">#mySvgId</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      &#125; </span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;graphDiv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/svg-pan-zoom.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">import</span> mermaid <span class="keyword">from</span> <span class="string">&#x27;https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      mermaid.<span class="title function_">initialize</span>(&#123; <span class="attr">startOnLoad</span>: <span class="literal">false</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> drawDiagram = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#graphDiv&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> graphDefinition = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        </span></span></span><br><span class="line"><span class="string"><span class="language-javascript">		/*这里添加完整的mermaid语句*/</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">		</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        `</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123; svg &#125; = <span class="keyword">await</span> mermaid.<span class="title function_">render</span>(<span class="string">&#x27;mySvgId&#x27;</span>, graphDefinition);</span></span><br><span class="line"><span class="language-javascript">        element.<span class="property">innerHTML</span> = svg.<span class="title function_">replace</span>(<span class="regexp">/[ ]*max-width:[ 0-9\.]*px;/i</span> , <span class="string">&#x27;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;mySvgId&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;height&quot;</span>, <span class="string">&quot;1000px&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;mySvgId&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&quot;width&quot;</span>, <span class="string">&quot;1000px&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> panZoomTiger = <span class="title function_">svgPanZoom</span>(<span class="string">&#x27;#mySvgId&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">zoomEnabled</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">controlIconsEnabled</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">fit</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">center</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">await</span> <span class="title function_">drawDiagram</span>();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>示例(手机可能无法显示):</p>
<html>
<head>
<style type="text/css">
     
       #mySvgId {
        height: 100%;
        width: 100%;
      } 
    </style>
</head>
<body>
<div id="graphDiv">

</div>
<script src="/js/svg-pan-zoom.js"></script>
<script type="module">
      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
      mermaid.initialize({ startOnLoad: false });
      const drawDiagram = async function () {
        const element = document.querySelector('#graphDiv');
        const graphDefinition = `
        
        quadrantChart
    title Reach and engagement of campaigns
    x-axis Low Reach --> High Reach
    y-axis Low Engagement --> High Engagement
    quadrant-1 We should expand
    quadrant-2 Need to promote
    quadrant-3 Re-evaluate
    quadrant-4 May be improved
    Campaign A: [0.3, 0.6]
    Campaign B: [0.45, 0.23]
    Campaign C: [0.57, 0.69]
    Campaign D: [0.78, 0.34]
    Campaign E: [0.40, 0.34]
    Campaign F: [0.35, 0.78]
        
        `;
        const { svg } = await mermaid.render('mySvgId', graphDefinition);
        element.innerHTML = svg.replace(/[ ]*max-width:[ 0-9\.]*px;/i , '');
        document.getElementById('mySvgId').setAttribute("height", "1000px");
        document.getElementById('mySvgId').setAttribute("width", "1000px");
        const panZoomTiger = svgPanZoom('#mySvgId', {
          zoomEnabled: true,
          controlIconsEnabled: true,
          fit: true,
          center: true
        });
      };
      await drawDiagram();
    </script>
</body>
</html>
]]></content>
      <categories>
        <category>Mermaid</category>
      </categories>
      <tags>
        <tag>Mermaid</tag>
      </tags>
  </entry>
  <entry>
    <title>Bullshark协议</title>
    <url>/2024/10/22/Bullshark%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="bullshark文章">Bullshark文章</h1>
<div>
<p><iframe src="/pdfjs/web/viewer.html?file=/data/Spiegelman 等 - 2022 - Bullshark DAG BFT Protocols Made Practical.pdf" width="100%" height="800px" frameborder="0" type="application/pdf"></iframe></p>
</div>
<h1 id="bullshark流程">Bullshark流程</h1>
<html>
<head>
<style type="text/css">
     
       #mySvgId {
        height: 100%;
        width: 100%;
      } 
    </style>
</head>
<body>
<div id="graphDiv">

</div>
<script src="/js/svg-pan-zoom.js"></script>
<script type="module">
      import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
      mermaid.initialize({ startOnLoad: false });
      const drawDiagram = async function () {
        const element = document.querySelector('#graphDiv');
        const graphDefinition = `
        
          flowchart LR
    A("$$p_i进入deliver(v,r,p)$$") 
    direction TB
    subgraph "deliver(v,r,p)阶段" 

    
    A ---> B[/"检查v:<br>1.v.source是否为p(这里的p应该为deliver收到的p)</span><br>2.v.round是否为r<span style="color:red">(这里的r应该为deliver收到的r)</span><br>3.v的有强边连接的顶点数是否至少为2f+1个"/]
    B ==>|满足条件|C($$try\_add\_to\_dag$$)
   B==>|不满足条件|C1(什么都不做)
    
       subgraph try_add_to_dag
    direction TB
    
   D[/如果V的所有强边和弱边连接的顶点都
   已经加入了DAG的任意轮的视图中/]
   D-->|满足条件|E[将v加入pi的v.round轮的视图中]
   D-->|不满足条件|F[返回 False]
   E-->G[/"如果：(1)pi的v.round轮视图中的节点个数至少为2f+1个<br>(2) v.round>round"/]
  G-->|满足条件|H["pi进行以下变动：<br>(1)round更新为v.round<br>(2)计时器开始计时<br>(3)变量wait变为true
  (4)进行broadcast_vertex(r)创建新阶段并向外广播"]
  G-->|不满足条件|I["(1)将v从缓冲区中删除<br>(2)对v进行try_ordering(v)<br>(3)返回true"]
  H-->I
   end
C-..->|对deliver的v| try_add_to_dag
C-->|"返回true<br>(v成功加入v.round轮的视图)"|j["pi对每个缓冲区中的顶点v，<br>若v满足v.round≤r<span style="color:red">(这里的r应该为deliver收到的r)</span>，<br>则pi对每个满足条件的v进行try_ordering(v)"]
C-->|"返回false<br>(v没有加入v.round轮的视图)"|k["pi将顶点v加入缓冲区中"]
j-..-> |成功将v加入视图后，对缓冲区的v进行遍历|try_add_to_dag
k-->l[/如果deliver的v的r等于pi自身的round/]
j-->l

 subgraph round update
 l-->|满足条件|m["计算出v.round=r=round的波次w，这里有两种情况
 (1)v.round=r且pi的round落后于v.round,<br>所以在try_add_to_dag(v)的阶段会进行同步，<br>使得v.round=round
 (2)v.round=r恰好等于pi的round
 <span style="color:red">当然v.round=r < round的时候什么都不做，过不了轮数更新的if条件</span>"]
 l-->|不满足条件|n[什么都不做]
 m-->o[/"如果v满足以下条件：
 (1)v属于w波的第1轮
 (2)计时器过期或v的源与预先定义的first_steady_leader相同"/]
 m-->p[/"如果v满足以下条件：
 (1)v属于w波的第1轮
 (2)计时器过期或v的源与预先定义的first_steady_leader相同"/]
    end
    end
        `;
        const { svg } = await mermaid.render('mySvgId', graphDefinition);
        element.innerHTML = svg.replace(/[ ]*max-width:[ 0-9\.]*px;/i , '');
        document.getElementById('mySvgId').setAttribute("height", "1000px");
        document.getElementById('mySvgId').setAttribute("width", "1000px");
        const panZoomTiger = svgPanZoom('#mySvgId', {
          zoomEnabled: true,
          controlIconsEnabled: true,
          fit: true,
          center: true
        });
      };
      await drawDiagram();
    </script>
</body>
</html>
]]></content>
      <categories>
        <category>共识协议</category>
      </categories>
      <tags>
        <tag>Bullshark</tag>
      </tags>
  </entry>
  <entry>
    <title>在博客中嵌入echarts图表</title>
    <url>/2024/10/21/%E5%9C%A8%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%B5%8C%E5%85%A5echarts%E5%9B%BE%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="步骤">步骤</h1>
<p>首先安装下载<code>echarts.min.js</code>文件放入<code>/js</code>目录下，在需要使用<code>echarts</code>的开头添加：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/js/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>开启<code>echarts</code>，接下来安装<code>hexo-tag-echarts</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-echarts --save</span><br></pre></td></tr></table></figure>
<h1 id="嵌入格式">嵌入格式</h1>
<p>在<a
href="https://echarts.apache.org/examples/zh/index.html">Echarts官网示例</a>中查看代码，将代码添加在下列虚线指定位置</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入 ECharts 文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/js/echarts.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#main</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">min-height</span>: <span class="number">400px</span>; <span class="comment">/* 可以设置一个最小高度 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为ECharts准备一个具有宽高的容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 基于准备好的dom，初始化echarts实例</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> myChart = echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;main&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//----------------------------------</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 指定图表的配置项和数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// ... ECharts 配置项 ...</span></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//------------------------------------------</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 使用刚指定的配置项和数据显示图表。</span></span></span><br><span class="line"><span class="language-javascript">        myChart.<span class="title function_">setOption</span>(option);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<h1 id="面积图">面积图</h1>
<html>
<head>
<!-- 引入 ECharts 文件 -->
<script src="/js/echarts.min.js"></script>
<style>
        #main {
            width: auto;
            height: auto;
            min-height: 400px; /* 可以设置一个最小高度 */
        }
    </style>
</head>
<body>
<!-- 为ECharts准备一个具有宽高的容器 -->
<div id="main">

</div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('main'));
 //----------------------------------
option = {
  title: {
    text: 'Stacked Area Chart'
  },
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'cross',
      label: {
        backgroundColor: '#6a7985'
      }
    }
  },
  legend: {
    data: ['Email', 'Union Ads', 'Video Ads', 'Direct', 'Search Engine']
  },
  toolbox: {
    feature: {
      saveAsImage: {}
    }
  },
  grid: {
    left: '3%',
    right: '4%',
    bottom: '3%',
    containLabel: true
  },
  xAxis: [
    {
      type: 'category',
      boundaryGap: false,
      data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
    }
  ],
  yAxis: [
    {
      type: 'value'
    }
  ],
  series: [
    {
      name: 'Email',
      type: 'line',
      stack: 'Total',
      areaStyle: {},
      emphasis: {
        focus: 'series'
      },
      data: [120, 132, 101, 134, 90, 230, 210]
    },
    {
      name: 'Union Ads',
      type: 'line',
      stack: 'Total',
      areaStyle: {},
      emphasis: {
        focus: 'series'
      },
      data: [220, 182, 191, 234, 290, 330, 310]
    },
    {
      name: 'Video Ads',
      type: 'line',
      stack: 'Total',
      areaStyle: {},
      emphasis: {
        focus: 'series'
      },
      data: [150, 232, 201, 154, 190, 330, 410]
    },
    {
      name: 'Direct',
      type: 'line',
      stack: 'Total',
      areaStyle: {},
      emphasis: {
        focus: 'series'
      },
      data: [320, 332, 301, 334, 390, 330, 320]
    },
    {
      name: 'Search Engine',
      type: 'line',
      stack: 'Total',
      label: {
        show: true,
        position: 'top'
      },
      areaStyle: {},
      emphasis: {
        focus: 'series'
      },
      data: [820, 932, 901, 934, 1290, 1330, 1320]
    }
  ]
};
 //------------------------------------------
        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
    </script>
</body>
</html>
<h1 id="k线图">K线图</h1>
<html>
<head>
<!-- 引入 ECharts 文件 -->
<script src="/js/echarts.min.js"></script>
<style>
        #main1 {
            width: auto;
            height: auto;
            min-height: 400px; /* 可以设置一个最小高度 */
        }
    </style>
</head>
<body>
<!-- 为ECharts准备一个具有宽高的容器 -->
<div id="main1">

</div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('main1'));
 //----------------------------------
const upColor = '#ec0000';
const upBorderColor = '#8A0000';
const downColor = '#00da3c';
const downBorderColor = '#008F28';
// Each item: open，close，lowest，highest
const data0 = splitData([
  ['2013/1/24', 2320.26, 2320.26, 2287.3, 2362.94],
  ['2013/1/25', 2300, 2291.3, 2288.26, 2308.38],
  ['2013/1/28', 2295.35, 2346.5, 2295.35, 2346.92],
  ['2013/1/29', 2347.22, 2358.98, 2337.35, 2363.8],
  ['2013/1/30', 2360.75, 2382.48, 2347.89, 2383.76],
  ['2013/1/31', 2383.43, 2385.42, 2371.23, 2391.82],
  ['2013/2/1', 2377.41, 2419.02, 2369.57, 2421.15],
  ['2013/2/4', 2425.92, 2428.15, 2417.58, 2440.38],
  ['2013/2/5', 2411, 2433.13, 2403.3, 2437.42],
  ['2013/2/6', 2432.68, 2434.48, 2427.7, 2441.73],
  ['2013/2/7', 2430.69, 2418.53, 2394.22, 2433.89],
  ['2013/2/8', 2416.62, 2432.4, 2414.4, 2443.03],
  ['2013/2/18', 2441.91, 2421.56, 2415.43, 2444.8],
  ['2013/2/19', 2420.26, 2382.91, 2373.53, 2427.07],
  ['2013/2/20', 2383.49, 2397.18, 2370.61, 2397.94],
  ['2013/2/21', 2378.82, 2325.95, 2309.17, 2378.82],
  ['2013/2/22', 2322.94, 2314.16, 2308.76, 2330.88],
  ['2013/2/25', 2320.62, 2325.82, 2315.01, 2338.78],
  ['2013/2/26', 2313.74, 2293.34, 2289.89, 2340.71],
  ['2013/2/27', 2297.77, 2313.22, 2292.03, 2324.63],
  ['2013/2/28', 2322.32, 2365.59, 2308.92, 2366.16],
  ['2013/3/1', 2364.54, 2359.51, 2330.86, 2369.65],
  ['2013/3/4', 2332.08, 2273.4, 2259.25, 2333.54],
  ['2013/3/5', 2274.81, 2326.31, 2270.1, 2328.14],
  ['2013/3/6', 2333.61, 2347.18, 2321.6, 2351.44],
  ['2013/3/7', 2340.44, 2324.29, 2304.27, 2352.02],
  ['2013/3/8', 2326.42, 2318.61, 2314.59, 2333.67],
  ['2013/3/11', 2314.68, 2310.59, 2296.58, 2320.96],
  ['2013/3/12', 2309.16, 2286.6, 2264.83, 2333.29],
  ['2013/3/13', 2282.17, 2263.97, 2253.25, 2286.33],
  ['2013/3/14', 2255.77, 2270.28, 2253.31, 2276.22],
  ['2013/3/15', 2269.31, 2278.4, 2250, 2312.08],
  ['2013/3/18', 2267.29, 2240.02, 2239.21, 2276.05],
  ['2013/3/19', 2244.26, 2257.43, 2232.02, 2261.31],
  ['2013/3/20', 2257.74, 2317.37, 2257.42, 2317.86],
  ['2013/3/21', 2318.21, 2324.24, 2311.6, 2330.81],
  ['2013/3/22', 2321.4, 2328.28, 2314.97, 2332],
  ['2013/3/25', 2334.74, 2326.72, 2319.91, 2344.89],
  ['2013/3/26', 2318.58, 2297.67, 2281.12, 2319.99],
  ['2013/3/27', 2299.38, 2301.26, 2289, 2323.48],
  ['2013/3/28', 2273.55, 2236.3, 2232.91, 2273.55],
  ['2013/3/29', 2238.49, 2236.62, 2228.81, 2246.87],
  ['2013/4/1', 2229.46, 2234.4, 2227.31, 2243.95],
  ['2013/4/2', 2234.9, 2227.74, 2220.44, 2253.42],
  ['2013/4/3', 2232.69, 2225.29, 2217.25, 2241.34],
  ['2013/4/8', 2196.24, 2211.59, 2180.67, 2212.59],
  ['2013/4/9', 2215.47, 2225.77, 2215.47, 2234.73],
  ['2013/4/10', 2224.93, 2226.13, 2212.56, 2233.04],
  ['2013/4/11', 2236.98, 2219.55, 2217.26, 2242.48],
  ['2013/4/12', 2218.09, 2206.78, 2204.44, 2226.26],
  ['2013/4/15', 2199.91, 2181.94, 2177.39, 2204.99],
  ['2013/4/16', 2169.63, 2194.85, 2165.78, 2196.43],
  ['2013/4/17', 2195.03, 2193.8, 2178.47, 2197.51],
  ['2013/4/18', 2181.82, 2197.6, 2175.44, 2206.03],
  ['2013/4/19', 2201.12, 2244.64, 2200.58, 2250.11],
  ['2013/4/22', 2236.4, 2242.17, 2232.26, 2245.12],
  ['2013/4/23', 2242.62, 2184.54, 2182.81, 2242.62],
  ['2013/4/24', 2187.35, 2218.32, 2184.11, 2226.12],
  ['2013/4/25', 2213.19, 2199.31, 2191.85, 2224.63],
  ['2013/4/26', 2203.89, 2177.91, 2173.86, 2210.58],
  ['2013/5/2', 2170.78, 2174.12, 2161.14, 2179.65],
  ['2013/5/3', 2179.05, 2205.5, 2179.05, 2222.81],
  ['2013/5/6', 2212.5, 2231.17, 2212.5, 2236.07],
  ['2013/5/7', 2227.86, 2235.57, 2219.44, 2240.26],
  ['2013/5/8', 2242.39, 2246.3, 2235.42, 2255.21],
  ['2013/5/9', 2246.96, 2232.97, 2221.38, 2247.86],
  ['2013/5/10', 2228.82, 2246.83, 2225.81, 2247.67],
  ['2013/5/13', 2247.68, 2241.92, 2231.36, 2250.85],
  ['2013/5/14', 2238.9, 2217.01, 2205.87, 2239.93],
  ['2013/5/15', 2217.09, 2224.8, 2213.58, 2225.19],
  ['2013/5/16', 2221.34, 2251.81, 2210.77, 2252.87],
  ['2013/5/17', 2249.81, 2282.87, 2248.41, 2288.09],
  ['2013/5/20', 2286.33, 2299.99, 2281.9, 2309.39],
  ['2013/5/21', 2297.11, 2305.11, 2290.12, 2305.3],
  ['2013/5/22', 2303.75, 2302.4, 2292.43, 2314.18],
  ['2013/5/23', 2293.81, 2275.67, 2274.1, 2304.95],
  ['2013/5/24', 2281.45, 2288.53, 2270.25, 2292.59],
  ['2013/5/27', 2286.66, 2293.08, 2283.94, 2301.7],
  ['2013/5/28', 2293.4, 2321.32, 2281.47, 2322.1],
  ['2013/5/29', 2323.54, 2324.02, 2321.17, 2334.33],
  ['2013/5/30', 2316.25, 2317.75, 2310.49, 2325.72],
  ['2013/5/31', 2320.74, 2300.59, 2299.37, 2325.53],
  ['2013/6/3', 2300.21, 2299.25, 2294.11, 2313.43],
  ['2013/6/4', 2297.1, 2272.42, 2264.76, 2297.1],
  ['2013/6/5', 2270.71, 2270.93, 2260.87, 2276.86],
  ['2013/6/6', 2264.43, 2242.11, 2240.07, 2266.69],
  ['2013/6/7', 2242.26, 2210.9, 2205.07, 2250.63],
  ['2013/6/13', 2190.1, 2148.35, 2126.22, 2190.1]
]);
function splitData(rawData) {
  const categoryData = [];
  const values = [];
  for (var i = 0; i < rawData.length; i++) {
    categoryData.push(rawData[i].splice(0, 1)[0]);
    values.push(rawData[i]);
  }
  return {
    categoryData: categoryData,
    values: values
  };
}
function calculateMA(dayCount) {
  var result = [];
  for (var i = 0, len = data0.values.length; i < len; i++) {
    if (i < dayCount) {
      result.push('-');
      continue;
    }
    var sum = 0;
    for (var j = 0; j < dayCount; j++) {
      sum += +data0.values[i - j][1];
    }
    result.push(sum / dayCount);
  }
  return result;
}
option = {
  title: {
    text: '上证指数',
    left: 0
  },
  tooltip: {
    trigger: 'axis',
    axisPointer: {
      type: 'cross'
    }
  },
  legend: {
    data: ['日K', 'MA5', 'MA10', 'MA20', 'MA30']
  },
  grid: {
    left: '10%',
    right: '10%',
    bottom: '15%'
  },
  xAxis: {
    type: 'category',
    data: data0.categoryData,
    boundaryGap: false,
    axisLine: { onZero: false },
    splitLine: { show: false },
    min: 'dataMin',
    max: 'dataMax'
  },
  yAxis: {
    scale: true,
    splitArea: {
      show: true
    }
  },
  dataZoom: [
    {
      type: 'inside',
      start: 50,
      end: 100
    },
    {
      show: true,
      type: 'slider',
      top: '90%',
      start: 50,
      end: 100
    }
  ],
  series: [
    {
      name: '日K',
      type: 'candlestick',
      data: data0.values,
      itemStyle: {
        color: upColor,
        color0: downColor,
        borderColor: upBorderColor,
        borderColor0: downBorderColor
      },
      markPoint: {
        label: {
          formatter: function (param) {
            return param != null ? Math.round(param.value) + '' : '';
          }
        },
        data: [
          {
            name: 'Mark',
            coord: ['2013/5/31', 2300],
            value: 2300,
            itemStyle: {
              color: 'rgb(41,60,85)'
            }
          },
          {
            name: 'highest value',
            type: 'max',
            valueDim: 'highest'
          },
          {
            name: 'lowest value',
            type: 'min',
            valueDim: 'lowest'
          },
          {
            name: 'average value on close',
            type: 'average',
            valueDim: 'close'
          }
        ],
        tooltip: {
          formatter: function (param) {
            return param.name + '<br>' + (param.data.coord || '');
          }
        }
      },
      markLine: {
        symbol: ['none', 'none'],
        data: [
          [
            {
              name: 'from lowest to highest',
              type: 'min',
              valueDim: 'lowest',
              symbol: 'circle',
              symbolSize: 10,
              label: {
                show: false
              },
              emphasis: {
                label: {
                  show: false
                }
              }
            },
            {
              type: 'max',
              valueDim: 'highest',
              symbol: 'circle',
              symbolSize: 10,
              label: {
                show: false
              },
              emphasis: {
                label: {
                  show: false
                }
              }
            }
          ],
          {
            name: 'min line on close',
            type: 'min',
            valueDim: 'close'
          },
          {
            name: 'max line on close',
            type: 'max',
            valueDim: 'close'
          }
        ]
      }
    },
    {
      name: 'MA5',
      type: 'line',
      data: calculateMA(5),
      smooth: true,
      lineStyle: {
        opacity: 0.5
      }
    },
    {
      name: 'MA10',
      type: 'line',
      data: calculateMA(10),
      smooth: true,
      lineStyle: {
        opacity: 0.5
      }
    },
    {
      name: 'MA20',
      type: 'line',
      data: calculateMA(20),
      smooth: true,
      lineStyle: {
        opacity: 0.5
      }
    },
    {
      name: 'MA30',
      type: 'line',
      data: calculateMA(30),
      smooth: true,
      lineStyle: {
        opacity: 0.5
      }
    }
  ]
};
 //------------------------------------------
        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
    </script>
</body>
</html>
<h1 id="雷达图">雷达图</h1>
<html>
<head>
<!-- 引入 ECharts 文件 -->
<script src="/js/echarts.min.js"></script>
<style>
        #main2 {
            width: auto;
            height: auto;
            min-height: 400px; /* 可以设置一个最小高度 */
        }
    </style>
</head>
<body>
<!-- 为ECharts准备一个具有宽高的容器 -->
<div id="main2">

</div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('main2'));
 //----------------------------------
option = {
  color: ['#67F9D8', '#FFE434', '#56A3F1', '#FF917C'],
  title: {
    text: 'Customized Radar Chart'
  },
  legend: {},
  radar: [
    {
      indicator: [
        { text: 'Indicator1' },
        { text: 'Indicator2' },
        { text: 'Indicator3' },
        { text: 'Indicator4' },
        { text: 'Indicator5' }
      ],
      center: ['25%', '50%'],
      radius: 120,
      startAngle: 90,
      splitNumber: 4,
      shape: 'circle',
      axisName: {
        formatter: '【{value}】',
        color: '#428BD4'
      },
      splitArea: {
        areaStyle: {
          color: ['#77EADF', '#26C3BE', '#64AFE9', '#428BD4'],
          shadowColor: 'rgba(0, 0, 0, 0.2)',
          shadowBlur: 10
        }
      },
      axisLine: {
        lineStyle: {
          color: 'rgba(211, 253, 250, 0.8)'
        }
      },
      splitLine: {
        lineStyle: {
          color: 'rgba(211, 253, 250, 0.8)'
        }
      }
    },
    {
      indicator: [
        { text: 'Indicator1', max: 150 },
        { text: 'Indicator2', max: 150 },
        { text: 'Indicator3', max: 150 },
        { text: 'Indicator4', max: 120 },
        { text: 'Indicator5', max: 108 },
        { text: 'Indicator6', max: 72 }
      ],
      center: ['75%', '50%'],
      radius: 120,
      axisName: {
        color: '#fff',
        backgroundColor: '#666',
        borderRadius: 3,
        padding: [3, 5]
      }
    }
  ],
  series: [
    {
      type: 'radar',
      emphasis: {
        lineStyle: {
          width: 4
        }
      },
      data: [
        {
          value: [100, 8, 0.4, -80, 2000],
          name: 'Data A'
        },
        {
          value: [60, 5, 0.3, -100, 1500],
          name: 'Data B',
          areaStyle: {
            color: 'rgba(255, 228, 52, 0.6)'
          }
        }
      ]
    },
    {
      type: 'radar',
      radarIndex: 1,
      data: [
        {
          value: [120, 118, 130, 100, 99, 70],
          name: 'Data C',
          symbol: 'rect',
          symbolSize: 12,
          lineStyle: {
            type: 'dashed'
          },
          label: {
            show: true,
            formatter: function (params) {
              return params.value;
            }
          }
        },
        {
          value: [100, 93, 50, 90, 70, 60],
          name: 'Data D',
          areaStyle: {
            color: new echarts.graphic.RadialGradient(0.1, 0.6, 1, [
              {
                color: 'rgba(255, 145, 124, 0.1)',
                offset: 0
              },
              {
                color: 'rgba(255, 145, 124, 0.9)',
                offset: 1
              }
            ])
          }
        }
      ]
    }
  ]
};
 //------------------------------------------
        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
    </script>
</body>
</html>
<h1 id="旭日图">旭日图</h1>
<html>
<head>
<!-- 引入 ECharts 文件 -->
<script src="/js/echarts.min.js"></script>
<style>
        #main3 {
            width: auto;
            height: auto;
            min-height: 600px; /* 可以设置一个最小高度 */
        }
    </style>
</head>
<body>
<!-- 为ECharts准备一个具有宽高的容器 -->
<div id="main3">

</div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('main3'));
 //----------------------------------
const colors = ['#FFAE57', '#FF7853', '#EA5151', '#CC3F57', '#9A2555'];
const bgColor = '#2E2733';
const itemStyle = {
  star5: {
    color: colors[0]
  },
  star4: {
    color: colors[1]
  },
  star3: {
    color: colors[2]
  },
  star2: {
    color: colors[3]
  }
};
const data = [
  {
    name: '虚构',
    itemStyle: {
      color: colors[1]
    },
    children: [
      {
        name: '小说',
        children: [
          {
            name: '5☆',
            children: [
              {
                name: '疼'
              },
              {
                name: '慈悲'
              },
              {
                name: '楼下的房客'
              }
            ]
          },
          {
            name: '4☆',
            children: [
              {
                name: '虚无的十字架'
              },
              {
                name: '无声告白'
              },
              {
                name: '童年的终结'
              }
            ]
          },
          {
            name: '3☆',
            children: [
              {
                name: '疯癫老人日记'
              }
            ]
          }
        ]
      },
      {
        name: '其他',
        children: [
          {
            name: '5☆',
            children: [
              {
                name: '纳博科夫短篇小说全集'
              }
            ]
          },
          {
            name: '4☆',
            children: [
              {
                name: '安魂曲'
              },
              {
                name: '人生拼图版'
              }
            ]
          },
          {
            name: '3☆',
            children: [
              {
                name: '比起爱你，我更需要你'
              }
            ]
          }
        ]
      }
    ]
  },
  {
    name: '非虚构',
    itemStyle: {
      color: colors[2]
    },
    children: [
      {
        name: '设计',
        children: [
          {
            name: '5☆',
            children: [
              {
                name: '无界面交互'
              }
            ]
          },
          {
            name: '4☆',
            children: [
              {
                name: '数字绘图的光照与渲染技术'
              },
              {
                name: '日本建筑解剖书'
              }
            ]
          },
          {
            name: '3☆',
            children: [
              {
                name: '奇幻世界艺术\n&RPG地图绘制讲座'
              }
            ]
          }
        ]
      },
      {
        name: '社科',
        children: [
          {
            name: '5☆',
            children: [
              {
                name: '痛点'
              }
            ]
          },
          {
            name: '4☆',
            children: [
              {
                name: '卓有成效的管理者'
              },
              {
                name: '进化'
              },
              {
                name: '后物欲时代的来临'
              }
            ]
          },
          {
            name: '3☆',
            children: [
              {
                name: '疯癫与文明'
              }
            ]
          }
        ]
      },
      {
        name: '心理',
        children: [
          {
            name: '5☆',
            children: [
              {
                name: '我们时代的神经症人格'
              }
            ]
          },
          {
            name: '4☆',
            children: [
              {
                name: '皮格马利翁效应'
              },
              {
                name: '受伤的人'
              }
            ]
          },
          {
            name: '3☆'
          },
          {
            name: '2☆',
            children: [
              {
                name: '迷恋'
              }
            ]
          }
        ]
      },
      {
        name: '居家',
        children: [
          {
            name: '4☆',
            children: [
              {
                name: '把房子住成家'
              },
              {
                name: '只过必要生活'
              },
              {
                name: '北欧简约风格'
              }
            ]
          }
        ]
      },
      {
        name: '绘本',
        children: [
          {
            name: '5☆',
            children: [
              {
                name: '设计诗'
              }
            ]
          },
          {
            name: '4☆',
            children: [
              {
                name: '假如生活糊弄了你'
              },
              {
                name: '博物学家的神秘动物图鉴'
              }
            ]
          },
          {
            name: '3☆',
            children: [
              {
                name: '方向'
              }
            ]
          }
        ]
      },
      {
        name: '哲学',
        children: [
          {
            name: '4☆',
            children: [
              {
                name: '人生的智慧'
              }
            ]
          }
        ]
      },
      {
        name: '技术',
        children: [
          {
            name: '5☆',
            children: [
              {
                name: '代码整洁之道'
              }
            ]
          },
          {
            name: '4☆',
            children: [
              {
                name: 'Three.js 开发指南'
              }
            ]
          }
        ]
      }
    ]
  }
];
for (let j = 0; j < data.length; ++j) {
  let level1 = data[j].children;
  for (let i = 0; i < level1.length; ++i) {
    let block = level1[i].children;
    let bookScore = [];
    let bookScoreId;
    for (let star = 0; star < block.length; ++star) {
      let style = (function (name) {
        switch (name) {
          case '5☆':
            bookScoreId = 0;
            return itemStyle.star5;
          case '4☆':
            bookScoreId = 1;
            return itemStyle.star4;
          case '3☆':
            bookScoreId = 2;
            return itemStyle.star3;
          case '2☆':
            bookScoreId = 3;
            return itemStyle.star2;
        }
      })(block[star].name);
      block[star].label = {
        color: style.color,
        downplay: {
          opacity: 0.5
        }
      };
      if (block[star].children) {
        style = {
          opacity: 1,
          color: style.color
        };
        block[star].children.forEach(function (book) {
          book.value = 1;
          book.itemStyle = style;
          book.label = {
            color: style.color
          };
          let value = 1;
          if (bookScoreId === 0 || bookScoreId === 3) {
            value = 5;
          }
          if (bookScore[bookScoreId]) {
            bookScore[bookScoreId].value += value;
          } else {
            bookScore[bookScoreId] = {
              color: colors[bookScoreId],
              value: value
            };
          }
        });
      }
    }
    level1[i].itemStyle = {
      color: data[j].itemStyle.color
    };
  }
}
option = {
  backgroundColor: bgColor,
  color: colors,
  series: [
    {
      type: 'sunburst',
      center: ['50%', '48%'],
      data: data,
      sort: function (a, b) {
        if (a.depth === 1) {
          return b.getValue() - a.getValue();
        } else {
          return a.dataIndex - b.dataIndex;
        }
      },
      label: {
        rotate: 'radial',
        color: bgColor
      },
      itemStyle: {
        borderColor: bgColor,
        borderWidth: 2
      },
      levels: [
        {},
        {
          r0: 0,
          r: 40,
          label: {
            rotate: 0
          }
        },
        {
          r0: 40,
          r: 105
        },
        {
          r0: 115,
          r: 140,
          itemStyle: {
            shadowBlur: 2,
            shadowColor: colors[2],
            color: 'transparent'
          },
          label: {
            rotate: 'tangential',
            fontSize: 10,
            color: colors[0]
          }
        },
        {
          r0: 140,
          r: 145,
          itemStyle: {
            shadowBlur: 80,
            shadowColor: colors[0]
          },
          label: {
            position: 'outside',
            textShadowBlur: 5,
            textShadowColor: '#333'
          },
          downplay: {
            label: {
              opacity: 0.5
            }
          }
        }
      ]
    }
  ]
};
 //------------------------------------------
        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
    </script>
</body>
</html>
<h1 id="平行坐标系">平行坐标系</h1>
<html>
<head>
<!-- 引入 ECharts 文件 -->
<script src="/js/echarts.min.js"></script>
<style>
        #main4 {
            width: auto;
            height: auto;
            min-height: 400px; /* 可以设置一个最小高度 */
        }
    </style>
</head>
<body>
<!-- 为ECharts准备一个具有宽高的容器 -->
<div id="main4">

</div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('main4'));
 //----------------------------------
// Schema:
// date,AQIindex,PM2.5,PM10,CO,NO2,SO2
const dataBJ = [
  [1, 55, 9, 56, 0.46, 18, 6, '良'],
  [2, 25, 11, 21, 0.65, 34, 9, '优'],
  [3, 56, 7, 63, 0.3, 14, 5, '良'],
  [4, 33, 7, 29, 0.33, 16, 6, '优'],
  [5, 42, 24, 44, 0.76, 40, 16, '优'],
  [6, 82, 58, 90, 1.77, 68, 33, '良'],
  [7, 74, 49, 77, 1.46, 48, 27, '良'],
  [8, 78, 55, 80, 1.29, 59, 29, '良'],
  [9, 267, 216, 280, 4.8, 108, 64, '重度污染'],
  [10, 185, 127, 216, 2.52, 61, 27, '中度污染'],
  [11, 39, 19, 38, 0.57, 31, 15, '优'],
  [12, 41, 11, 40, 0.43, 21, 7, '优'],
  [13, 64, 38, 74, 1.04, 46, 22, '良'],
  [14, 108, 79, 120, 1.7, 75, 41, '轻度污染'],
  [15, 108, 63, 116, 1.48, 44, 26, '轻度污染'],
  [16, 33, 6, 29, 0.34, 13, 5, '优'],
  [17, 94, 66, 110, 1.54, 62, 31, '良'],
  [18, 186, 142, 192, 3.88, 93, 79, '中度污染'],
  [19, 57, 31, 54, 0.96, 32, 14, '良'],
  [20, 22, 8, 17, 0.48, 23, 10, '优'],
  [21, 39, 15, 36, 0.61, 29, 13, '优'],
  [22, 94, 69, 114, 2.08, 73, 39, '良'],
  [23, 99, 73, 110, 2.43, 76, 48, '良'],
  [24, 31, 12, 30, 0.5, 32, 16, '优'],
  [25, 42, 27, 43, 1, 53, 22, '优'],
  [26, 154, 117, 157, 3.05, 92, 58, '中度污染'],
  [27, 234, 185, 230, 4.09, 123, 69, '重度污染'],
  [28, 160, 120, 186, 2.77, 91, 50, '中度污染'],
  [29, 134, 96, 165, 2.76, 83, 41, '轻度污染'],
  [30, 52, 24, 60, 1.03, 50, 21, '良'],
  [31, 46, 5, 49, 0.28, 10, 6, '优']
];
var dataGZ = [
  [1, 26, 37, 27, 1.163, 27, 13, '优'],
  [2, 85, 62, 71, 1.195, 60, 8, '良'],
  [3, 78, 38, 74, 1.363, 37, 7, '良'],
  [4, 21, 21, 36, 0.634, 40, 9, '优'],
  [5, 41, 42, 46, 0.915, 81, 13, '优'],
  [6, 56, 52, 69, 1.067, 92, 16, '良'],
  [7, 64, 30, 28, 0.924, 51, 2, '良'],
  [8, 55, 48, 74, 1.236, 75, 26, '良'],
  [9, 76, 85, 113, 1.237, 114, 27, '良'],
  [10, 91, 81, 104, 1.041, 56, 40, '良'],
  [11, 84, 39, 60, 0.964, 25, 11, '良'],
  [12, 64, 51, 101, 0.862, 58, 23, '良'],
  [13, 70, 69, 120, 1.198, 65, 36, '良'],
  [14, 77, 105, 178, 2.549, 64, 16, '良'],
  [15, 109, 68, 87, 0.996, 74, 29, '轻度污染'],
  [16, 73, 68, 97, 0.905, 51, 34, '良'],
  [17, 54, 27, 47, 0.592, 53, 12, '良'],
  [18, 51, 61, 97, 0.811, 65, 19, '良'],
  [19, 91, 71, 121, 1.374, 43, 18, '良'],
  [20, 73, 102, 182, 2.787, 44, 19, '良'],
  [21, 73, 50, 76, 0.717, 31, 20, '良'],
  [22, 84, 94, 140, 2.238, 68, 18, '良'],
  [23, 93, 77, 104, 1.165, 53, 7, '良'],
  [24, 99, 130, 227, 3.97, 55, 15, '良'],
  [25, 146, 84, 139, 1.094, 40, 17, '轻度污染'],
  [26, 113, 108, 137, 1.481, 48, 15, '轻度污染'],
  [27, 81, 48, 62, 1.619, 26, 3, '良'],
  [28, 56, 48, 68, 1.336, 37, 9, '良'],
  [29, 82, 92, 174, 3.29, 0, 13, '良'],
  [30, 106, 116, 188, 3.628, 101, 16, '轻度污染'],
  [31, 118, 50, 0, 1.383, 76, 11, '轻度污染']
];
var dataSH = [
  [1, 91, 45, 125, 0.82, 34, 23, '良'],
  [2, 65, 27, 78, 0.86, 45, 29, '良'],
  [3, 83, 60, 84, 1.09, 73, 27, '良'],
  [4, 109, 81, 121, 1.28, 68, 51, '轻度污染'],
  [5, 106, 77, 114, 1.07, 55, 51, '轻度污染'],
  [6, 109, 81, 121, 1.28, 68, 51, '轻度污染'],
  [7, 106, 77, 114, 1.07, 55, 51, '轻度污染'],
  [8, 89, 65, 78, 0.86, 51, 26, '良'],
  [9, 53, 33, 47, 0.64, 50, 17, '良'],
  [10, 80, 55, 80, 1.01, 75, 24, '良'],
  [11, 117, 81, 124, 1.03, 45, 24, '轻度污染'],
  [12, 99, 71, 142, 1.1, 62, 42, '良'],
  [13, 95, 69, 130, 1.28, 74, 50, '良'],
  [14, 116, 87, 131, 1.47, 84, 40, '轻度污染'],
  [15, 108, 80, 121, 1.3, 85, 37, '轻度污染'],
  [16, 134, 83, 167, 1.16, 57, 43, '轻度污染'],
  [17, 79, 43, 107, 1.05, 59, 37, '良'],
  [18, 71, 46, 89, 0.86, 64, 25, '良'],
  [19, 97, 71, 113, 1.17, 88, 31, '良'],
  [20, 84, 57, 91, 0.85, 55, 31, '良'],
  [21, 87, 63, 101, 0.9, 56, 41, '良'],
  [22, 104, 77, 119, 1.09, 73, 48, '轻度污染'],
  [23, 87, 62, 100, 1, 72, 28, '良'],
  [24, 168, 128, 172, 1.49, 97, 56, '中度污染'],
  [25, 65, 45, 51, 0.74, 39, 17, '良'],
  [26, 39, 24, 38, 0.61, 47, 17, '优'],
  [27, 39, 24, 39, 0.59, 50, 19, '优'],
  [28, 93, 68, 96, 1.05, 79, 29, '良'],
  [29, 188, 143, 197, 1.66, 99, 51, '中度污染'],
  [30, 174, 131, 174, 1.55, 108, 50, '中度污染'],
  [31, 187, 143, 201, 1.39, 89, 53, '中度污染']
];
var schema = [
  { name: 'date', index: 0, text: '日期' },
  { name: 'AQIindex', index: 1, text: 'AQI' },
  { name: 'PM25', index: 2, text: 'PM2.5' },
  { name: 'PM10', index: 3, text: 'PM10' },
  { name: 'CO', index: 4, text: ' CO' },
  { name: 'NO2', index: 5, text: 'NO2' },
  { name: 'SO2', index: 6, text: 'SO2' },
  { name: '等级', index: 7, text: '等级' }
];
var lineStyle = {
  width: 1,
  opacity: 0.5
};
option = {
  backgroundColor: '#333',
  legend: {
    bottom: 30,
    data: ['Beijing', 'Shanghai', 'Guangzhou'],
    itemGap: 20,
    textStyle: {
      color: '#fff',
      fontSize: 14
    }
  },
  tooltip: {
    padding: 10,
    backgroundColor: '#222',
    borderColor: '#777',
    borderWidth: 1
  },
  parallelAxis: [
    {
      dim: 0,
      name: schema[0].text,
      inverse: true,
      max: 31,
      nameLocation: 'start'
    },
    { dim: 1, name: schema[1].text },
    { dim: 2, name: schema[2].text },
    { dim: 3, name: schema[3].text },
    { dim: 4, name: schema[4].text },
    { dim: 5, name: schema[5].text },
    { dim: 6, name: schema[6].text },
    {
      dim: 7,
      name: schema[7].text,
      type: 'category',
      data: ['优', '良', '轻度污染', '中度污染', '重度污染', '严重污染']
    }
  ],
  visualMap: {
    show: true,
    min: 0,
    max: 150,
    dimension: 2,
    inRange: {
      color: ['#d94e5d', '#eac736', '#50a3ba'].reverse()
      // colorAlpha: [0, 1]
    }
  },
  parallel: {
    left: '5%',
    right: '18%',
    bottom: 100,
    parallelAxisDefault: {
      type: 'value',
      name: 'AQI指数',
      nameLocation: 'end',
      nameGap: 20,
      nameTextStyle: {
        color: '#fff',
        fontSize: 12
      },
      axisLine: {
        lineStyle: {
          color: '#aaa'
        }
      },
      axisTick: {
        lineStyle: {
          color: '#777'
        }
      },
      splitLine: {
        show: false
      },
      axisLabel: {
        color: '#fff'
      }
    }
  },
  series: [
    {
      name: 'Beijing',
      type: 'parallel',
      lineStyle: lineStyle,
      data: dataBJ
    },
    {
      name: 'Shanghai',
      type: 'parallel',
      lineStyle: lineStyle,
      data: dataSH
    },
    {
      name: 'Guangzhou',
      type: 'parallel',
      lineStyle: lineStyle,
      data: dataGZ
    }
  ]
};
 //------------------------------------------
        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
    </script>
</body>
</html>
<h1 id="富文本">富文本</h1>
<html>
<head>
<!-- 引入 ECharts 文件 -->
<script src="/js/echarts.min.js"></script>
<style>
        #main5 {
            width: auto;
            height: auto;
            min-height: 600px; /* 可以设置一个最小高度 */
        }
    </style>
</head>
<body>
<!-- 为ECharts准备一个具有宽高的容器 -->
<div id="main5">

</div>
<script type="text/javascript">
        // 基于准备好的dom，初始化echarts实例
        var myChart = echarts.init(document.getElementById('main5'));
 //----------------------------------
option = {
  tooltip: {
    trigger: 'item',
    formatter: '{a} <br/>{b}: {c} ({d}%)'
  },
  legend: {
    data: [
      'Direct',
      'Marketing',
      'Search Engine',
      'Email',
      'Union Ads',
      'Video Ads',
      'Baidu',
      'Google',
      'Bing',
      'Others'
    ]
  },
  series: [
    {
      name: 'Access From',
      type: 'pie',
      selectedMode: 'single',
      radius: [0, '30%'],
      label: {
        position: 'inner',
        fontSize: 14
      },
      labelLine: {
        show: false
      },
      data: [
        { value: 1548, name: 'Search Engine' },
        { value: 775, name: 'Direct' },
        { value: 679, name: 'Marketing', selected: true }
      ]
    },
    {
      name: 'Access From',
      type: 'pie',
      radius: ['45%', '60%'],
      labelLine: {
        length: 30
      },
      label: {
        formatter: '{a|{a}}{abg|}\n{hr|}\n  {b|{b}：}{c}  {per|{d}%}  ',
        backgroundColor: '#F6F8FC',
        borderColor: '#8C8D8E',
        borderWidth: 1,
        borderRadius: 4,
        rich: {
          a: {
            color: '#6E7079',
            lineHeight: 22,
            align: 'center'
          },
          hr: {
            borderColor: '#8C8D8E',
            width: '100%',
            borderWidth: 1,
            height: 0
          },
          b: {
            color: '#4C5058',
            fontSize: 14,
            fontWeight: 'bold',
            lineHeight: 33
          },
          per: {
            color: '#fff',
            backgroundColor: '#4C5058',
            padding: [3, 4],
            borderRadius: 4
          }
        }
      },
      data: [
        { value: 1048, name: 'Baidu' },
        { value: 335, name: 'Direct' },
        { value: 310, name: 'Email' },
        { value: 251, name: 'Google' },
        { value: 234, name: 'Union Ads' },
        { value: 147, name: 'Bing' },
        { value: 135, name: 'Video Ads' },
        { value: 102, name: 'Others' }
      ]
    }
  ]
};
 //------------------------------------------
        // 使用刚指定的配置项和数据显示图表。
        myChart.setOption(option);
    </script>
</body>
</html>
<p>有一些需要大量数据的图表，数据一般用<code>json</code>格式提供，这个还需要再研究一下，我觉得如果不是那种3d或者地图类型的图标，都是可以直接用<code>echarts</code>展示出来的。如有json数据，那么就需要引入<code>jquery.min.js</code>，这个在<code>js</code>文件夹里也有，地图的图表比较复杂，还有待研究。</p>
]]></content>
      <categories>
        <category>Echarts</category>
      </categories>
      <tags>
        <tag>Echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>2025国考可选岗位</title>
    <url>/2024/10/15/2025%E5%9B%BD%E8%80%83%E5%8F%AF%E9%80%89%E5%B2%97%E4%BD%8D/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误, 请重试" data-whm="文章不能被校验, 请重试">
  <script id="hbeData" type="hbeData" data-hmacdigest="9990919e442224ea6c674fe0eb131acc6cc13dce9f459892f531b1bc404db0fb"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-up">
      <input class="hbe hbe-input-field hbe-input-field-up" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-up" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-up">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>右键新建中加入新建md文件</title>
    <url>/2024/10/10/%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E4%B8%AD%E5%8A%A0%E5%85%A5%E6%96%B0%E5%BB%BAmd%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>创建一个txt文件，写入添加注册表的脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\.md]</span><br><span class="line">@=&quot;Typora.md&quot;</span><br><span class="line">&quot;Content Type&quot;=&quot;text/markdown&quot;</span><br><span class="line">&quot;PerceivedType&quot;=&quot;text&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\.md\ShellNew]</span><br><span class="line">&quot;NullFile&quot;=&quot;&quot;</span><br></pre></td></tr></table></figure>
<p>将这个<code>txt</code>文件保存，编码格式为<code>utf-8</code>，更改文件后缀为<code>reg</code>,运行即可在注册表中添加内容，网上步骤多止步于此，我的电脑进行这一步后仍然不能右键新建md文件，要多添加一步</p>
<p>打开注册表的：</p>
<p><code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Discardable\PostSetup\ShellNew</code></p>
<p><img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024/10/image-20241010175534743-57a746.png" /></p>
<p>双击<code>Classes</code>，添加<code>.md</code></p>
<p><img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024/10/image-20241010175659961-0c7257.png" /></p>
<p>这时右键即可创建<code>.md</code>文件</p>
]]></content>
  </entry>
  <entry>
    <title>博客的创建与恢复</title>
    <url>/2024/10/08/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<h1 id="创建个人博客">创建个人博客</h1>
<h2 id="创建个人博客文件夹">创建个人博客文件夹</h2>
<p>首先创建一个文件夹用来存放博客</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024年06月19日10时59分55秒-image-20240619105947918.png"
alt="image-20240619105947918" />
<figcaption aria-hidden="true">image-20240619105947918</figcaption>
</figure>
<p>在此文件夹中右键，选择打开git base，在命令栏中输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>最后会在这个文件夹中创建很多文件：</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024年06月19日11时03分23秒-image-20240619110323650.png"
alt="image-20240619110323650" />
<figcaption aria-hidden="true">image-20240619110323650</figcaption>
</figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── _config.yml  网站的配置信息。可以在此配置大部分的参数。</span><br><span class="line">├── .gitignore   用于Git版本控制时忽略指定文件或目录。</span><br><span class="line">├── package.json 应用程序的信息。EJS,Stylus和Markdown渲染引擎已默认安装。</span><br><span class="line">├── .github      GitHub特定的配置文件夹。</span><br><span class="line">├── node_modules Node.js依赖模块存放目录。你通常不用关心这个。</span><br><span class="line">├── scaffolds    模版文件夹。新建文章时Hexo会根据scaffold来创建文件。</span><br><span class="line">├── source       资源文件夹是存放用户资源的地方。除_posts之外，开头命名为_(下划线)的文件/文件夹和隐藏的文件均会被忽略。</span><br><span class="line">|   └── _posts   存放博客文章的文件夹。</span><br><span class="line">└── themes       主题文件夹。Hexo会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure>
<p>接下来在git中输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ hexo generate </span><br><span class="line">或者简写为：</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p>生成public站点文件夹</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024年06月19日11时02分59秒-image-20240619110259330.png"
alt="image-20240619110259330" />
<figcaption aria-hidden="true">image-20240619110259330</figcaption>
</figure>
<p>通过下面命令启动本地服务器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">或者简写为：</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024年06月19日11时04分08秒-image-20240619110408337.png"
alt="image-20240619110408337" />
<figcaption aria-hidden="true">image-20240619110408337</figcaption>
</figure>
<p>不要ctrl+左键点击命令框中的链接，直接在浏览器中输入：<code>localhost:4000</code>即可进入网站：</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024年06月19日11时05分28秒-image-20240619110528406.png"
alt="image-20240619110528406" />
<figcaption aria-hidden="true">image-20240619110528406</figcaption>
</figure>
<h2 id="将个人博客文件夹加入github">将个人博客文件夹加入github</h2>
<p>在github中创建一个新的公开资料库</p>
<p>名字规则为：<img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024年06月19日13时53分55秒-image-20240619135355118.png"
alt="image-20240619135355118" /></p>
<p><strong>（注意不要选add
readme，这样会将默认分支改为main，在hexo中默认分支为master）</strong></p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024年06月19日13时54分29秒-image-20240619135428975.png"
alt="image-20240619135428975" />
<figcaption aria-hidden="true">image-20240619135428975</figcaption>
</figure>
<p>记住该地址</p>
<h2
id="之前可能连接过生成ssh将github与git相连接">（之前可能连接过）生成SSH将github与git相连接*</h2>
<p>在git base中输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">name</span> yourname</span><br><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">email</span> youremail</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>
<p>会生成一个<code>.ssh</code>文件</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024年06月19日13时57分18秒-image-20240619135718667.png"
alt="image-20240619135718667" />
<figcaption aria-hidden="true">image-20240619135718667</figcaption>
</figure>
<p>在该目录下有一个<code>id_rsa.pub</code>文件，复制其中的内容到：</p>
<p><code>gitthub</code>-<code>settings-SSH and GPG keys</code>-<code>New SSH key</code>-<code>Add new SSH Key</code>的<code>Key</code>中,Title随便写一个</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024年06月19日13时59分30秒-image-20240619135930187.png"
alt="image-20240619135930187" />
<figcaption aria-hidden="true">image-20240619135930187</figcaption>
</figure>
<h2 id="测试git是否连接github">测试git是否连接github</h2>
<p>git base输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.<span class="property">com</span></span><br></pre></td></tr></table></figure>
<p>出现下图表示连接成功</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024年06月19日14时01分30秒-image-20240619140129995.png"
alt="image-20240619140129995" />
<figcaption aria-hidden="true">image-20240619140129995</figcaption>
</figure>
<h2 id="部署hexo">部署hexo</h2>
<p>使用编辑器打开由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>生成的配置文件<code>_config.yml</code>，翻到最下面，将下面改为</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024年06月19日14时03分40秒-image-20240619140339951.png"
alt="image-20240619140339951" />
<figcaption aria-hidden="true">image-20240619140339951</figcaption>
</figure>
<p>注意这里的<code>branch</code>，如果在github没有设置默认<code>branch</code>为<code>main</code>的话，这里就保持不变</p>
<h2 id="安装deploy-git">安装deploy-git</h2>
<p>在git base使用命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h2 id="编辑博客">编辑博客</h2>
<p>在博客文件夹打开git base输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;文件名&quot;</span></span><br></pre></td></tr></table></figure>
<p>在<code>H:\Blog\source\_posts</code>文件夹中会创建一个<code>"文件名".md</code>的文件</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024年06月19日14时07分33秒-image-20240619140733905.png"
alt="image-20240619140733905" />
<figcaption aria-hidden="true">image-20240619140733905</figcaption>
</figure>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024年06月19日14时07分58秒-image-20240619140757991.png"
alt="image-20240619140757991" />
<figcaption aria-hidden="true">image-20240619140757991</figcaption>
</figure>
<p>使用md编辑器打开文件进行编辑：</p>
<figure>
<img
src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024年06月19日14时09分49秒-image-20240619140949710.png"
alt="image-20240619140949710" />
<figcaption aria-hidden="true">image-20240619140949710</figcaption>
</figure>
<p>编辑好之后保存</p>
<h2 id="推送博客">推送博客</h2>
<p>在博客文件夹git base分别输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>文章就会同步到github资料库，并且在网站<code>wilfredzoz.github.io</code>进推送</p>
<p>有时候<code>hexo d</code>会失败，不知道咋搞的，有时候又可以，怀疑是梯子的问题</p>
<h1 id="换电脑恢复博客">换电脑恢复博客</h1>
<p>在换了电脑之后，用同样的方法将安装git和hexo，因为已将源代码上传至github，所以只需clone源代码，将源代码文件夹和github源代码文件夹相连接，之后正常推送就可以触发工作流自动推送。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora激活流程</title>
    <url>/2024/10/07/Typora%E6%BF%80%E6%B4%BB%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>首先下载这两个exe文件：<a href="/data/node_inject.exe">文件一</a>、<a
href="/data/license-gen.exe">文件二</a>，将其放入Typora安装目录下</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024/10/image-20241008150353123-f0cde5.png"  width="30%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>使用<strong>管理员身份</strong>打开<code>CMD</code>，按顺序运行如下程序</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d D:\<span class="number">023</span>_Typora\Typora </span><br><span class="line">.\node_inject.exe</span><br><span class="line">.\license-gen.exe</span><br></pre></td></tr></table></figure>
<p>会出现一串序列号：</p>
<div data-align="center">
<img src="https://cdn.jsdelivr.net/gh/wilfredzoz/Picture/2024/10/image-20241008151045760-3c76b5.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>复制这串序列号进入Typora中激活即可激活成功</p>
]]></content>
      <categories>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>教资科一知识点</title>
    <url>/2024/08/15/%E6%95%99%E8%B5%84%E7%A7%91%E4%B8%80%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="教育观">教育观</h1>
<pre class="mermaid">%%{ init: { 'flowchart': { 'curve': 'bumpX' } } }%%
flowchart LR
    A("教育观") ---> B("素质教育的内涵")
    
    subgraph " "
    style tip1 fill:#f9f,stroke:#333,stroke-width:4px
    tip1("提素（提高国民素质）个性（个性发展）
    创（创新精神和实践能力）
    两全（全体学生、全面发展）")
    B ---> C["素质教育以提高国民素质为根本宗旨"]
    B ---> D["素质教育是面向全体学生的教育"]
    B ---> E["素质教育是促进学生全面发展的教育"]
    B ---> F["素质教育是促进学生个性发展的教育"]
    B ---> G["素质教育是以培养学生创新精神和实践能力为重点的教育"]   
    end
    
    A--->H["新课程改革倡导的教学观"]
    
    subgraph " "
        style tip2 fill:#f9f,stroke:#333,stroke-width:4px
    tip2("学会过人")
    H--->I["教学从“教育者为中心”向“学习者为中心”转变"]
    H--->J["教学从“教会学生知识”向“教会学生学习”转变"]
    H--->K["教学从“重结论轻过程”向“重结论的同时更重过程”转变"]
    H--->L["教学从“关注学科”向“关注人”转变"]
    end</pre>
<h1 id="学生观">学生观</h1>
<pre class="mermaid">%%{ init: { 'flowchart': { 'curve': 'bumpX' } } }%%
flowchart LR
    style tip1 fill:#f9f,stroke:#333,stroke-width:4px
    
    tip1("一发（发展的人）两独（独特
的人、独立意义的人）")
    A("学生观") --->B("学生是<b>发展</b>中的人，要用
    <b>发展</b>的观点认识学生")
    
    subgraph " "
    style tip2 fill:#f9f,stroke:#333,stroke-width:4px
        tip2("全面规律过程潜能")
    B--->C["学生的身心发展是有规律的"]
    B--->D["学生具有巨大的发展潜能"]
    B--->E["学生是处于发展过程中的人"]
    B--->F["学生的发展是全面的发展"]
    end
    
    A("学生观") --->G("学生是<b>独特</b>的人")
    
    subgraph " "
        style tip3 fill:#f9f,stroke:#333,stroke-width:4px
        tip3("独特完整差异")
    G--->H["学生是完整的人"]
    G--->I["每个学生都有自身的独特性"]
    G--->J["学生与成人之间存在着巨大的差异"]
    end
    
    A("学生观") --->K("学生是具有<b>独立意义</b>的人")
    
    subgraph " "
        style tip4 fill:#f9f,stroke:#333,stroke-width:4px
    
    tip4("独立学习责权")
    K--->L["学生是独立的个体"]
    K--->M["学生是学习的主体"]
    K--->N["学生是责权主体"]
    end</pre>
<h1 id="教师观">教师观</h1>
<pre class="mermaid">%%{ init: { 'flowchart': { 'curve': 'bumpX'} } }%%
flowchart LR

    A("新课改背景下的教师观") --->B("教师角色观")
    
    subgraph " "
    style tip1 fill:#f9f,stroke:#333,stroke-width:4px
    tip1("学课研社，建促放研（见醋放盐）")
    B--->C["从教师与<b>学生</b>的关系看，新课程要求教师应该是学生学习的<b>引导者</b>和<b>促进者</b>"]
    B--->D["从教师与<b>课程</b>的关系看，新课程要求教师应该是课程的<b>建设者</b>和<b>开发者</b>"]
    B--->E["从教师与<b>研究</b>的关系看，新课程要求教师应该是教育教学的<b>研究者</b>"]
    B--->F["从<b>学校</b>与<b>社区</b>的关系看，新课程要求教师应该是社区型的<b>开放教师</b>"]

    end
    
    A--->H("教师行为观")
    
    subgraph " "
        style tip2 fill:#f9f,stroke:#333,stroke-width:4px
    tip2("师生尊重、教学启发、自我反思、其他合作")
    H--->I["在对待<b>师生关系</b>上， 新课程强调尊重、赞赏、民主、互动、教学相长"]
    H--->J["在对待<b>教学</b>上，新课程强调帮助、引导启发"]
    H--->K["在对持<b>自我</b>上， 新课程强调反思与终身学习发展"]
    H--->L["在对待<b>与其他教育者的关系</b>上，新课程强调合作"]
    end</pre>
<h1 id="教师职业道德">教师职业道德</h1>
<pre class="mermaid">%%{ init: { 'flowchart': { 'curve': 'bumpX'} } }%%
flowchart TB
    style tip1 fill:#f9f,stroke:#333,stroke-width:4px
    tip1("三爱（爱国守法、爱岗敬业、关爱学生）
    两人（教书育人、为人师表）
    一终身（终身学习）")
    A("教师职业道德")--"基本要求" -->B["爱国守法"]
    A("教师职业道德")--"本质要求" -->C["爱岗敬业"]
    A("教师职业道德")--"灵魂、核心" -->D["关爱学生"]
    A("教师职业道德")--"天职" -->E["教书育人"]
    A("教师职业道德")--"内在要求" -->F["为人师表"]
    A("教师职业道德")--"动力" -->G["终身学习"]</pre>
]]></content>
      <categories>
        <category>教资</category>
      </categories>
      <tags>
        <tag>教资</tag>
      </tags>
  </entry>
  <entry>
    <title>lazyload和pjax冲突导致图片需要刷新才能加载</title>
    <url>/2024/08/11/lazyload%E5%92%8Cpjax%E5%86%B2%E7%AA%81%E5%AF%BC%E8%87%B4%E5%9B%BE%E7%89%87%E9%9C%80%E8%A6%81%E5%88%B7%E6%96%B0%E6%89%8D%E8%83%BD%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<p>在hexo配置文件的lazyload配置中添加<code>isSPA: true</code>字段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lazyload:</span><br><span class="line">  enable: true  # 是否开启图片懒加载</span><br><span class="line">  onlypost: false  # 是否只对文章的图片做懒加载</span><br><span class="line">  loadingImg: # eg ./images/loading.gif</span><br><span class="line">  isSPA: true</span><br></pre></td></tr></table></figure>
<p>重新部署即可</p>
]]></content>
      <tags>
        <tag>Lazyload Pjax</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo图片和文件加速访问</title>
    <url>/2024/08/11/hexo%E5%9B%BE%E7%89%87%E5%92%8C%E6%96%87%E4%BB%B6%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<p>使用外链在markdown中加载github图片或者放置文件下载链接时，图片会加载失败或者加载缓慢，一开始使用jsdelivr进行加速，但是发现效果也不好，有时候也要开加速器。发现一个<a
href="https://www.7ed.net/gitmirror/hub.html">网站</a>，按照里面的做法对图片或者文件进行加速，发现效果不错。</p>
<h1 id="图片">图片</h1>
<p>图片的加速，使用typora+picgo实现将typora中的图片自动通过picgo上传至github资料库，picgo再从github资料库中返回图片的链接，嵌入markdown中加载，这个过程中使用了jsdelivr加速，也就是更改了原始github的图片链接，改为<code>cdn.jsdelivr.net</code>开头。使用的效果不稳定，有时候什么也加载不出来，只有开梯子。</p>
<p>按照上述网站的做法需要将图片地址改成如下形式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.gitmirror.com/用户名/库名/分支名/图片名</span><br></pre></td></tr></table></figure>
<p>对于已经上传在markdown的文件图片，可以使用替换将cdn.jsdelivr.net替换成上述格式</p>
<h1 id="文件">文件</h1>
<p>对于github中的文件，可以在<code>https://github.com/用户名.../文件名</code>的前面添加<code>https://hub.gitmirror.com/</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://hub.gitmirror.com/https://github.com/用户名.../文件名</span><br></pre></td></tr></table></figure>
<p>即可实现快速访问</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>加速访问</tag>
      </tags>
  </entry>
  <entry>
    <title>darkmode.js参数修改</title>
    <url>/2024/08/01/darkmode-js%E5%8F%82%E6%95%B0%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.darkmode--activated</span>&#123;</span><br><span class="line">  <span class="attr">--body-bg-color</span>: $body-bg-color-dark; //没找到</span><br><span class="line">  <span class="attr">--content-bg-color</span>: $content-bg-color-dark; //控制最下面copyright那一行的颜色</span><br><span class="line">  <span class="attr">--card-bg-color</span>: $card-bg-color-dark; //不知道干嘛的</span><br><span class="line">  <span class="attr">--text-color</span>: $text-color-dark; //正文的颜色，包括标题，引用等</span><br><span class="line">  <span class="attr">--blockquote-color</span>: $blockquote-color-dark; //引用的颜色</span><br><span class="line">  <span class="attr">--link-color</span>: $link-color-dark; // 各种链接的颜色</span><br><span class="line">  <span class="attr">--link-hover-color</span>: $link-hover-color-dark;// 各种链接的鼠标放置的颜色</span><br><span class="line">  <span class="attr">--brand-color</span>: $brand-color-dark; //不知道是啥</span><br><span class="line">  <span class="attr">--brand-hover-color</span>: $brand-hover-color-dark;</span><br><span class="line">  <span class="attr">--table-row-odd-bg-color</span>: $table-row-odd-bg-color-dark; // 表格偶数行的颜色</span><br><span class="line">  <span class="attr">--table-row-hover-bg-color</span>: $table-row-hover-bg-color-dark;  // 表格行的鼠标触碰颜色</span><br><span class="line">  <span class="attr">--menu-item-bg-color</span>: $menu-item-bg-color-dark; //鼠标放在首页五个链接时的背景颜色，和这五个链接的背景颜色</span><br><span class="line"></span><br><span class="line">  <span class="attr">--btn-default-bg</span>: $btn-default-bg-dark; //阅读全文的背景颜色</span><br><span class="line">  <span class="attr">--btn-default-color</span>: $btn-default-color-dark; //阅读全文的颜色</span><br><span class="line">  <span class="attr">--btn-default-border-color</span>: $btn-default-border-color-dark; //阅读全文下面横线的颜色</span><br><span class="line">  <span class="attr">--btn-default-hover-bg</span>: $btn-default-hover-bg-dark;//阅读全文的背景颜色hover</span><br><span class="line">  <span class="attr">--btn-default-hover-color</span>: $btn-default-hover-color-dark;////阅读全文的颜色hover</span><br><span class="line">  <span class="attr">--btn-default-hover-border-color</span>: $btn-default-hover-border-color-dark;//鼠标放在阅读全文上下面横线的颜色</span><br><span class="line"></span><br><span class="line">  <span class="attr">--highlight-background</span>: $highlight-background-dark;</span><br><span class="line">  <span class="attr">--highlight-foreground</span>: $highlight-foreground-dark;</span><br><span class="line">  <span class="attr">--highlight-gutter-background</span>: $highlight-gutter-background-dark;</span><br><span class="line">  <span class="attr">--highlight-gutter-foreground</span>: $highlight-gutter-foreground-dark;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">75</span>;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">opacity</span>: .<span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>
<blockquote>
<p>darkmode.js必须调用jquary，<a
href="%5BHexo（Next%20主题）实现可切换的%20Dark%20Mode%20(暗色背景%20/%20夜间模式)%20%7C%20雪泥鴻爪%20(dog.wtf)%5D(https://www.dog.wtf/tech/hexo-dark-mode-note/)">原文</a>中的方法没有说明开启jquary，不开启网页无法加载。若开启fancybox，由于fancybox对jquary的依赖，darkmode.js也可以使用jquary正常工作。但是fancybox与lazyload之间有冲突，导致图片加载缓慢。浏览<code>H:\Blog\themes\next\layout\_scripts\vendors.swig</code>文件，发现如果设置fancybox打开，那么fancybox会打开两个依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.fancybox %&#125;</span><br><span class="line">  &#123;%- set js_vendors = js_vendors | attr(&#x27;jquery&#x27;, &#x27;//cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js&#x27;) %&#125;</span><br><span class="line">  &#123;%- set js_vendors = js_vendors | attr(&#x27;fancybox&#x27;, &#x27;//cdn.jsdelivr.net/gh/fancyapps/fancybox@3/dist/jquery.fancybox.min.js&#x27;) %&#125;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<p>其中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- set js_vendors = js_vendors | attr(&#x27;jquery&#x27;, &#x27;//cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js&#x27;) %&#125;</span><br></pre></td></tr></table></figure>
<p>是打开jquery。所以下面设置打开mediumzoom的时候顺带打开jquery供darkmode.js使用，改写同一文件夹下的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if theme.mediumzoom %&#125;</span><br><span class="line">  &#123;%- set js_vendors = js_vendors | attr(&#x27;mediumzoom&#x27;, &#x27;//cdn.jsdelivr.net/npm/medium-zoom@1/dist/medium-zoom.min.js&#x27;) %&#125;</span><br><span class="line">  &#123;%- set js_vendors = js_vendors | attr(&#x27;jquery&#x27;, &#x27;//cdn.jsdelivr.net/npm/jquery@3/dist/jquery.min.js&#x27;) %&#125;//加入</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<p>设置为打开mediumzoom的时候也打开jquery，保存后hexo clean &amp;&amp;
hexo s &amp;&amp; hexo s 看到可以正常使用darkmode.js</p>
</blockquote>
<p>下面是在暗黑模式下，各行代码控制的颜色位置：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attr">--content-bg-color</span>: $content-bg-color-dark;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月01日21时30分25秒-image-20240801213018350.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attr">--blockquote-color</span>: $blockquote-color-dark;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月01日21时37分44秒-image-20240801213744428.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attr">--link-color</span>: $link-color-dark; //绿色部分</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月01日21时42分48秒-image-20240801214248271.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月01日21时43分40秒-image-20240801214340599.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月01日21时44分03秒-image-20240801214403187.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月01日21时44分21秒-image-20240801214421026.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月01日21时44分35秒-image-20240801214435022.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月01日21时44分55秒-image-20240801214455322.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attr">--table-row-odd-bg-color</span>: $table-row-odd-bg-color-dark;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月01日21时51分10秒-image-20240801215109984.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attr">--menu-item-bg-color</span>: $menu-item-bg-color-dark; </span><br></pre></td></tr></table></figure>
<p>鼠标触碰时背景的颜色和直接五个链接的背景颜色</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月01日21时57分27秒-image-20240801215727610.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attr">--btn-default-color</span>: $btn-default-color-dark;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月01日22时08分28秒-image-20240801220828053.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attr">--btn-default-border-color</span>: $btn-default-border-color-dark;</span><br></pre></td></tr></table></figure>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月01日22时10分45秒-image-20240801221045003.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>darkmode.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown格式文章目录降级</title>
    <url>/2024/07/29/Markdown%E6%A0%BC%E5%BC%8F%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E9%99%8D%E7%BA%A7/</url>
    <content><![CDATA[<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fileName = <span class="string">r&#x27;地址\需要修改的笔记.md&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file=fileName, mode=<span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f1:</span><br><span class="line">    lines = f1.readlines()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(lines)):</span><br><span class="line">        <span class="keyword">if</span> lines[i][<span class="number">0</span>] == <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">            lines[i] = <span class="string">&#x27;#&#x27;</span> + lines[i]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将处理过的lines写入新的文件中</span></span><br><span class="line">fileName2 = <span class="string">r&#x27;地址\修改后输出的笔记.md&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file=fileName2, mode=<span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    f2.writelines(lines)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
  </entry>
  <entry>
    <title>完全删除JupyterNotebook</title>
    <url>/2024/07/29/%E5%AE%8C%E5%85%A8%E5%88%A0%E9%99%A4JupyterNotebook/</url>
    <content><![CDATA[<p>在CMD中运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip uninstall -y zipp traitlets pyrsistent importlib-resources attrs wcwidth &amp;&amp; pip uninstall tornado pyzmq pycparser pure-eval ptyprocess parso nest-asyncio &amp;&amp; pip uninstall jupyter-core jsonschema fastjsonschema executing entrypoints &amp;&amp; pip uninstall asttokens webencodings stack-data soupsieve pygments &amp;&amp;pip uninstall prompt-toolkit pickleshare pexpect nbformat matplotlib-inline &amp;&amp;pip uninstall MarkupSafe jupyter-client jedi decorator cffi backcall tinycss2 &amp;&amp; pip uninstall psutil pandocfilters nbclient mistune jupyterlab-pygments &amp;&amp; pip uninstall jinja2 ipython defusedxml debugpy bleach beautifulsoup4 argon2-cffi-bindings &amp;&amp; pip uninstall terminado Send2Trash prometheus-client nbconvert ipython-genutils &amp;&amp; pip uninstall ipykernel argon2-cffi notebook</span><br></pre></td></tr></table></figure>
<p>全部选择<code>Y</code>即可完全删除JupyterNotebook及其配套的包</p>
]]></content>
      <categories>
        <category>JupyterNotebook</category>
      </categories>
  </entry>
  <entry>
    <title>typora链接跳转设置</title>
    <url>/2024/07/27/typora%E9%93%BE%E6%8E%A5%E8%B7%B3%E8%BD%AC%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="超链接跳转">超链接跳转</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[需要显示的文本](跳转的网页地址)</span><br></pre></td></tr></table></figure>
<p><a href="https://wilfredzoz.github.io/">博客地址</a></p>
<p><a
href="https://wilfredzoz.github.io/2024/06/21/Python%E7%AC%94%E8%AE%B0/">跳转Python笔记文档</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[需要显示的文本](跳转的网页地址 鼠标放在链接上显示的内容)</span><br></pre></td></tr></table></figure>
<p><a href="https://www.bilibili.com" title="Let&#39;s go">jump to
bilibili</a></p>
<h1 id="跳转测试一级标题">跳转测试一级标题</h1>
<h1 id="跳转测试一级特殊标题">跳转测试一级特殊标题!</h1>
<h1 id="english_title">English_title</h1>
<h1 id="中英混合english">中英混合English!</h1>
<h1 id="本地文件跳转">本地文件跳转</h1>
<p>只能在本地使用，一旦部署在服务器就会失效</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 跳到当前目录下的Readme1.md文件</span><br><span class="line">[Readme1](Readme1.md)</span><br><span class="line"></span><br><span class="line">// 跳到当前目录下的Readme3文件夹</span><br><span class="line">[Readme3](Readme3)</span><br><span class="line"></span><br><span class="line">// 相对路径跳到上级目录的某个文件</span><br><span class="line">[Readme2](../Docs/Readme2.markdown)</span><br><span class="line"></span><br><span class="line">// 绝对路径跳转到C盘下的某个md文件</span><br><span class="line">[Readme4](C:/Develop/Docs/Readme1.md)</span><br></pre></td></tr></table></figure>
<h1 id="跳转测试一级标题-1">跳转测试一级标题</h1>
<h2 id="跳转测试二级标题">跳转测试二级标题</h2>
<p><a name="anchor">锚点</a></p>
<h1 id="页面内部跳转">页面内部跳转</h1>
<p>在typora中按<code>ctrl+鼠标左键</code>即可前往</p>
<ul>
<li>标题跳转</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[显示的文字](#跳转的标题) 注意二级标题之前也是只加一个#</span><br></pre></td></tr></table></figure>
<p><a href="#跳转测试一级标题">跳转至测试一级标题</a></p>
<p><a href="#跳转测试二级标题">跳转至测试二级标题</a></p>
<ul>
<li>若是遇到重名的标题跳转跳转</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[显示的文字](#跳转的标题-数字)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[跳转至第一个测试一级标题](#跳转测试一级标题)</span><br></pre></td></tr></table></figure>
<p><a href="#跳转测试一级标题">跳转至第一个测试一级标题</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[跳转至第二个测试一级标题](#跳转测试一级标题-1)</span><br></pre></td></tr></table></figure>
<p><a href="#跳转测试一级标题-1">跳转至第二个测试一级标题</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[跳转至第二个测试一级标题](#跳转测试一级标题-2)</span><br></pre></td></tr></table></figure>
<p><a href="#跳转测试一级标题-2">跳转至第三个测试一级标题</a></p>
<ul>
<li>锚点跳转</li>
</ul>
<p>设置锚点（要跳转到的点）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;锚点名字&quot;</span>&gt;</span>锚点显示的名字<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>设置出发点</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#锚点名字&quot;</span>&gt;</span>显示的文字<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>typora中，在出发点按<code>ctrl+鼠标左键</code>即可前往锚点</p>
<blockquote>
<p>注意<code>name="锚点名字"</code>和<code>href="#锚点名字"</code>中锚点名字要相同，注意<code>href="#锚点名字"</code>中在锚点名字前多了一个<code>#</code></p>
</blockquote>
<p><a href="#anchor">跳转至锚点</a></p>
<h1 id="跳转测试一级标题-2">跳转测试一级标题</h1>
<h1 id="带有特殊字符的跳转">带有特殊字符的跳转</h1>
<p><a href="#跳转测试一级特殊标题">跳转特殊标题</a></p>
<p><a href="#english_title">跳转至英文标题</a></p>
<p><a href="#本地文件跳转">跳转至中文标题</a></p>
<p><a href="#中英混合english">跳转至中英混合标题</a></p>
<blockquote>
<p>带特殊字符的跳转在typora上可以，在Hexo(vscode也不行)上就不行了，只有中文的标题可以进行跳转，不知道为什么，目前最稳定的就是用锚点进行跳转</p>
<blockquote>
<p><strong>解决方法：</strong></p>
<p>在文内标题跳转的时候，注意写出发点<code>[]()</code>中<code>(#标题名称)</code>要有一定规范</p>
<ul>
<li>若要跳转的链接中有英文字母，那么<code>(#标题名称)</code>中的英文字母不能大写</li>
<li>若要跳转的链接中有特殊符号，那么<code>(#标题名称)</code>中直接省略这些标题中的特殊符号</li>
</ul>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>链接跳转</tag>
      </tags>
  </entry>
  <entry>
    <title>c2r版本office安装</title>
    <url>/2024/07/22/c2r%E7%89%88%E6%9C%ACoffice%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>在office
2016以前，office可以按照正常的安装程序进行，可以选择安装的软件和安装的位置。在之后的版本中推出的C2R版本的office（click
to
run）。这个版本的官方版本不能选择安装位置，只能默认选择宣布安装office全家桶，非常麻烦，下面写出使用Office
Tool Plus工具来对C2R的officec采取自定义安装（安装位置除外）</p>
<p>首先完全卸载之前版本的office，下载<a
href="https://www.lanzoub.com/igGw71rxtg8f">c2r版office卸载</a>用于2016版本之后的office删除，下载<a
href="https://www.lanzoub.com/i4EbA1rxtgah">msi版office卸载</a>，用于删除2016版本之前的office</p>
<p>删除完成后，下载<a
href="https://github.com/YerongAI/Office-Tool/releases/">Office Tool
Plus工具</a>，解压之后打开，选择要下载的office版本、软件选项和语言，<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月23日00时10分21秒-image-20240723001021395.png" /></p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月23日00时10分00秒-image-20240723001000221.png" /></p>
<p>点击开始部署就会开始自动安装所选的office软件</p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月23日00时21分39秒-image-20240723002139131.png" /></p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月23日00时23分59秒-image-20240723002359078.png" /></p>
<p>安装完成后开始激活office，在激活中填入<a
href="https://www.coolhub.top/tech-articles/kms_list.html">主机网址</a></p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月23日00时27分31秒-image-20240723002731276.png" /></p>
<p>安装对应版本的许可证</p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月23日00时28分48秒-image-20240723002848553.png" /></p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月23日00时29分12秒-image-20240723002912338.png" /></p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月23日00时29分29秒-image-20240723002929659.png" /></p>
<p>最后点击激活</p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月23日00时33分40秒-image-20240723003340183.png" /></p>
<p>发现错误，改用软件激活</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年08月11日18时11分48秒-image-20240811181148066.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>该软件激活只有180天的时效</p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月23日00时37分40秒-image-20240723003740491.png" /></p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月23日00时37分51秒-image-20240723003751797.png" /></p>
<p><a href="https://www.jianshu.com/p/6f124f5f7364">原文地址</a></p>
]]></content>
      <categories>
        <category>MSOffice</category>
      </categories>
  </entry>
  <entry>
    <title>sunshine+moonlight串流，moonlight找不到主机</title>
    <url>/2024/07/16/sunshine-moonlight%E4%B8%B2%E6%B5%81%EF%BC%8Cmoonlight%E6%89%BE%E4%B8%8D%E5%88%B0%E4%B8%BB%E6%9C%BA/</url>
    <content><![CDATA[<p>在设置好PC端的sunshine后，打算用ios端得到moonlight作为接收端，但是输入ipv4的地址后找不到主机，使用以下方法后问题成功解决</p>
<p>如果使用Windows
Defender防火墙，则可能还需添加两条命令：以管理员身份打开命令提示符或PowerShell窗口，运行以下2个命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netsh advfirewall firewall add rule name=<span class="string">&quot;GameStream UDP&quot;</span> <span class="built_in">dir</span>=<span class="keyword">in</span> protocol=udp localport=5353,47998-48010 action=allow</span><br><span class="line">netsh advfirewall firewall add rule name=<span class="string">&quot;GameStream TCP&quot;</span> <span class="built_in">dir</span>=<span class="keyword">in</span> protocol=tcp localport=47984,47989,48010 action=allow</span><br></pre></td></tr></table></figure>
<p><a
href="https://bbs.a9vg.com/thread-5365751-1-1.html">参考文章地址</a></p>
]]></content>
      <categories>
        <category>主机串流</category>
      </categories>
      <tags>
        <tag>Moonlight</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo文章加密</title>
    <url>/2024/07/13/hexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<p>在Blog根目录下下载<code>hexo-blog-encrypt</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypt</span><br></pre></td></tr></table></figure>
<p>接着直接在文章信息头添加<code>password</code>字段就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2016-03-30 21:18:02</span><br><span class="line">password: hello</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>经过<code>hexo clean</code>重新部署后可以看到效果：</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月13日15时27分36秒-image-20240713152729001.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>如果输错密码会显示：</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月13日15时28分36秒-image-20240713152836089.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>添加了文章的信息头描述：</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月13日15时29分40秒-image-20240713152940610.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月13日15时29分28秒-image-20240713152927984.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>文章会显示信息头的描述信息，如果删除<code>description</code>且开启密码，则会显示：</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月13日15时31分55秒-image-20240713153155902.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>上述这些内容都是在<code>\Blog\node_modules\hexo-blog-encrypt\index.js</code>中进行更改的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultConfig = &#123;</span><br><span class="line">  <span class="string">&#x27;abstract&#x27;</span>: <span class="string">&#x27;文章被加密，请输入密码查看&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;请输入密码&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;theme&#x27;</span>: <span class="string">&#x27;up&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;wrong_pass_message&#x27;</span>: <span class="string">&#x27;密码错误，请重试&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;wrong_hash_message&#x27;</span>: <span class="string">&#x27;文章不能被校验&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;silent&#x27;</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>上述是默认设置，在只添加<code>password</code>字段后，其余的内容（提示输入密码、密码输入错误和主题等）都按照默认的显示，注意<code>abstract</code>字段，若添加在文章信息头则不能为空，若文章信息头有<code>description</code>字段，那么文章主页的摘要中会优先显示<code>description</code>字段，没有<code>description</code>字段才会显示默认的<code>abstract</code>或者信息头填写的<code>abstract</code></p>
<p>而且<code>description</code>字段会显示在文章的下方，<code>abstract</code>不会</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月13日15时37分54秒-image-20240713153754223.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<h2 id="为tags添加密码">为tags添加密码</h2>
<p>在<code>\Blog\_config_yml</code>中添加以下语句：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Security</span></span><br><span class="line"><span class="attr">encrypt</span>: # hexo-blog-encrypt</span><br><span class="line">  <span class="attr">abstract</span>: 有东西被加密了, 请输入密码查看.</span><br><span class="line">  <span class="attr">message</span>: 您好, 这里需要密码.</span><br><span class="line">  <span class="attr">tags</span>:</span><br><span class="line">  - &#123;<span class="attr">name</span>: tagName, <span class="attr">password</span>: 密码A&#125;</span><br><span class="line">  - &#123;<span class="attr">name</span>: tagName, <span class="attr">password</span>: 密码B&#125;</span><br><span class="line">  <span class="attr">theme</span>: xray</span><br><span class="line">  <span class="attr">wrong_pass_message</span>: 抱歉, 这个密码看着不太对, 请再试试.</span><br><span class="line">  <span class="attr">wrong_hash_message</span>: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.</span><br></pre></td></tr></table></figure>
<p>如果添加了语句，那么创建有特定标签的文章就算不添加<code>password</code>字段，也要输入密码</p>
<p>注意在<code>\Blog\_config_yml</code>中添加上述内容后，默认设置就变为上面的了，<code>\Blog\node_modules\hexo-blog-encrypt\index.js</code>中的默认设置无效</p>
<h2
id="对某一个属于加密tags的文章解除加密">对某一个属于加密tags的文章解除加密</h2>
<p>只需要在该文章的信息头添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password: &#x27;&#x27;</span><br></pre></td></tr></table></figure>
<p>详细内容看<a
href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/master/ReadMe.zh.md#_configyml">hexo-blog-encrypt官方主页</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo嵌入pdf阅读与文件下载</title>
    <url>/2024/07/13/hexo%E5%B5%8C%E5%85%A5pdf%E9%98%85%E8%AF%BB%E4%B8%8E%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>打开<code>\Blog\themes\next\_config.yml</code>中的pdf设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># PDF tag</span><br><span class="line"># NexT will <span class="keyword">try</span> to load pdf files natively, <span class="keyword">if</span> failed, pdf.js will be used.</span><br><span class="line"># So, you have to install the dependency of pdf.js <span class="keyword">if</span> you want to use pdf tag and make it available to all browsers.</span><br><span class="line"># See: https:<span class="comment">//github.com/theme-next/theme-next-pdf</span></span><br><span class="line">pdf:</span><br><span class="line">  enable: <span class="literal">true</span> <span class="comment">//打开</span></span><br><span class="line">  # Default height</span><br><span class="line">  height: 500px</span><br></pre></td></tr></table></figure>
<p>去<a
href="https://mozilla.github.io/pdf.js/getting_started/#download">pdf.js官网</a>下载<code>older browsers</code>版本的<code>pdf.js</code>，在<code>\Blog\source</code>目录下新建文件夹<code>pdfjs</code>，将下载的压缩包解压至<code>\Blog\source\pdfjs</code>中，接着在<code>\Blog\source</code>下创建<code>data</code>文件夹用来存储pdf文件或其他文件。</p>
<p>使用如下语法在<code>.md</code>文章的适当位置加入pdf阅读器：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;/pdfjs/web/viewer.html?file=/data/(data文件夹中pdf文件的文件名).pdf&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800px&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">type</span>=<span class="string">&quot;application/pdf&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<p>在<code>\Blog\_config.yml</code>中的<code>skip_render</code>下包括<code>- 'pdfjs/**/*</code>即：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># <span class="title class_">Directory</span></span><br><span class="line"><span class="attr">source_dir</span>: source</span><br><span class="line"><span class="attr">public_dir</span>: public</span><br><span class="line"><span class="attr">tag_dir</span>: tags</span><br><span class="line"><span class="attr">archive_dir</span>: archives</span><br><span class="line"><span class="attr">category_dir</span>: categories</span><br><span class="line"><span class="attr">code_dir</span>: downloads/code</span><br><span class="line"><span class="attr">i18n_dir</span>: :lang</span><br><span class="line"><span class="attr">skip_render</span>:</span><br><span class="line">    - <span class="string">&#x27;pdfjs/**/*&#x27;</span></span><br></pre></td></tr></table></figure>
<p>重新部署博客后发现电脑端和ipad端可以显示，但是手机端有问题无法显示</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月13日10时15分04秒-image-20240713101457190.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>查询<a
href="https://cloud.tencent.com/developer/article/2065822">资料</a>后发现可能跨域显示会出错,但是我的这种情况和<a
href="https://cloud.tencent.com/developer/article/2065822">资料</a>的这种情况不一致。继续<a
href="https://blog.csdn.net/weixin_45682058/article/details/135277611">查询</a>发现这个降低<code>pdf.js</code>的版本有用，于是像资料中所示在<code>pdf.js</code>的<a
href="https://github.com/mozilla/pdf.js/releases?page=4">release</a>中下载了<code>2.2.228</code>版本的<code>pdf.js</code>，重复上述的步骤，手机端也成功显示</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月13日10时22分02秒-ebe38ac78badd767170234f45219acf.jpg"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>嵌入测试：</p>
<div>
<p><iframe src="/pdfjs/web/viewer.html?file=/data/第5章-大样本OLS.pdf" width="100%" height="800px" frameborder="0" type="application/pdf"></iframe></p>
</div>
<blockquote>
<p>文件的下载链接嵌入和pdf类似，将文件放入<code>data</code>文件夹中，直接进行<code>[](/data/文件全名)</code>引用，即可实现文件的点击下载。</p>
<p>文件下载测试</p>
<p><a href="/data/第5章-大样本OLS.pdf">点击下载文件（pdf）</a></p>
<p><a href="/data/narwhal.rar">点击下载文件（rar）</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo内嵌pdf阅读器</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo以新窗口打开链接</title>
    <url>/2024/07/13/hexo%E4%BB%A5%E6%96%B0%E7%AA%97%E5%8F%A3%E6%89%93%E5%BC%80%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<p>在hexo的配置文件<code>_config.yml</code>中找到如下字段：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">external_link</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span> # <span class="title class_">Open</span> external links <span class="keyword">in</span> <span class="keyword">new</span> tab</span><br><span class="line">  <span class="attr">field</span>: site # <span class="title class_">Apply</span> to the whole site</span><br><span class="line">  <span class="attr">exclude</span>: <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>即可使用新窗口打开链接</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>hexo中mermaid背景&#92;主题设置</title>
    <url>/2024/07/12/hexo%E4%B8%ADmermaid%E8%83%8C%E6%99%AF-%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>如果想把代码块的颜色调为黑色，那么mermaid代码块的背景也会变为黑色，但是mermaid图中的指示先通常为黑色，这就导致了mermaid图的模糊不清</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月12日22时04分52秒-image-20240712220452753.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月12日22时03分01秒-image-20240712220301226.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>我想做的就是就是在不更改代码块的背景颜色下，只更改mermaid代码块的背景颜色</p>
<p>首先确保了安装了mermaid的显示库，否则在<code>bash</code>中进行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure>
<p>参考<a
href="https://benpaodewoniu.github.io/2020/03/06/hexo15/">这个资料</a>，其中有更改mermaid背景颜色的方法，需要在<code>themes\next\source\css\_custom\custom.styl</code>位置中更改<code>custom.styl</code>文件的内容，但是找不到这个文件，查询资料得知新版的的Hexo删除了这个文件夹，以下方法与原方法等效：在<code>Blog\themes\next\source\css</code>下创建新文件夹<code>_custom</code>在<code>_custom</code>中创建文件<code>custom.styl</code>,再在<code>H:\Blog\themes\next\source\css\main.styl</code>文件中添加语句：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&quot;_custom/custom&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>这样在<code>\Blog\themes\next\source\css\_custom\custom.styl</code>文件中修改就相当于在原来<code>themes\next\source\css\_custom\custom.styl</code>中进行修改。</p>
<p>创建好上述的文件夹<code>_custom</code>和文件<code>custom.styl</code>后，在<code>custom.styl</code>中添加：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">mermaid</span>&#123;</span><br><span class="line">  text-<span class="attr">align</span>: center;</span><br><span class="line">  <span class="attr">background</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述设置是让mermaid流程图居中，且背景显示为透明</p>
<p>在<code>Blog\themes\next\_comfig.yml</code>中k可以更改以下字段选择mermaid的主题类型，但首先必须开启mermaid</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Mermaid tag</span><br><span class="line">mermaid:</span><br><span class="line">  enable: true</span><br><span class="line">  # Available themes: default | dark | forest | neutral</span><br><span class="line">  theme: neutral</span><br></pre></td></tr></table></figure>
<p>通过<code>hexo clean &amp; hexo g &amp; hexo s</code>进入<code>http://localhost:4000/</code>查看发现主题与设置的不对</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月12日22时23分36秒-image-20240712222336602.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>而且上传至github通过工作流部署在网页上，发现主题虽然正确，但是背景仍然为设置的代码块的黑色背景</p>
<p>于是在工作流上加入了<code>npm install hexo-filter-mermaid-diagrams</code>的步骤</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>: <span class="title class_">Deploy</span> <span class="title class_">Hexo</span> to <span class="title class_">GitHub</span> <span class="title class_">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on</span>:</span><br><span class="line">  <span class="attr">push</span>:</span><br><span class="line">    <span class="attr">branches</span>:</span><br><span class="line">      - main  # 当推送到 main 分支时触发</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs</span>:</span><br><span class="line">  <span class="attr">build</span>:</span><br><span class="line">    runs-<span class="attr">on</span>: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps</span>:</span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Checkout</span> repository</span><br><span class="line">        <span class="attr">uses</span>: actions/checkout@v2</span><br><span class="line">        <span class="attr">with</span>:</span><br><span class="line">          <span class="attr">submodules</span>: <span class="literal">false</span>  # 禁用子模块检查</span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Setup</span> <span class="title class_">Node</span>.<span class="property">js</span></span><br><span class="line">        <span class="attr">uses</span>: actions/setup-node@v2</span><br><span class="line">        <span class="attr">with</span>:</span><br><span class="line">          node-<span class="attr">version</span>: <span class="string">&#x27;20&#x27;</span></span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Install</span> <span class="title class_">Dependencies</span></span><br><span class="line">        <span class="attr">run</span>: npm install</span><br><span class="line">        </span><br><span class="line">        # <span class="title class_">Install</span> pandoc <span class="keyword">for</span> mathjax (<span class="title class_">Optional</span>)</span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Install</span> pandoc</span><br><span class="line">        <span class="attr">run</span>: |</span><br><span class="line">          wget -c <span class="attr">https</span>:<span class="comment">//github.com/jgm/pandoc/releases/download/3.2/pandoc-3.2-1-amd64.deb</span></span><br><span class="line">          sudo dpkg -i pandoc-<span class="number">3.2</span>-<span class="number">1</span>-amd64.<span class="property">deb</span></span><br><span class="line">          </span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Install</span> hexo-filter-mermaid-diagrams</span><br><span class="line">        <span class="attr">run</span>: |</span><br><span class="line">          npm install hexo-filter-mermaid-diagrams</span><br><span class="line">           </span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Install</span> <span class="title class_">Hexo</span> <span class="title class_">Git</span> <span class="title class_">Deployer</span></span><br><span class="line">        <span class="attr">run</span>: |</span><br><span class="line">          npm install hexo-deployer-git --save</span><br><span class="line">          npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Clean</span> and <span class="title class_">Generate</span> <span class="title class_">Static</span> <span class="title class_">Files</span></span><br><span class="line">        <span class="attr">run</span>: |</span><br><span class="line">          hexo clean</span><br><span class="line">          hexo generate</span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Configure</span> <span class="title class_">Git</span></span><br><span class="line">        <span class="attr">run</span>: |</span><br><span class="line">          git config --<span class="variable language_">global</span> user.<span class="property">name</span> <span class="string">&#x27;github-actions[bot]&#x27;</span></span><br><span class="line">          git config --<span class="variable language_">global</span> user.<span class="property">email</span> <span class="string">&#x27;github-actions[bot]@users.noreply.github.com&#x27;</span></span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Deploy</span> to <span class="title class_">GitHub</span> <span class="title class_">Pages</span></span><br><span class="line">        <span class="attr">env</span>:</span><br><span class="line">          <span class="attr">GH_TOKEN</span>: $&#123;&#123; secrets.<span class="property">GH_TOKEN</span> &#125;&#125;</span><br><span class="line">        <span class="attr">run</span>: |</span><br><span class="line">          cd public/</span><br><span class="line">          git init</span><br><span class="line">          git add -A</span><br><span class="line">          git commit -m <span class="string">&quot;Create by workflows&quot;</span></span><br><span class="line">          git remote add origin <span class="attr">https</span>:<span class="comment">//$&#123;&#123; secrets.GH_TOKEN &#125;&#125;@github.com/wilfredzoz/wilfredzoz.github.io.git</span></span><br><span class="line">          git push origin <span class="attr">HEAD</span>:master -f                 </span><br></pre></td></tr></table></figure>
<p>再次通过工作流自动部署，mermaid代码块背景变为透明，且主题正确：</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月12日22时32分03秒-image-20240712223203524.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<p>这里发现一个问题，当设置了<code>\Blog\themes\next\source\css\_custom\custom.styl</code>文件，<code>hexo clean &amp; hexo g &amp; hexo s</code>进行本地预览之后，更改主题看不到本地的变化，目前不知道是什么原因(可能是没有<code>hexok clean?</code>)</p>
<p>又发现一个问题：在工作流配置文件内容中，就算不需要</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">- <span class="attr">name</span>: <span class="title class_">Install</span> hexo-filter-mermaid-diagrams</span><br><span class="line">  <span class="attr">run</span>: |</span><br><span class="line">    npm install hexo-filter-mermaid-diagrams</span><br></pre></td></tr></table></figure>
<p>这一步，<code>\Blog\themes\next\source\css\_custom\custom.styl</code>文件中的内容依然可以修改mermaid的背景颜色，但是之前如果不加这个步骤，背景颜色就不会变，目前不知道是什么原因(可能是没有<code>hexok clean?</code>)</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Mermaid</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客中mathjax公式格式</title>
    <url>/2024/06/22/hexo%E5%8D%9A%E5%AE%A2%E4%B8%ADmathjax%E5%85%AC%E5%BC%8F%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<p>在输入公式中,要注意一些规范</p>
<p>在hexo博客中:</p>
<ul>
<li>若公式中需要输入两个连起来的<code>&#123;&#123;&#125;&#125;</code>,在相同的符号之间加上一个空格,变成<code>&#123; &#123;&#125; &#125;</code>
.否则执行<code>hexo g</code> 的时候会出错</li>
<li>在输入矩阵的LATEX公式时,表达式中不要留出多余的空行,否则会出错</li>
<li>上述两个问题都会报错:<code>Nunjucks Error: _posts/文件名.md [Line xx, Column xx] expected variable end</code></li>
</ul>
<span id="more"></span>
<p>在Github中:</p>
<ul>
<li><p>在 <span class="math inline">\(\LaTeX{}\)</span>
中，如果要输入行内代码用一个 <code>$</code>
括起来:<code>$+LATEX代码+$</code> , 注意
<code>$</code>不能与字符或符号相连,否则GITHUB无法显示</p></li>
<li><p>注意软换行和硬换行，在Typora中，ENTER键为硬换行，在源码内查看其实是换了两行，但是在预览区域可能无法清晰的看出来；而SHIFT+ENTER为软换行，在源码中换一行</p></li>
<li><p>在输入代码块时，一定要注意以下要求：</p></li>
</ul>
<p>空行</p>
<p>【顶格】 <strong>$$</strong></p>
<p>latex代码</p>
<p>【顶格】 <strong>$$</strong></p>
<p>空行</p>
<p>上下只能空<code>一行</code>，否则GITHUB不能读出来</p>
<ul>
<li><p>在写行内代码时： $与代码之间不能有空格</p>
<p>eg：<code>[空格]$LATEX代码$[空格]</code></p></li>
<li><p>在写下标的时候记得在_后加一个空格，否则Github可能不会显示出公式来，原因未知</p>
<p>eg: <code>$X_[空格]n$</code></p></li>
<li><p>若有比较符号：0 &lt; k &lt; n，在比较的左右加上空格</p>
<p>eg： <code>$0[空格]&lt;[空格]k[空格]&lt;[空格]n$</code></p></li>
<li><p>求和符号的写法需要改变：</p></li>
</ul>
<p>\sum_ {t=1}^{n-k}： <span class="math inline">\(\sum\limits_
{t=1}^{n-k}\)</span></p>
<p>\sum_ {t=1}^{n-k}： <span class="math inline">\(\sum\nolimits_
{t=1}^{n-k}\)</span></p>
<p>若不加<code>\limits</code> 或 <code>\nolimits</code>
Github可能会显示出错</p>
<p><span class="math inline">\(\begin{matrix}
A.\frac{\sum\limits_{i=1}^{n}(x_{i}-\bar{x})(y_{i}-\bar{y})}{\sum\limits_{i=1}^{n}(y_{i}-\bar{y})^2}
&amp;&amp;
B.\frac{\sum\limits_{i=1}^{n}(x_{i}-\bar{x})(y_{i}-\bar{y})}{\sum\limits_{i=1}^{n}x_{i}^2}
\\
C.\frac{\sum\limits_{i=1}^{n}(x_{i}-\bar{x})(y_{i}-\bar{y})}{\sum\limits_{i=1}^{n}(x_{i}-\bar{x})^2}  &amp;&amp;
D.\frac{\sum\limits_{i=1}^{n}(x_{i}-\bar{x})^2}{\sum\limits_{i=1}^{n}(y_{i}-\bar{y})^2}
\end{matrix}\)</span></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>mathjax</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客调整边缘留白大小</title>
    <url>/2024/06/21/hexo%E5%8D%9A%E5%AE%A2%E8%B0%83%E6%95%B4%E8%BE%B9%E7%BC%98%E7%95%99%E7%99%BD%E5%A4%A7%E5%B0%8F/</url>
    <content><![CDATA[<h3 id="将文章部分加宽">将文章部分加宽</h3>
<p>默认的文章面积有点小，两边都有很多空白，可以加宽一下。</p>
<p>编辑<code>H:\Blog\themes\next\source\css\_variables\Mist.styl</code>文件，新增变量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改成你期望的宽度</span></span><br><span class="line">$content-desktop = 700px</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当视窗超过 1600px 后的宽度</span></span><br><span class="line">$content-desktop-large = 900px</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>Python安装源码遇到的问题</title>
    <url>/2024/06/21/Python%E5%AE%89%E8%A3%85%E6%BA%90%E7%A0%81%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在安装python包pyflux时，提示找不到轮子文件，换下载源也没用</p>
<p>于是想去网上找pyflux的轮子进行下载，没想到网上一个轮子也没有。</p>
<p>再github找到python的源码，整个文件下载下来，再cmd中进入源码的根目录（setup.py）文件的目录，使用</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">python setup.py bdist_wheel</span><br></pre></td></tr></table></figure>
<p>可以在根目录下的dist文件夹中生成whl文件</p>
<span id="more"></span>
<p>但是在使用上述命令的过程中提示报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">error</span>: <span class="title class_">Microsoft</span> <span class="title class_">Visual</span> C++ <span class="number">14.0</span> or greater is required. <span class="title class_">Get</span> it <span class="keyword">with</span> <span class="string">&quot;Microsoft C++ Build Tools&quot;</span>: <span class="attr">https</span>:<span class="comment">//visualstudio.microsoft.com/visual-cpp-build-tools/</span></span><br></pre></td></tr></table></figure>
<p>提示需要下载<code>Microsoft Visual C++ 14.0 or greater</code>，下载之后重新执行</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">python setup.py bdist_wheel</span><br></pre></td></tr></table></figure>
<p>成功在dist文件夹下生成了<code>pyflux-0.4.17-cp310-cp310-win_amd64.whl</code>文件</p>
<p>在cmd中cd进入whl文件的目录，执行命令</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pip install pyflux-<span class="number">0.4</span><span class="number">.17</span>-cp310-cp310-win_amd64.<span class="property">whl</span></span><br></pre></td></tr></table></figure>
<p>成功在pycharm中安装了pyflux</p>
<p>但是在后续的运用中发现pyflux与numpy的版本兼容性有问题，需要降低numpy版本，测试安装<code>numpy1.23.2</code>版本有用，cmd中使用以下命令</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pip install numpy==<span class="number">1.23</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>
<p>成功使用pyflux</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python第三方包</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+github-action工作流完成博客的自动部署与源代码备份</title>
    <url>/2024/06/20/hexo-github-action%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%8C%E6%88%90%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%B8%8E%E6%BA%90%E4%BB%A3%E7%A0%81%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<p>在搭建好个人博客之后，当然希望能够随时对自己的博客源代码进行备份，这是马上就会想到能否用github进备份，因为源代码文件多，但是大小都不大。但还有另外一个问题，也就是hexo的静态文件生成的问题，随着博客文件的增多，hexo每次进行<code>hexo g</code>的时候，都会生成大量的静态文件，生成的时间也会越来越久。</p>
<p>githun
action提供了一种新的选择，它可以在对文件进行备份的时候，同时进行自动部署。由于github的文件上传只会对有更变的文件进行，所以生成静态文件这一步就不必操心。</p>
<p>当备份完文件之后，github
action可以自动在远程运行我们设置好的工作流，像分布式一样在远程端进行静态文件的生成，并把这些文件推送至github
pages所连接的资料库，生成博客，不需要再本地进行运行。具体的步骤如下：</p>
<p>（<code>mermaid</code>的显示需要再本地安装进行<code>npm install hexo-filter-mermaid-diagrams --save</code>）</p>
<pre class="mermaid">flowchart LR
        A["上传博客更新文件至github的博</br>客源代码库"] -->|"触发工作流，生成静态文件上传至</br>连接GitHub pages的库（username.github.io）"|B(博客更新)</pre>
<p>在Blog根目录打开<code>git bash</code>，删除<code>H:\Blog\themes\使用的主题</code>中的<code>.git</code>文件</p>
<span id="more"></span>
<h2 id="初始化本地仓库">初始化本地仓库</h2>
<p>输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>
<p>输入github用户名和邮箱：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">name</span> <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">email</span> <span class="string">&quot;youremail@yourdomain.com&quot;</span></span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="生成密钥">生成密钥</h2>
<p>密钥在<code>C:\User\xxx.ssh\</code>
这个文件夹中。xxx是你的windows用户名。其中<code>id_rsa.pub</code>为公钥，<code>id_rsa</code>为私钥</p>
<p>将公钥中的内容复制到github网站的<code>settings</code>-<code>SSH and GPG keys</code>-<code>New SSH key</code></p>
<p>检查git是否与github通过SSH连接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.<span class="property">com</span></span><br></pre></td></tr></table></figure>
<p>若出现<code>successfully</code>的字样，表示连接成功</p>
<h2
id="创建存放博客源文件的私有仓库要开启工作流和资料库等选项">创建存放博客源文件的私有仓库（要开启工作流和资料库等选项）</h2>
<h2 id="将本地仓与私有仓连接">将本地仓与私有仓连接</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git remote add origin 远程仓库的<span class="variable constant_">SSH</span>地址</span><br><span class="line"># git remote add origin git@github.<span class="property">com</span>:username/reponame.<span class="property">git</span></span><br></pre></td></tr></table></figure>
<h2 id="从远程仓管获得最新更改">从远程仓管获得最新更改</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git pull origin main</span><br></pre></td></tr></table></figure>
<p>如果出现不相关历史的错误提示，您可以使用以下命令来解决：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git pull origin main --allow-unrelated-histories</span><br></pre></td></tr></table></figure>
<p>多<code>pull</code>几次直至出现<code>Already up to date</code>的字样</p>
<h2 id="添加文件到暂存区">添加文件到暂存区</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>
<h2 id="提交更改">提交更改</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;提交的注释&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="上传项目">上传项目</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git push origin main</span><br></pre></td></tr></table></figure>
<p>注意上面的<code>main</code>是根据github私有库中的默认分支名来走的，如果添加了README.md文件，那么默认会变成<code>main</code>，也有可能是<code>master</code>需要自己去查看</p>
<p><img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月20日16时02分56秒-image-20240620160249708.png" /></p>
<p>查看github私有库，成功的话文件应该在里面了</p>
<p>在github中生成一个<code>token</code>，将<code>token</code>加入源代码私有仓库和连接GitHub
pages的仓库,命名为<code>GH_TOKEN</code></p>
<p>在Blog根目录新建<code>.github</code>文件夹，在文件夹中新建<code>workflows</code>文件夹，在<code>workflows</code>文件夹中新建<code>deploy.yml</code>文件</p>
<p>（若已存在<code>.github</code>文件夹，那么只需执行后面的操作）</p>
<p>在<code>deploy.yml</code>文件中写入以下内容：</p>
<p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">name</span>: <span class="title class_">Deploy</span> <span class="title class_">Hexo</span> to <span class="title class_">GitHub</span> <span class="title class_">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on</span>:</span><br><span class="line">  <span class="attr">push</span>:</span><br><span class="line">    <span class="attr">branches</span>:</span><br><span class="line">      - main  # 当推送到 main 分支时触发</span><br><span class="line"></span><br><span class="line"><span class="attr">jobs</span>:</span><br><span class="line">  <span class="attr">build</span>:</span><br><span class="line">    runs-<span class="attr">on</span>: ubuntu-latest</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps</span>:</span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Checkout</span> repository</span><br><span class="line">        <span class="attr">uses</span>: actions/checkout@v2</span><br><span class="line">        <span class="attr">with</span>:</span><br><span class="line">          <span class="attr">submodules</span>: <span class="literal">false</span>  # 禁用子模块检查</span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Setup</span> <span class="title class_">Node</span>.<span class="property">js</span></span><br><span class="line">        <span class="attr">uses</span>: actions/setup-node@v2</span><br><span class="line">        <span class="attr">with</span>:</span><br><span class="line">          node-<span class="attr">version</span>: <span class="string">&#x27;20&#x27;</span></span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Install</span> <span class="title class_">Dependencies</span></span><br><span class="line">        <span class="attr">run</span>: npm install</span><br><span class="line">        </span><br><span class="line">        # <span class="title class_">Install</span> pandoc <span class="keyword">for</span> mathjax (<span class="title class_">Optional</span>)</span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Install</span> pandoc</span><br><span class="line">        <span class="attr">run</span>: |</span><br><span class="line">          wget -c <span class="attr">https</span>:<span class="comment">//github.com/jgm/pandoc/releases/download/3.2/pandoc-3.2-1-amd64.deb</span></span><br><span class="line">          sudo dpkg -i pandoc-<span class="number">3.2</span>-<span class="number">1</span>-amd64.<span class="property">deb</span></span><br><span class="line">          </span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Install</span> <span class="title class_">Hexo</span> <span class="title class_">Git</span> <span class="title class_">Deployer</span></span><br><span class="line">        <span class="attr">run</span>: |</span><br><span class="line">          npm install hexo-deployer-git --save</span><br><span class="line">          npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Clean</span> and <span class="title class_">Generate</span> <span class="title class_">Static</span> <span class="title class_">Files</span></span><br><span class="line">        <span class="attr">run</span>: |</span><br><span class="line">          hexo clean</span><br><span class="line">          hexo generate</span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Configure</span> <span class="title class_">Git</span></span><br><span class="line">        <span class="attr">run</span>: |</span><br><span class="line">          git config --<span class="variable language_">global</span> user.<span class="property">name</span> <span class="string">&#x27;github-actions[bot]&#x27;</span></span><br><span class="line">          git config --<span class="variable language_">global</span> user.<span class="property">email</span> <span class="string">&#x27;github-actions[bot]@users.noreply.github.com&#x27;</span></span><br><span class="line"></span><br><span class="line">      - <span class="attr">name</span>: <span class="title class_">Deploy</span> to <span class="title class_">GitHub</span> <span class="title class_">Pages</span></span><br><span class="line">        <span class="attr">env</span>:</span><br><span class="line">          <span class="attr">GH_TOKEN</span>: $&#123;&#123; secrets.<span class="property">GH_TOKEN</span> &#125;&#125;</span><br><span class="line">        <span class="attr">run</span>: |</span><br><span class="line">          cd public/</span><br><span class="line">          git init</span><br><span class="line">          git add -A</span><br><span class="line">          git commit -m <span class="string">&quot;Create by workflows&quot;</span></span><br><span class="line">          git remote add origin <span class="attr">https</span>:<span class="comment">//$&#123;&#123; secrets.GH_TOKEN &#125;&#125;@github.com/wilfredzoz/wilfredzoz.github.io.git</span></span><br><span class="line">          git push origin <span class="attr">HEAD</span>:master -f</span><br><span class="line">          </span><br></pre></td></tr></table></figure></p>
<p>​</p>
<p>注意：</p>
<p><code>node-version</code>可以在<code>git bash</code>中输入<code>node -v</code>查看，只用输入大版本数字</p>
<p><code>Install pandoc for mathjax</code>是为需要<code>mathjax</code>包所准备的因为服务器需要下载这些包才能生成静态文件进行推送，这里<code>pandoc</code>的版本需要与本地博客中<code>pandoc</code>版本一致</p>
<p><code>GH_TOKEN</code>为之前设置的两个资料库的<code>Token</code>名</p>
<p>工作流最后<code>Deploy to GitHub Pages</code>的作用就是，将源代码资料库中，通过工作流生成的静态文件推送到连接到博客的公开资料库中，注意最后<code>git push origin HEAD:master -f</code>中的分支名称要和公开资料库（github
pages）中的分支名称相同。</p>
<p>对博客使用hexo命令进行修改之后，需要上传文件只需分别输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;注释&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure>
<p>就能让本地库的文件上传至源代码私有库，触发工作流进行：</p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月20日16时43分08秒-image-20240620164307944.png"
alt="image-20240620164307944" />
<figcaption aria-hidden="true">image-20240620164307944</figcaption>
</figure>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月20日16时43分22秒-image-20240620164322260.png"
alt="image-20240620164322260" />
<figcaption aria-hidden="true">image-20240620164322260</figcaption>
</figure>
<p>若工作流中的步骤全部完成，通过<code>Deploy to GitHub Pages</code>就会自动上传更新内容至github
pages的公开库，进行博客的自动部署s</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>github工作流</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo之文章预览设置</title>
    <url>/2024/06/19/hexo%E4%B9%8B%E6%96%87%E7%AB%A0%E9%A2%84%E8%A7%88%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="站点首页不显示文章全文">站点首页不显示文章全文</h3>
<h4 id="文章摘要设置">文章摘要设置</h4>
<p>打开主题配置文件<code>_config.yml</code>文件，找到如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure>
<p>把这里的false改为true就可以了在首页启动显示文章预览了，length是显示预览的长度。</p>
<span id="more"></span>
<p>这里我们可以通过在文章使用<code>&lt;!-- more --&gt;</code>标志来精确控制文章的摘要预览，比如这篇文章就是在这个段落的末尾添加了该标志，所以本文在首页的预览就会显示到这个段落为止。</p>
<p>强烈推荐使用该<code>&lt;!-- more --&gt;</code>标志来控制文章的摘要预览，因为这种方式可以让摘要也按照css文件中的样式来渲染。如果使用了自动摘要的功能，你会发现文章摘要是一大团没有样式的文本，很是难看。</p>
<p>在<code>front-matter</code>添加<code>description:</code>,可以让文章只显示<code>description:</code>的内容</p>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月12日11时40分40秒-image-20240712114033348.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
<div data-align="center">
<img src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年07月12日11时41分39秒-image-20240712114138999.png"  width="75%" style="box-shadow: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);border-radius:10px;"/>
</div>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>npm安装失败</title>
    <url>/2024/06/19/npm%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<p>npl安装失败可能是因为网络问题</p>
<p>网上解决方法多是使用淘宝镜像源加速，但是淘宝镜像源已经过期，换另一个加速</p>
<p>首先清除缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure>
<p>切换到新的NPM镜像站</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure>
<p>检查是否成功切换到新的镜像站</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>
<p>果这个命令返回的是
https://registry.npmmirror.com，那么就说明已经成功切换到了新的镜像站。</p>
<p>在使用npm进行包的安装就可以了</p>
<p>原文：<a
href="https://blog.csdn.net/qq_34988204/article/details/135882862">https://blog.csdn.net/qq_34988204/article/details/135882862</a></p>
]]></content>
  </entry>
  <entry>
    <title>无法连接github.com错误解决</title>
    <url>/2024/06/19/%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5github-com%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<p>两种情况：
第一种情况自己有vpn，网页可以打开github。说明命令行在拉取/推送代码时并没有使用vpn进行代理</p>
<p>第二种情况没有vpn，这时可以去某些网站上找一些代理ip+port</p>
<p>解决办法：配置http代理Windows、Linux、Mac OS 中 git 命令相同：
配置socks5代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy socks5 127.0.0.1:7890</span><br><span class="line">git config --global https.proxy socks5 127.0.0.1:7890</span><br></pre></td></tr></table></figure>
<p>配置http代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line">git config --global https.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>注意：</p>
<p>命令中的主机号（127.0.0.1）是使用的代理的主机号(自己电脑有vpn那么本机可看做访问github的代理主机)，即填入127.0.0.1即可，否则填入代理主机
ip(就是网上找的那个ip)
命令中的端口号（7890）为代理软件(代理软件不显示端口的话，就去Windows中的代理服务器设置中查看)或代理主机的监听IP，可以从代理服务器配置中获得，否则填入网上找的那个端口port</p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日15时13分45秒-image-20240619151345494.png"
alt="image-20240619151345494" />
<figcaption aria-hidden="true">image-20240619151345494</figcaption>
</figure>
<p>socks5和http两种协议由使用的代理软件决定，不同软件对这两种协议的支持有差异，如果不确定可以都尝试一下
主机号和端口号可在代理的位置查看(自己有vpn的需要查看)</p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日15时14分00秒-image-20240619151400537.png"
alt="image-20240619151400537" />
<figcaption aria-hidden="true">image-20240619151400537</figcaption>
</figure>
<p>查看代理命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure>
<p>取消代理命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
<p><a
href="https://blog.csdn.net/zpf1813763637/article/details/128340109">原文链接</a></p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
  </entry>
  <entry>
    <title>hexo+github搭建个人博客</title>
    <url>/2024/06/19/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="创建个人博客">创建个人博客</h1>
<h2 id="创建个人博客文件夹">创建个人博客文件夹</h2>
<p>首先创建一个文件夹用来存放博客</p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日10时59分55秒-image-20240619105947918.png"
alt="image-20240619105947918" />
<figcaption aria-hidden="true">image-20240619105947918</figcaption>
</figure>
<p>在此文件夹中右键，选择打开git base，在命令栏中输入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>最后会在这个文件夹中创建很多文件：</p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日11时03分23秒-image-20240619110323650.png"
alt="image-20240619110323650" />
<figcaption aria-hidden="true">image-20240619110323650</figcaption>
</figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── _config.yml  网站的配置信息。可以在此配置大部分的参数。</span><br><span class="line">├── .gitignore   用于Git版本控制时忽略指定文件或目录。</span><br><span class="line">├── package.json 应用程序的信息。EJS,Stylus和Markdown渲染引擎已默认安装。</span><br><span class="line">├── .github      GitHub特定的配置文件夹。</span><br><span class="line">├── node_modules Node.js依赖模块存放目录。你通常不用关心这个。</span><br><span class="line">├── scaffolds    模版文件夹。新建文章时Hexo会根据scaffold来创建文件。</span><br><span class="line">├── source       资源文件夹是存放用户资源的地方。除_posts之外，开头命名为_(下划线)的文件/文件夹和隐藏的文件均会被忽略。</span><br><span class="line">|   └── _posts   存放博客文章的文件夹。</span><br><span class="line">└── themes       主题文件夹。Hexo会根据主题来生成静态页面。</span><br></pre></td></tr></table></figure>
<p>接下来在git中输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ hexo generate </span><br><span class="line">或者简写为：</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure>
<p>生成public站点文件夹</p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日11时02分59秒-image-20240619110259330.png"
alt="image-20240619110259330" />
<figcaption aria-hidden="true">image-20240619110259330</figcaption>
</figure>
<p>通过下面命令启动本地服务器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">或者简写为：</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日11时04分08秒-image-20240619110408337.png"
alt="image-20240619110408337" />
<figcaption aria-hidden="true">image-20240619110408337</figcaption>
</figure>
<p>不要ctrl+左键点击命令框中的链接，直接在浏览器中输入：<code>localhost:4000</code>即可进入网站：</p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日11时05分28秒-image-20240619110528406.png"
alt="image-20240619110528406" />
<figcaption aria-hidden="true">image-20240619110528406</figcaption>
</figure>
<h2 id="将个人博客文件夹加入github">将个人博客文件夹加入github</h2>
<p>在github中创建一个新的公开资料库</p>
<p>名字规则为：<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日13时53分55秒-image-20240619135355118.png"
alt="image-20240619135355118" /></p>
<p><strong>（注意不要选add
readme，这样会将默认分支改为main，在hexo中默认分支为master）</strong></p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日13时54分29秒-image-20240619135428975.png"
alt="image-20240619135428975" />
<figcaption aria-hidden="true">image-20240619135428975</figcaption>
</figure>
<p>记住该地址</p>
<h2
id="之前可能连接过生成ssh将github与git相连接">（之前可能连接过）生成SSH将github与git相连接*</h2>
<p>在git base中输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">name</span> yourname</span><br><span class="line">git config --<span class="variable language_">global</span> user.<span class="property">email</span> youremail</span><br><span class="line"></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail&quot;</span></span><br></pre></td></tr></table></figure>
<p>会生成一个<code>.ssh</code>文件</p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日13时57分18秒-image-20240619135718667.png"
alt="image-20240619135718667" />
<figcaption aria-hidden="true">image-20240619135718667</figcaption>
</figure>
<p>在该目录下有一个<code>id_rsa.pub</code>文件，复制其中的内容到：</p>
<p><code>gitthub</code>-<code>settings-SSH and GPG keys</code>-<code>New SSH key</code>-<code>Add new SSH Key</code>的<code>Key</code>中,Title随便写一个</p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日13时59分09秒-image-20240619135909717.png"
alt="image-20240619135909717" />
<figcaption aria-hidden="true">image-20240619135909717</figcaption>
</figure>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日13时59分30秒-image-20240619135930187.png"
alt="image-20240619135930187" />
<figcaption aria-hidden="true">image-20240619135930187</figcaption>
</figure>
<h2 id="测试git是否连接github">测试git是否连接github</h2>
<p>git base输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.<span class="property">com</span></span><br></pre></td></tr></table></figure>
<p>出现下图表示连接成功</p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日14时01分30秒-image-20240619140129995.png"
alt="image-20240619140129995" />
<figcaption aria-hidden="true">image-20240619140129995</figcaption>
</figure>
<h2 id="部署hexo">部署hexo</h2>
<p>使用编辑器打开由</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>生成的配置文件<code>_config.yml</code>，翻到最下面，将下面改为</p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日14时03分40秒-image-20240619140339951.png"
alt="image-20240619140339951" />
<figcaption aria-hidden="true">image-20240619140339951</figcaption>
</figure>
<p>注意这里的<code>branch</code>，如果在github没有设置默认<code>branch</code>为<code>main</code>的话，这里就保持不变</p>
<h2 id="安装deploy-git">安装deploy-git</h2>
<p>在git base使用命令：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h2 id="编辑博客">编辑博客</h2>
<p>在博客文件夹打开git base输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">&quot;文件名&quot;</span></span><br></pre></td></tr></table></figure>
<p>在<code>H:\Blog\source\_posts</code>文件夹中会创建一个<code>"文件名".md</code>的文件</p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日14时07分33秒-image-20240619140733905.png"
alt="image-20240619140733905" />
<figcaption aria-hidden="true">image-20240619140733905</figcaption>
</figure>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日14时07分58秒-image-20240619140757991.png"
alt="image-20240619140757991" />
<figcaption aria-hidden="true">image-20240619140757991</figcaption>
</figure>
<p>使用md编辑器打开文件进行编辑：</p>
<figure>
<img
src="https://raw.gitmirror.com/wilfredzoz/Picture/master/2024年06月19日14时09分49秒-image-20240619140949710.png"
alt="image-20240619140949710" />
<figcaption aria-hidden="true">image-20240619140949710</figcaption>
</figure>
<p>编辑好之后保存</p>
<h2 id="推送博客">推送博客</h2>
<p>在博客文件夹git base分别输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p>文章就会同步到github资料库，并且在网站<code>wilfredzoz.github.io</code>进推送</p>
<p>有时候<code>hexo d</code>会失败，不知道咋搞的，有时候又可以，怀疑是不是梯子的问题</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>个人博客搭建</tag>
      </tags>
  </entry>
</search>
